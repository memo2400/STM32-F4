
F407_Can_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800600c  0800600c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006014  08006014  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800601c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          0000034c  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f3a8  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000203c  00000000  00000000  0002f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dd0  00000000  00000000  00031508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ad0  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000216e8  00000000  00000000  00032da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa58  00000000  00000000  00054490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce005  00000000  00000000  00063ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003fc0  00000000  00000000  00131ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00135eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f50 	.word	0x08005f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08005f50 	.word	0x08005f50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t CanError [27] = "\nNo se pudo enviar mensaje\r";
//char serial_test [60] = {"h","o","l","a"} //,0xff, 0xfa, 0x98, 0xff};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
	{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, canRxData);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000578:	2100      	movs	r1, #0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f001 fb18 	bl	8001bb0 <HAL_CAN_GetRxMessage>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000586:	f002 f9fc 	bl	8002982 <HAL_GPIO_TogglePin>
					  canRxData[3],
					  canRxData[4],
					  canRxData[5],
					  canRxData[6],
					  canRxData[7]); */
	}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000028c 	.word	0x2000028c
 8000598:	20000258 	.word	0x20000258
 800059c:	40021000 	.word	0x40021000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b095      	sub	sp, #84	; 0x54
 80005a4:	af08      	add	r7, sp, #32
int main(void)
 80005a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005aa:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 ff56 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f946 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 fb24 	bl	8000c00 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 faf8 	bl	8000bac <MX_USART1_UART_Init>
  MX_CAN2_Init();
 80005bc:	f000 f9a8 	bl	8000910 <MX_CAN2_Init>
  MX_TIM13_Init();
 80005c0:	f000 faac 	bl	8000b1c <MX_TIM13_Init>
  MX_TIM14_Init();
 80005c4:	f000 face 	bl	8000b64 <MX_TIM14_Init>
  MX_TIM1_Init();
 80005c8:	f000 fa08 	bl	80009dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);  // segun yo 	 agregue
 80005cc:	4888      	ldr	r0, [pc, #544]	; (80007f0 <main+0x250>)
 80005ce:	f001 f9b7 	bl	8001940 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING); // esta IT llama al callback
 80005d2:	2102      	movs	r1, #2
 80005d4:	4886      	ldr	r0, [pc, #536]	; (80007f0 <main+0x250>)
 80005d6:	f001 fc0d 	bl	8001df4 <HAL_CAN_ActivateNotification>
  HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 80005da:	2204      	movs	r2, #4
 80005dc:	4985      	ldr	r1, [pc, #532]	; (80007f4 <main+0x254>)
 80005de:	4886      	ldr	r0, [pc, #536]	; (80007f8 <main+0x258>)
 80005e0:	f004 f896 	bl	8004710 <HAL_UART_Receive_IT>

  //timmer
  HAL_TIM_Base_Start_IT(&htim13);
 80005e4:	4885      	ldr	r0, [pc, #532]	; (80007fc <main+0x25c>)
 80005e6:	f002 fea7 	bl	8003338 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14); // iniciamos el timer
 80005ea:	4885      	ldr	r0, [pc, #532]	; (8000800 <main+0x260>)
 80005ec:	f002 fea4 	bl	8003338 <HAL_TIM_Base_Start_IT>
  canRxData [5] = 0xff;
  canRxData [6] = 0xff;
  canRxData [7] = 0xff;
  */

	HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4883      	ldr	r0, [pc, #524]	; (8000804 <main+0x264>)
 80005f6:	f002 f9ab 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	4881      	ldr	r0, [pc, #516]	; (8000804 <main+0x264>)
 8000600:	f002 f9a6 	bl	8002950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	487e      	ldr	r0, [pc, #504]	; (8000804 <main+0x264>)
 800060a:	f002 f9a1 	bl	8002950 <HAL_GPIO_WritePin>

	uint8_t contador_display = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t display[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 8000614:	4a7c      	ldr	r2, [pc, #496]	; (8000808 <main+0x268>)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	ca07      	ldmia	r2, {r0, r1, r2}
 800061c:	c303      	stmia	r3!, {r0, r1}
 800061e:	801a      	strh	r2, [r3, #0]
		    HAL_GPIO_WritePin(GPIOD, F_Pin, (((patron & 0x20) >> 5) & 0x01));
		    HAL_GPIO_WritePin(GPIOD, G_Pin, (((patron & 0x40) >> 6) & 0x01));
	}

	// PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Inicia el PWM // Inicia el canal principal
 8000620:	2100      	movs	r1, #0
 8000622:	487a      	ldr	r0, [pc, #488]	; (800080c <main+0x26c>)
 8000624:	f002 ff52 	bl	80034cc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // Inicia el canal complementario
 8000628:	2100      	movs	r1, #0
 800062a:	4878      	ldr	r0, [pc, #480]	; (800080c <main+0x26c>)
 800062c:	f003 fdd4 	bl	80041d8 <HAL_TIMEx_PWMN_Start>
	uint32_t dutyCycle = 100;
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	61fb      	str	r3, [r7, #28]
	      // Puedes cambiar el valor de dutyCycle para ajustar el brillo del LED
	  HAL_Delay(500); // Pequeño retardo para evitar cambios bruscos
	  dutyCycle = 800;*/


	  	  for (int i = 0; i <= 1000; i += 10)
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
 8000638:	e009      	b.n	800064e <main+0xae>
	      {
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);  // Ajusta el brillo
 800063a:	4b74      	ldr	r3, [pc, #464]	; (800080c <main+0x26c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
	        HAL_Delay(10);  // Pequeño retardo para ver el efecto
 8000642:	200a      	movs	r0, #10
 8000644:	f000 ff7c 	bl	8001540 <HAL_Delay>
	  	  for (int i = 0; i <= 1000; i += 10)
 8000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064a:	330a      	adds	r3, #10
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
 800064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000654:	ddf1      	ble.n	800063a <main+0x9a>
	      }

	      for (int i = 1000; i >= 0; i -= 10)
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
 800065c:	e009      	b.n	8000672 <main+0xd2>
	      {
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);  // Ajusta el brillo
 800065e:	4b6b      	ldr	r3, [pc, #428]	; (800080c <main+0x26c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
	        HAL_Delay(10);  // Pequeño retardo para ver el efecto
 8000666:	200a      	movs	r0, #10
 8000668:	f000 ff6a 	bl	8001540 <HAL_Delay>
	      for (int i = 1000; i >= 0; i -= 10)
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	3b0a      	subs	r3, #10
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	2b00      	cmp	r3, #0
 8000676:	daf2      	bge.n	800065e <main+0xbe>
	      }


	  // Diplay - Funcional ASC
	  // DisplayPort(display[contador_display]);
	  contador_display ++;
 8000678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800067c:	3301      	adds	r3, #1
 800067e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if (contador_display > 9){
 8000682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000686:	2b09      	cmp	r3, #9
 8000688:	d902      	bls.n	8000690 <main+0xf0>
		  contador_display = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }

	  // trama de datos

	  canTxData [0] = 0x26;
 8000690:	4b5f      	ldr	r3, [pc, #380]	; (8000810 <main+0x270>)
 8000692:	2226      	movs	r2, #38	; 0x26
 8000694:	701a      	strb	r2, [r3, #0]
	  canTxData [1] = 0x5C;
 8000696:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <main+0x270>)
 8000698:	225c      	movs	r2, #92	; 0x5c
 800069a:	705a      	strb	r2, [r3, #1]
	  canTxData [2] = 0x03;
 800069c:	4b5c      	ldr	r3, [pc, #368]	; (8000810 <main+0x270>)
 800069e:	2203      	movs	r2, #3
 80006a0:	709a      	strb	r2, [r3, #2]
	  canTxData [3] = 0x00;
 80006a2:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <main+0x270>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	70da      	strb	r2, [r3, #3]
	  canTxData [4] = 0xff;
 80006a8:	4b59      	ldr	r3, [pc, #356]	; (8000810 <main+0x270>)
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	711a      	strb	r2, [r3, #4]
	  canTxData [5] = 0xff;
 80006ae:	4b58      	ldr	r3, [pc, #352]	; (8000810 <main+0x270>)
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	715a      	strb	r2, [r3, #5]
	  canTxData [6] = 0xff;
 80006b4:	4b56      	ldr	r3, [pc, #344]	; (8000810 <main+0x270>)
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	719a      	strb	r2, [r3, #6]
	  canTxData [7] = 0xff;
 80006ba:	4b55      	ldr	r3, [pc, #340]	; (8000810 <main+0x270>)
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	71da      	strb	r2, [r3, #7]

	  // Leds encendido apagado

	  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c4:	4853      	ldr	r0, [pc, #332]	; (8000814 <main+0x274>)
 80006c6:	f002 f95c 	bl	8002982 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  HAL_GPIO_TogglePin(LED_E7_GPIO_Port, LED_E7_Pin);
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4851      	ldr	r0, [pc, #324]	; (8000814 <main+0x274>)
 80006ce:	f002 f958 	bl	8002982 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOE, LED_E8_Pin);

	  //Boton S2
	  if (HAL_GPIO_ReadPin(Boton_S2_GPIO_Port, Boton_S2_Pin))
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	484f      	ldr	r0, [pc, #316]	; (8000814 <main+0x274>)
 80006d8:	f002 f922 	bl	8002920 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <main+0x14c>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <main+0x274>)
 80006e8:	f002 f94b 	bl	8002982 <HAL_GPIO_TogglePin>


	  //USART
	  //HAL_UART_Transmit(&huart1, (char*)contartoggle, sizeof(contartoggle), 300);
	  //HAL_UART_Transmit(&huart1, serial, sizeof(serial), 300);
	  HAL_UART_Transmit(&huart1, (uint8_t*)0x98, 16, HAL_MAX_DELAY);
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2210      	movs	r2, #16
 80006f2:	2198      	movs	r1, #152	; 0x98
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <main+0x258>)
 80006f6:	f003 ff80 	bl	80045fa <HAL_UART_Transmit>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien


	  //Enviar CAN Si funciono.

	  HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, canTxData, &canTxMailbox);
 80006fa:	4b47      	ldr	r3, [pc, #284]	; (8000818 <main+0x278>)
 80006fc:	4a44      	ldr	r2, [pc, #272]	; (8000810 <main+0x270>)
 80006fe:	4947      	ldr	r1, [pc, #284]	; (800081c <main+0x27c>)
 8000700:	483b      	ldr	r0, [pc, #236]	; (80007f0 <main+0x250>)
 8000702:	f001 f961 	bl	80019c8 <HAL_CAN_AddTxMessage>


	  // Revisar si el conteo mensaje se envio
	  uint8_t ContarIntentoCan = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 800070c:	e017      	b.n	800073e <main+0x19e>
	  	  {
	  	  	  HAL_UART_Transmit (&huart1, canenviado, sizeof(canenviado), 300);
 800070e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000712:	2212      	movs	r2, #18
 8000714:	4942      	ldr	r1, [pc, #264]	; (8000820 <main+0x280>)
 8000716:	4838      	ldr	r0, [pc, #224]	; (80007f8 <main+0x258>)
 8000718:	f003 ff6f 	bl	80045fa <HAL_UART_Transmit>
	  		  //HAL_Delay(300);

	  		  if (ContarIntentoCan == 3)
 800071c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000720:	2b03      	cmp	r3, #3
 8000722:	d107      	bne.n	8000734 <main+0x194>
	  		  {
	  			  HAL_UART_Transmit (&huart1, CanError, sizeof(CanError), 300);
 8000724:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000728:	221b      	movs	r2, #27
 800072a:	493e      	ldr	r1, [pc, #248]	; (8000824 <main+0x284>)
 800072c:	4832      	ldr	r0, [pc, #200]	; (80007f8 <main+0x258>)
 800072e:	f003 ff64 	bl	80045fa <HAL_UART_Transmit>
	  			  break;
 8000732:	e00d      	b.n	8000750 <main+0x1b0>
	  		  }
	  		ContarIntentoCan++;
 8000734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000738:	3301      	adds	r3, #1
 800073a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <main+0x278>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	482a      	ldr	r0, [pc, #168]	; (80007f0 <main+0x250>)
 8000746:	f001 fa0f 	bl	8001b68 <HAL_CAN_IsTxMessagePending>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1de      	bne.n	800070e <main+0x16e>
	  sprintf(BufferEnvio, "\n\n MSM CAN es: %X %X %X %X\r", canRxData[0],canRxData[1],canRxData[2],canRxData[3]); //%d convierte hex a Dec
	  HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien
	  */


	  sprintf(BufferEnvio, " El PGN Enviado: %lX ", canTxHeader.ExtId); //%d convierte hex a Dec
 8000750:	4b32      	ldr	r3, [pc, #200]	; (800081c <main+0x27c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	461a      	mov	r2, r3
 8000756:	4934      	ldr	r1, [pc, #208]	; (8000828 <main+0x288>)
 8000758:	4834      	ldr	r0, [pc, #208]	; (800082c <main+0x28c>)
 800075a:	f004 ff55 	bl	8005608 <siprintf>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);

	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 800075e:	4b34      	ldr	r3, [pc, #208]	; (8000830 <main+0x290>)
 8000760:	685a      	ldr	r2, [r3, #4]
			  CanRxHeader.ExtId,
			  canRxData[0],
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <main+0x294>)
 8000764:	781b      	ldrb	r3, [r3, #0]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 8000766:	469c      	mov	ip, r3
			  canRxData[1],
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <main+0x294>)
 800076a:	785b      	ldrb	r3, [r3, #1]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 800076c:	4619      	mov	r1, r3
			  canRxData[2],
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <main+0x294>)
 8000770:	789b      	ldrb	r3, [r3, #2]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 8000772:	4618      	mov	r0, r3
			  canRxData[3],
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x294>)
 8000776:	78db      	ldrb	r3, [r3, #3]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 8000778:	461c      	mov	r4, r3
			  canRxData[4],
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <main+0x294>)
 800077c:	791b      	ldrb	r3, [r3, #4]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 800077e:	461d      	mov	r5, r3
			  canRxData[5],
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <main+0x294>)
 8000782:	795b      	ldrb	r3, [r3, #5]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 8000784:	461e      	mov	r6, r3
			  canRxData[6],
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <main+0x294>)
 8000788:	799b      	ldrb	r3, [r3, #6]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 800078a:	607b      	str	r3, [r7, #4]
			  canRxData[7]);
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <main+0x294>)
 800078e:	79db      	ldrb	r3, [r3, #7]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 8000790:	9306      	str	r3, [sp, #24]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	9305      	str	r3, [sp, #20]
 8000796:	9604      	str	r6, [sp, #16]
 8000798:	9503      	str	r5, [sp, #12]
 800079a:	9402      	str	r4, [sp, #8]
 800079c:	9001      	str	r0, [sp, #4]
 800079e:	9100      	str	r1, [sp, #0]
 80007a0:	4663      	mov	r3, ip
 80007a2:	4925      	ldr	r1, [pc, #148]	; (8000838 <main+0x298>)
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <main+0x28c>)
 80007a6:	f004 ff2f 	bl	8005608 <siprintf>

	  	  	  	  canRxData[0] = 0;
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <main+0x294>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
	  			  canRxData[1] = 0;
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <main+0x294>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	705a      	strb	r2, [r3, #1]
	  			  canRxData[2] = 0;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <main+0x294>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	709a      	strb	r2, [r3, #2]
	  			  canRxData[3] = 0;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <main+0x294>)
 80007be:	2200      	movs	r2, #0
 80007c0:	70da      	strb	r2, [r3, #3]
	  			  canRxData[4] = 0;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <main+0x294>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
	  			  canRxData[5] = 0;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <main+0x294>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
	  			  canRxData[6] = 0;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <main+0x294>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	719a      	strb	r2, [r3, #6]
	  			  canRxData[7] = 0;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <main+0x294>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	71da      	strb	r2, [r3, #7]

	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);



	  HAL_Delay(500);
 80007da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007de:	f000 feaf 	bl	8001540 <HAL_Delay>
	  contartoggle ++;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <main+0x29c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <main+0x29c>)
 80007ec:	701a      	strb	r2, [r3, #0]
  {
 80007ee:	e721      	b.n	8000634 <main+0x94>
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	20000214 	.word	0x20000214
 80007f8:	200001cc 	.word	0x200001cc
 80007fc:	2000013c 	.word	0x2000013c
 8000800:	20000184 	.word	0x20000184
 8000804:	40020000 	.word	0x40020000
 8000808:	08005fb4 	.word	0x08005fb4
 800080c:	200000f4 	.word	0x200000f4
 8000810:	20000294 	.word	0x20000294
 8000814:	40021000 	.word	0x40021000
 8000818:	2000029c 	.word	0x2000029c
 800081c:	20000274 	.word	0x20000274
 8000820:	20000018 	.word	0x20000018
 8000824:	2000002c 	.word	0x2000002c
 8000828:	08005f68 	.word	0x08005f68
 800082c:	2000021c 	.word	0x2000021c
 8000830:	20000258 	.word	0x20000258
 8000834:	2000028c 	.word	0x2000028c
 8000838:	08005f80 	.word	0x08005f80
 800083c:	20000218 	.word	0x20000218

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	; 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fefa 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <SystemClock_Config+0xc8>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <SystemClock_Config+0xc8>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <SystemClock_Config+0xcc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <SystemClock_Config+0xcc>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008b4:	2350      	movs	r3, #80	; 0x50
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 f88f 	bl	80029e8 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d0:	f000 fb86 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 faf1 	bl	8002ed8 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008fc:	f000 fb70 	bl	8000fe0 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	; 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <MX_CAN2_Init+0xc0>)
 800091a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_CAN2_Init+0xbc>)
 800091e:	2210      	movs	r2, #16
 8000920:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_CAN2_Init+0xbc>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000930:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000934:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800093c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000946:	2200      	movs	r2, #0
 8000948:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_CAN2_Init+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000952:	2200      	movs	r2, #0
 8000954:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000958:	2200      	movs	r2, #0
 800095a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_CAN2_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000962:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_CAN2_Init+0xbc>)
 8000964:	f000 fe10 	bl	8001588 <HAL_CAN_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800096e:	f000 fb37 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

    // ####### Trama de datos FULL HD
    canTxHeader.DLC = 0x08;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_CAN2_Init+0xc4>)
 8000974:	2208      	movs	r2, #8
 8000976:	611a      	str	r2, [r3, #16]
    //canTxHeader.ExtId = 0x18fee000; //temp aceite
    canTxHeader.ExtId = 0x18fec100; // Odometro HR.
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_CAN2_Init+0xc4>)
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_CAN2_Init+0xc8>)
 800097c:	605a      	str	r2, [r3, #4]
    canTxHeader.IDE = CAN_ID_EXT;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_CAN2_Init+0xc4>)
 8000980:	2204      	movs	r2, #4
 8000982:	609a      	str	r2, [r3, #8]
    canTxHeader.RTR = CAN_RTR_DATA;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_CAN2_Init+0xc4>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    //canTxHeader.StdId = 0x00; // lo comento
    canTxHeader.TransmitGlobalTime = DISABLE;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_CAN2_Init+0xc4>)
 800098c:	2200      	movs	r2, #0
 800098e:	751a      	strb	r2, [r3, #20]

    // ####### Configutacion del filtro.
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  //  ver si es de can2
 8000994:	230a      	movs	r3, #10
 8000996:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //ver si este es para CAN2
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh =0;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow =0x0000;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank =0; // ver si es de can2
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig); //asigno el filtro a la funcion.
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_CAN2_Init+0xbc>)
 80009be:	f000 fedf 	bl	8001780 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000cc 	.word	0x200000cc
 80009d0:	40006800 	.word	0x40006800
 80009d4:	20000274 	.word	0x20000274
 80009d8:	18fec100 	.word	0x18fec100

080009dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	; 0x58
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fe17 	bl	8005648 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a1c:	4a3e      	ldr	r2, [pc, #248]	; (8000b18 <MX_TIM1_Init+0x13c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a22:	224f      	movs	r2, #79	; 0x4f
 8000a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3a:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a46:	4833      	ldr	r0, [pc, #204]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a48:	f002 fc26 	bl	8003298 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a52:	f000 fac5 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a60:	4619      	mov	r1, r3
 8000a62:	482c      	ldr	r0, [pc, #176]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a64:	f002 ffac 	bl	80039c0 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a6e:	f000 fab7 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a72:	4828      	ldr	r0, [pc, #160]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a74:	f002 fcd0 	bl	8003418 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a7e:	f000 faaf 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4820      	ldr	r0, [pc, #128]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000a92:	f003 fc5b 	bl	800434c <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 faa0 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4813      	ldr	r0, [pc, #76]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000ac6:	f002 feb9 	bl	800383c <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ad0:	f000 fa86 	bl	8000fe0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000af8:	f003 fca4 	bl	8004444 <HAL_TIMEx_ConfigBreakDeadTime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b02:	f000 fa6d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM1_Init+0x138>)
 8000b08:	f000 fb52 	bl	80011b0 <HAL_TIM_MspPostInit>

}
 8000b0c:	bf00      	nop
 8000b0e:	3758      	adds	r7, #88	; 0x58
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000f4 	.word	0x200000f4
 8000b18:	40010000 	.word	0x40010000

08000b1c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <MX_TIM13_Init+0x44>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b28:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b2c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b36:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b3a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_TIM13_Init+0x40>)
 8000b4a:	f002 fba5 	bl	8003298 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000b54:	f000 fa44 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000013c 	.word	0x2000013c
 8000b60:	40001c00 	.word	0x40001c00

08000b64 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <MX_TIM14_Init+0x44>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b70:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b74:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b82:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_TIM14_Init+0x40>)
 8000b92:	f002 fb81 	bl	8003298 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000b9c:	f000 fa20 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000184 	.word	0x20000184
 8000ba8:	40002000 	.word	0x40002000

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f003 fcb9 	bl	800455a <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f9f7 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001cc 	.word	0x200001cc
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a56      	ldr	r2, [pc, #344]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a4f      	ldr	r2, [pc, #316]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a41      	ldr	r2, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_GPIO_Init+0x178>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A4_Pin|LED_A5_Pin|LED_A6_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2170      	movs	r1, #112	; 0x70
 8000c8a:	483c      	ldr	r0, [pc, #240]	; (8000d7c <MX_GPIO_Init+0x17c>)
 8000c8c:	f001 fe60 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_E7_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f24e 0180 	movw	r1, #57472	; 0xe080
 8000c96:	483a      	ldr	r0, [pc, #232]	; (8000d80 <MX_GPIO_Init+0x180>)
 8000c98:	f001 fe5a 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ca2:	4838      	ldr	r0, [pc, #224]	; (8000d84 <MX_GPIO_Init+0x184>)
 8000ca4:	f001 fe54 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C_Pin|D_Pin|E_Pin|F_Pin
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8000cae:	4835      	ldr	r0, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x184>)
 8000cb0:	f001 fe4e 	bl	8002950 <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED_A4_Pin LED_A5_Pin LED_A6_Pin */
  GPIO_InitStruct.Pin = LED_A4_Pin|LED_A5_Pin|LED_A6_Pin;
 8000cb4:	2370      	movs	r3, #112	; 0x70
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	482c      	ldr	r0, [pc, #176]	; (8000d7c <MX_GPIO_Init+0x17c>)
 8000ccc:	f001 fc8c 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_E7_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED_E7_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000cd0:	f24e 0380 	movw	r3, #57472	; 0xe080
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4825      	ldr	r0, [pc, #148]	; (8000d80 <MX_GPIO_Init+0x180>)
 8000cea:	f001 fc7d 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_S1_IT_Pin */
  GPIO_InitStruct.Pin = Boton_S1_IT_Pin;
 8000cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_S1_IT_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_GPIO_Init+0x180>)
 8000d06:	f001 fc6f 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_S2_Pin Boton_S3_Pin */
  GPIO_InitStruct.Pin = Boton_S2_Pin|Boton_S3_Pin;
 8000d0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_GPIO_Init+0x180>)
 8000d20:	f001 fc62 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000d24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_GPIO_Init+0x184>)
 8000d3e:	f001 fc53 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = C_Pin|D_Pin|E_Pin|F_Pin
 8000d42:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000d46:	617b      	str	r3, [r7, #20]
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <MX_GPIO_Init+0x184>)
 8000d5c:	f001 fc44 	bl	80025e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f001 fb76 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d6a:	2028      	movs	r0, #40	; 0x28
 8000d6c:	f001 fb8f 	bl	800248e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Transmit (&huart1, InterrupcionUsart, sizeof(InterrupcionUsart), HAL_MAX_DELAY);
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	2215      	movs	r2, #21
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <HAL_UART_RxCpltCallback+0x28>)
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_UART_RxCpltCallback+0x2c>)
 8000d9a:	f003 fc2e 	bl	80045fa <HAL_UART_Transmit>
	//HAL_UART_Receive_IT(&huart1, InterrupcionUsart, sizeof(InterrupcionUsart));
	HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4905      	ldr	r1, [pc, #20]	; (8000db8 <HAL_UART_RxCpltCallback+0x30>)
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <HAL_UART_RxCpltCallback+0x2c>)
 8000da4:	f003 fcb4 	bl	8004710 <HAL_UART_Receive_IT>
	//UsartRxData

}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	200001cc 	.word	0x200001cc
 8000db8:	20000214 	.word	0x20000214

08000dbc <HAL_GPIO_EXTI_Callback>:
volatile uint8_t FlagBotonPresionado = 0;
uint32_t lastInterruptTime = 0;
int contador_IT = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 8000dc6:	f000 fbaf 	bl	8001528 <HAL_GetTick>
 8000dca:	60f8      	str	r0, [r7, #12]

	//GPIOA->ODR=0B000000;

	// Verifica si tiempo transcurrido es mayor que tiempo de debounce
	if ((currentTime - lastInterruptTime) > DEBOUNCE_TIME) {
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b32      	cmp	r3, #50	; 0x32
 8000dd6:	d966      	bls.n	8000ea6 <HAL_GPIO_EXTI_Callback+0xea>


		if (GPIO_Pin == Boton_S1_IT_Pin)  // Asegurar que es el pin correcto
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dde:	d162      	bne.n	8000ea6 <HAL_GPIO_EXTI_Callback+0xea>
		{
			FlagBotonPresionado = 1;
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(LED_A5_GPIO_Port, LED_A5_Pin);  // Ejemplo: Cambiar el estado de un LED
			if (contador_IT == 1)
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d104      	bne.n	8000df8 <HAL_GPIO_EXTI_Callback+0x3c>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2110      	movs	r1, #16
 8000df2:	4833      	ldr	r0, [pc, #204]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000df4:	f001 fdac 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT == 2)
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d104      	bne.n	8000e0a <HAL_GPIO_EXTI_Callback+0x4e>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2120      	movs	r1, #32
 8000e04:	482e      	ldr	r0, [pc, #184]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e06:	f001 fda3 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT == 3)
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d109      	bne.n	8000e26 <HAL_GPIO_EXTI_Callback+0x6a>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2120      	movs	r1, #32
 8000e16:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e18:	f001 fd9a 	bl	8002950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e22:	f001 fd95 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT == 4)
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d109      	bne.n	8000e42 <HAL_GPIO_EXTI_Callback+0x86>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2110      	movs	r1, #16
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e34:	f001 fd8c 	bl	8002950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	4820      	ldr	r0, [pc, #128]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e3e:	f001 fd87 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT == 5)
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d104      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0x98>
			{
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e50:	f001 fd7e 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT == 6)
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d109      	bne.n	8000e70 <HAL_GPIO_EXTI_Callback+0xb4>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2120      	movs	r1, #32
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e62:	f001 fd75 	bl	8002950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e6c:	f001 fd70 	bl	8002950 <HAL_GPIO_WritePin>
			}
			if (contador_IT >= 7)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	dd11      	ble.n	8000e9c <HAL_GPIO_EXTI_Callback+0xe0>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e7e:	f001 fd67 	bl	8002950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2120      	movs	r1, #32
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e88:	f001 fd62 	bl	8002950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x104>)
 8000e92:	f001 fd5d 	bl	8002950 <HAL_GPIO_WritePin>
				contador_IT = 0;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
			}
			contador_IT++;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x100>)
 8000ea4:	6013      	str	r3, [r2, #0]
		}
	}
	lastInterruptTime = currentTime;
 8000ea6:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002a4 	.word	0x200002a4
 8000eb8:	200002a0 	.word	0x200002a0
 8000ebc:	200002a8 	.word	0x200002a8
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_TIM_PeriodElapsedCallback>:
float banderatim = 0;
uint8_t contador_display_tim = 9;
uint8_t display[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) // aqui le indicamos que usamos el timmer 1 para no revolver timers
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d119      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		//HAL_GPIO_TogglePin(LedRojo_GPIO_Port, LedRojo_Pin);
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000edc:	f001 fd51 	bl	8002982 <HAL_GPIO_TogglePin>

		/*HAL_GPIO_TogglePin(A_GPIO_Port, A_Pin);
		HAL_GPIO_TogglePin(B_GPIO_Port, B_Pin);*/

		DisplayPort(display[contador_display_tim]);
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ee8:	5c9b      	ldrb	r3, [r3, r2]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f81a 	bl	8000f24 <DisplayPort>

		if (contador_display_tim == 0){
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x3a>
			  contador_display_tim = 10;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000efa:	220a      	movs	r2, #10
 8000efc:	701a      	strb	r2, [r3, #0]
		}
		contador_display_tim --;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f08:	701a      	strb	r2, [r3, #0]
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_E, (patron & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_F, (patron & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_G, (patron & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    */
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40002000 	.word	0x40002000
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	20000047 	.word	0x20000047
 8000f20:	20000048 	.word	0x20000048

08000f24 <DisplayPort>:

void DisplayPort(uint8_t patron){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]

	    HAL_GPIO_WritePin(GPIOD, A_Pin, (((patron & 0x01) >> 0) & 0x01));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3c:	4827      	ldr	r0, [pc, #156]	; (8000fdc <DisplayPort+0xb8>)
 8000f3e:	f001 fd07 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, B_Pin, (((patron & 0x02) >> 1) & 0x01));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	105b      	asrs	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4821      	ldr	r0, [pc, #132]	; (8000fdc <DisplayPort+0xb8>)
 8000f56:	f001 fcfb 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, C_Pin, (((patron & 0x04) >> 2) & 0x01));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	109b      	asrs	r3, r3, #2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	481b      	ldr	r0, [pc, #108]	; (8000fdc <DisplayPort+0xb8>)
 8000f6e:	f001 fcef 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, D_Pin, (((patron & 0x08) >> 3) & 0x01));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	10db      	asrs	r3, r3, #3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4815      	ldr	r0, [pc, #84]	; (8000fdc <DisplayPort+0xb8>)
 8000f86:	f001 fce3 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, E_Pin, (((patron & 0x10) >> 4) & 0x01));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	111b      	asrs	r3, r3, #4
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <DisplayPort+0xb8>)
 8000f9e:	f001 fcd7 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, F_Pin, (((patron & 0x20) >> 5) & 0x01));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	115b      	asrs	r3, r3, #5
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <DisplayPort+0xb8>)
 8000fb6:	f001 fccb 	bl	8002950 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, G_Pin, (((patron & 0x40) >> 6) & 0x01));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	119b      	asrs	r3, r3, #6
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <DisplayPort+0xb8>)
 8000fce:	f001 fcbf 	bl	8002950 <HAL_GPIO_WritePin>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_MspInit+0x4c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_CAN_MspInit+0xb0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d141      	bne.n	80010e2 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 8001068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800106c:	6413      	str	r3, [r2, #64]	; 0x40
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 8001084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_CAN_MspInit+0xb4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010b2:	2360      	movs	r3, #96	; 0x60
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010c2:	2309      	movs	r3, #9
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <HAL_CAN_MspInit+0xb8>)
 80010ce:	f001 fa8b 	bl	80025e8 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2040      	movs	r0, #64	; 0x40
 80010d8:	f001 f9bd 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80010dc:	2040      	movs	r0, #64	; 0x40
 80010de:	f001 f9d6 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40006800 	.word	0x40006800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10e      	bne.n	8001128 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001126:	e036      	b.n	8001196 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d116      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	202c      	movs	r0, #44	; 0x2c
 8001154:	f001 f97f 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001158:	202c      	movs	r0, #44	; 0x2c
 800115a:	f001 f998 	bl	800248e <HAL_NVIC_EnableIRQ>
}
 800115e:	e01a      	b.n	8001196 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_TIM_Base_MspInit+0xb4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d115      	bne.n	8001196 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	202d      	movs	r0, #45	; 0x2d
 800118c:	f001 f963 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001190:	202d      	movs	r0, #45	; 0x2d
 8001192:	f001 f97c 	bl	800248e <HAL_NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40001c00 	.word	0x40001c00
 80011ac:	40002000 	.word	0x40002000

080011b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_MspPostInit+0x68>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d11e      	bne.n	8001210 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_TIM_MspPostInit+0x70>)
 800120c:	f001 f9ec 	bl	80025e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_UART_MspInit+0x94>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d134      	bne.n	80012b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_UART_MspInit+0x98>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_UART_MspInit+0x98>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_MspInit+0x98>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_UART_MspInit+0x98>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_UART_MspInit+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800127e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001290:	2307      	movs	r3, #7
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_UART_MspInit+0x9c>)
 800129c:	f001 f9a4 	bl	80025e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2025      	movs	r0, #37	; 0x25
 80012a6:	f001 f8d6 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012aa:	2025      	movs	r0, #37	; 0x25
 80012ac:	f001 f8ef 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f8f6 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <USART1_IRQHandler+0x10>)
 800131e:	f003 fa1d 	bl	800475c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001cc 	.word	0x200001cc

0800132c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Boton_S1_IT_Pin);
 8001330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001334:	f001 fb40 	bl	80029b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001342:	f002 f98b 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000013c 	.word	0x2000013c

08001350 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001356:	f002 f981 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000184 	.word	0x20000184

08001364 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <CAN2_RX0_IRQHandler+0x10>)
 800136a:	f000 fd69 	bl	8001e40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000cc 	.word	0x200000cc

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f004 f956 	bl	8005658 <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20020000 	.word	0x20020000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	200002ac 	.word	0x200002ac
 80013e0:	20000400 	.word	0x20000400

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800140c:	f7ff ffea 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001418:	e002      	b.n	8001420 <LoopCopyDataInit>

0800141a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141e:	3304      	adds	r3, #4

08001420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001424:	d3f9      	bcc.n	800141a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001428:	4c0a      	ldr	r4, [pc, #40]	; (8001454 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800142c:	e001      	b.n	8001432 <LoopFillZerobss>

0800142e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001430:	3204      	adds	r2, #4

08001432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001434:	d3fb      	bcc.n	800142e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001436:	f004 f915 	bl	8005664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f8b1 	bl	80005a0 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800144c:	0800601c 	.word	0x0800601c
  ldr r2, =_sbss
 8001450:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001454:	200003fc 	.word	0x200003fc

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 ffdb 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fdac 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fff3 	bl	80024aa <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 ffbb 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000054 	.word	0x20000054
 80014f8:	2000005c 	.word	0x2000005c
 80014fc:	20000058 	.word	0x20000058

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000005c 	.word	0x2000005c
 8001524:	200002b0 	.word	0x200002b0

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	200002b0 	.word	0x200002b0

08001540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff ffee 	bl	8001528 <HAL_GetTick>
 800154c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d005      	beq.n	8001566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_Delay+0x44>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001566:	bf00      	nop
 8001568:	f7ff ffde 	bl	8001528 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d8f7      	bhi.n	8001568 <HAL_Delay+0x28>
  {
  }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000005c 	.word	0x2000005c

08001588 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0ed      	b.n	8001776 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd48 	bl	800103c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff ffb4 	bl	8001528 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff ffb0 	bl	8001528 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0c5      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0e5      	beq.n	80015c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0202 	bic.w	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ff8e 	bl	8001528 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ff8a 	bl	8001528 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e09f      	b.n	8001776 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e5      	bne.n	8001610 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e007      	b.n	800166e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7e5b      	ldrb	r3, [r3, #25]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e007      	b.n	8001698 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e9b      	ldrb	r3, [r3, #26]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0220 	bic.w	r2, r2, #32
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7edb      	ldrb	r3, [r3, #27]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e007      	b.n	80016ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0210 	orr.w	r2, r2, #16
 80016ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7f1b      	ldrb	r3, [r3, #28]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0208 	orr.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e007      	b.n	8001716 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0208 	bic.w	r2, r2, #8
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7f5b      	ldrb	r3, [r3, #29]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0204 	orr.w	r2, r2, #4
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0204 	bic.w	r2, r2, #4
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	ea42 0103 	orr.w	r1, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001798:	7cfb      	ldrb	r3, [r7, #19]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_ConfigFilter+0x26>
 800179e:	7cfb      	ldrb	r3, [r7, #19]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 80be 	bne.w	8001922 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_CAN_ConfigFilter+0x1bc>)
 80017a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 031f 	and.w	r3, r3, #31
 80017e6:	2201      	movs	r2, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	401a      	ands	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d123      	bne.n	8001850 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800182a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3248      	adds	r2, #72	; 0x48
 8001830:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001844:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001846:	6979      	ldr	r1, [r7, #20]
 8001848:	3348      	adds	r3, #72	; 0x48
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d122      	bne.n	800189e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001878:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3248      	adds	r2, #72	; 0x48
 800187e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001892:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001894:	6979      	ldr	r1, [r7, #20]
 8001896:	3348      	adds	r3, #72	; 0x48
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018b8:	e007      	b.n	80018ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	401a      	ands	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018e4:	e007      	b.n	80018f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001914:	f023 0201 	bic.w	r2, r3, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e006      	b.n	8001930 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40006400 	.word	0x40006400

08001940 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d12e      	bne.n	80019b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff fddc 	bl	8001528 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001972:	e012      	b.n	800199a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001974:	f7ff fdd8 	bl	8001528 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b0a      	cmp	r3, #10
 8001980:	d90b      	bls.n	800199a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2205      	movs	r2, #5
 8001992:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e012      	b.n	80019c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e5      	bne.n	8001974 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e006      	b.n	80019c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_AddTxMessage+0x2c>
 80019ec:	7ffb      	ldrb	r3, [r7, #31]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	f040 80ad 	bne.w	8001b4e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10a      	bne.n	8001a14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8095 	beq.w	8001b3e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	0e1b      	lsrs	r3, r3, #24
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10d      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6809      	ldr	r1, [r1, #0]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3318      	adds	r3, #24
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	440b      	add	r3, r1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e00f      	b.n	8001a6c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a56:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a60:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3318      	adds	r3, #24
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	440b      	add	r3, r1
 8001a6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3318      	adds	r3, #24
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	7d1b      	ldrb	r3, [r3, #20]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d111      	bne.n	8001aac <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3318      	adds	r3, #24
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	4413      	add	r3, r2
 8001a94:	3304      	adds	r3, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6811      	ldr	r1, [r2, #0]
 8001a9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3307      	adds	r3, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	061a      	lsls	r2, r3, #24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3306      	adds	r3, #6
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3305      	adds	r3, #5
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	3204      	adds	r2, #4
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	4610      	mov	r0, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	6811      	ldr	r1, [r2, #0]
 8001ad4:	ea43 0200 	orr.w	r2, r3, r0
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ae2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3303      	adds	r3, #3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	061a      	lsls	r2, r3, #24
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3302      	adds	r3, #2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	4313      	orrs	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	4610      	mov	r0, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	ea43 0200 	orr.w	r2, r3, r0
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4413      	add	r3, r2
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	6811      	ldr	r1, [r2, #0]
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3318      	adds	r3, #24
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	440b      	add	r3, r1
 8001b38:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e00e      	b.n	8001b5c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e006      	b.n	8001b5c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d002      	beq.n	8001b8a <HAL_CAN_IsTxMessagePending+0x22>
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	401a      	ands	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	069b      	lsls	r3, r3, #26
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d003      	beq.n	8001bd4 <HAL_CAN_GetRxMessage+0x24>
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	f040 8103 	bne.w	8001dda <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d116      	bne.n	8001c16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0f7      	b.n	8001de8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0e8      	b.n	8001de8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	331b      	adds	r3, #27
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0204 	and.w	r2, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	331b      	adds	r3, #27
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0d5b      	lsrs	r3, r3, #21
 8001c44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e00b      	b.n	8001c66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	331b      	adds	r3, #27
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	331b      	adds	r3, #27
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4413      	add	r3, r2
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0202 	and.w	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	331b      	adds	r3, #27
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2208      	movs	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	331b      	adds	r3, #27
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 020f 	and.w	r2, r3, #15
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	331b      	adds	r3, #27
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	331b      	adds	r3, #27
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0a1a      	lsrs	r2, r3, #8
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0c1a      	lsrs	r2, r3, #16
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e1a      	lsrs	r2, r3, #24
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3303      	adds	r3, #3
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0a1a      	lsrs	r2, r3, #8
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3305      	adds	r3, #5
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0c1a      	lsrs	r2, r3, #16
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3306      	adds	r3, #6
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e1a      	lsrs	r2, r3, #24
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3307      	adds	r3, #7
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0220 	orr.w	r2, r2, #32
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	e007      	b.n	8001dd6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e006      	b.n	8001de8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
  }
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d002      	beq.n	8001e12 <HAL_CAN_ActivateNotification+0x1e>
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d109      	bne.n	8001e26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6959      	ldr	r1, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e006      	b.n	8001e34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d07c      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d023      	beq.n	8001ed8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f983 	bl	80021ae <HAL_CAN_TxMailbox0CompleteCallback>
 8001ea8:	e016      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	e00c      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e002      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f989 	bl	80021ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d024      	beq.n	8001f2c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f963 	bl	80021c2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001efc:	e016      	b.n	8001f2c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e00c      	b.n	8001f2c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e002      	b.n	8001f2c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f969 	bl	80021fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d024      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f943 	bl	80021d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f50:	e016      	b.n	8001f80 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d004      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e00c      	b.n	8001f80 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e002      	b.n	8001f80 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f949 	bl	8002212 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f930 	bl	8002226 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fac4 	bl	800056c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2208      	movs	r2, #8
 8002022:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f912 	bl	800224e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8f9 	bl	800223a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8fc 	bl	8002262 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2208      	movs	r2, #8
 8002084:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8f5 	bl	8002276 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d07b      	beq.n	800218e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d072      	beq.n	8002186 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d008      	beq.n	80020bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d043      	beq.n	8002186 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d03e      	beq.n	8002186 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210e:	2b60      	cmp	r3, #96	; 0x60
 8002110:	d02b      	beq.n	800216a <HAL_CAN_IRQHandler+0x32a>
 8002112:	2b60      	cmp	r3, #96	; 0x60
 8002114:	d82e      	bhi.n	8002174 <HAL_CAN_IRQHandler+0x334>
 8002116:	2b50      	cmp	r3, #80	; 0x50
 8002118:	d022      	beq.n	8002160 <HAL_CAN_IRQHandler+0x320>
 800211a:	2b50      	cmp	r3, #80	; 0x50
 800211c:	d82a      	bhi.n	8002174 <HAL_CAN_IRQHandler+0x334>
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d019      	beq.n	8002156 <HAL_CAN_IRQHandler+0x316>
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d826      	bhi.n	8002174 <HAL_CAN_IRQHandler+0x334>
 8002126:	2b30      	cmp	r3, #48	; 0x30
 8002128:	d010      	beq.n	800214c <HAL_CAN_IRQHandler+0x30c>
 800212a:	2b30      	cmp	r3, #48	; 0x30
 800212c:	d822      	bhi.n	8002174 <HAL_CAN_IRQHandler+0x334>
 800212e:	2b10      	cmp	r3, #16
 8002130:	d002      	beq.n	8002138 <HAL_CAN_IRQHandler+0x2f8>
 8002132:	2b20      	cmp	r3, #32
 8002134:	d005      	beq.n	8002142 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002136:	e01d      	b.n	8002174 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002140:	e019      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214a:	e014      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002154:	e00f      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215e:	e00a      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002168:	e005      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002172:	e000      	b.n	8002176 <HAL_CAN_IRQHandler+0x336>
            break;
 8002174:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002184:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2204      	movs	r2, #4
 800218c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f872 	bl	800228a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	db0b      	blt.n	800232e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <__NVIC_EnableIRQ+0x38>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2001      	movs	r0, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
         );
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff8e 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff29 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff3e 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff8e 	bl	8002394 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5d 	bl	8002340 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff31 	bl	8002304 <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff f82a 	bl	8001528 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d008      	beq.n	80024f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e052      	b.n	800259a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0216 	bic.w	r2, r2, #22
 8002502:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002512:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <HAL_DMA_Abort+0x62>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0208 	bic.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002544:	e013      	b.n	800256e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002546:	f7fe ffef 	bl	8001528 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b05      	cmp	r3, #5
 8002552:	d90c      	bls.n	800256e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e015      	b.n	800259a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e4      	bne.n	8002546 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d004      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e00c      	b.n	80025da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2205      	movs	r2, #5
 80025c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e16b      	b.n	80028dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 815a 	bne.w	80028d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d005      	beq.n	800263a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	2b02      	cmp	r3, #2
 8002638:	d130      	bne.n	800269c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 0201 	and.w	r2, r3, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d017      	beq.n	80026d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d123      	bne.n	800272c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	220f      	movs	r2, #15
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3208      	adds	r2, #8
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80b4 	beq.w	80028d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a5f      	ldr	r2, [pc, #380]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b5d      	ldr	r3, [pc, #372]	; (80028f4 <HAL_GPIO_Init+0x30c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <HAL_GPIO_Init+0x310>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x314>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02b      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_GPIO_Init+0x318>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a50      	ldr	r2, [pc, #320]	; (8002904 <HAL_GPIO_Init+0x31c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x320>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x21a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	; (800290c <HAL_GPIO_Init+0x324>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x216>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_GPIO_Init+0x328>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x212>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x32c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x20e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <HAL_GPIO_Init+0x330>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x20a>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e00e      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027f2:	2308      	movs	r3, #8
 80027f4:	e00c      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027f6:	2306      	movs	r3, #6
 80027f8:	e00a      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027fa:	2305      	movs	r3, #5
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x228>
 80027fe:	2304      	movs	r3, #4
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x228>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x228>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x228>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x228>
 800280e:	2300      	movs	r3, #0
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	f002 0203 	and.w	r2, r2, #3
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002820:	4935      	ldr	r1, [pc, #212]	; (80028f8 <HAL_GPIO_Init+0x310>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_GPIO_Init+0x334>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002852:	4a32      	ldr	r2, [pc, #200]	; (800291c <HAL_GPIO_Init+0x334>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_GPIO_Init+0x334>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_GPIO_Init+0x334>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_GPIO_Init+0x334>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_GPIO_Init+0x334>)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_GPIO_Init+0x334>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <HAL_GPIO_Init+0x334>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	f67f ae90 	bls.w	8002604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3724      	adds	r7, #36	; 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40020000 	.word	0x40020000
 8002900:	40020400 	.word	0x40020400
 8002904:	40020800 	.word	0x40020800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40021000 	.word	0x40021000
 8002910:	40021400 	.word	0x40021400
 8002914:	40021800 	.word	0x40021800
 8002918:	40021c00 	.word	0x40021c00
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	041a      	lsls	r2, r3, #16
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43d9      	mvns	r1, r3
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	400b      	ands	r3, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f9f0 	bl	8000dbc <HAL_GPIO_EXTI_Callback>
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40013c00 	.word	0x40013c00

080029e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e267      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d075      	beq.n	8002af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b85      	ldr	r3, [pc, #532]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d112      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b7e      	ldr	r3, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x108>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d157      	bne.n	8002af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e242      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x74>
 8002a4e:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a75      	ldr	r2, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x98>
 8002a66:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6f      	ldr	r2, [pc, #444]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6c      	ldr	r2, [pc, #432]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xb0>
 8002a80:	4b69      	ldr	r3, [pc, #420]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a68      	ldr	r2, [pc, #416]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fd42 	bl	8001528 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fd3e 	bl	8001528 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e207      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xc0>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fd2e 	bl	8001528 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fd2a 	bl	8001528 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1f3      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xe8>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c7      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4937      	ldr	r1, [pc, #220]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	e03a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b58:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x244>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fce3 	bl	8001528 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b66:	f7fe fcdf 	bl	8001528 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1a8      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4925      	ldr	r1, [pc, #148]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e015      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x244>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fcc2 	bl	8001528 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fcbe 	bl	8001528 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e187      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d036      	beq.n	8002c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_RCC_OscConfig+0x248>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe fca2 	bl	8001528 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fe fc9e 	bl	8001528 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e167      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x200>
 8002c06:	e01b      	b.n	8002c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x248>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fc8b 	bl	8001528 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	e00e      	b.n	8002c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe fc87 	bl	8001528 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d907      	bls.n	8002c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e150      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	42470000 	.word	0x42470000
 8002c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ea      	bne.n	8002c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8097 	beq.w	8002d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b7d      	ldr	r3, [pc, #500]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a7c      	ldr	r2, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b7a      	ldr	r3, [pc, #488]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b74      	ldr	r3, [pc, #464]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a73      	ldr	r2, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe fc47 	bl	8001528 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe fc43 	bl	8001528 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e10c      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x474>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2ea>
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	e01c      	b.n	8002d0c <HAL_RCC_OscConfig+0x324>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x30c>
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x324>
 8002cf4:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0304 	bic.w	r3, r3, #4
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe fc08 	bl	8001528 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fc04 	bl	8001528 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0cb      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ee      	beq.n	8002d1c <HAL_RCC_OscConfig+0x334>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fbf2 	bl	8001528 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fbee 	bl	8001528 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0b5      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a1 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d05c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d141      	bne.n	8002e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fbc2 	bl	8001528 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fbbe 	bl	8001528 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e087      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	3b01      	subs	r3, #1
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fb97 	bl	8001528 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fb93 	bl	8001528 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e05c      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x416>
 8002e1c:	e054      	b.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x478>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fb80 	bl	8001528 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fb7c 	bl	8001528 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e045      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x470>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x444>
 8002e4a:	e03d      	b.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e038      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4ec>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d121      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d11a      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cc      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b68      	ldr	r3, [pc, #416]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d90c      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d044      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e067      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4934      	ldr	r1, [pc, #208]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe faae 	bl	8001528 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe faaa 	bl	8001528 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d20c      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fa0e 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00
 8003094:	40023800 	.word	0x40023800
 8003098:	08005fc0 	.word	0x08005fc0
 800309c:	20000054 	.word	0x20000054
 80030a0:	20000058 	.word	0x20000058

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a8:	b090      	sub	sp, #64	; 0x40
 80030aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	2300      	movs	r3, #0
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d00d      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	f200 80a1 	bhi.w	8003210 <HAL_RCC_GetSysClockFreq+0x16c>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x34>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x3a>
 80030d6:	e09b      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_GetSysClockFreq+0x184>)
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030dc:	e09b      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_GetSysClockFreq+0x188>)
 80030e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030e2:	e098      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ee:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d028      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fa:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	2200      	movs	r2, #0
 8003102:	623b      	str	r3, [r7, #32]
 8003104:	627a      	str	r2, [r7, #36]	; 0x24
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800310c:	2100      	movs	r1, #0
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_GetSysClockFreq+0x188>)
 8003110:	fb03 f201 	mul.w	r2, r3, r1
 8003114:	2300      	movs	r3, #0
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	4413      	add	r3, r2
 800311c:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_RCC_GetSysClockFreq+0x188>)
 800311e:	fba0 1202 	umull	r1, r2, r0, r2
 8003122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003124:	460a      	mov	r2, r1
 8003126:	62ba      	str	r2, [r7, #40]	; 0x28
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	4413      	add	r3, r2
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	2200      	movs	r2, #0
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	61fa      	str	r2, [r7, #28]
 8003136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800313e:	f7fd f897 	bl	8000270 <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4613      	mov	r3, r2
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314a:	e053      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	2200      	movs	r2, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	617a      	str	r2, [r7, #20]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800315e:	f04f 0b00 	mov.w	fp, #0
 8003162:	4652      	mov	r2, sl
 8003164:	465b      	mov	r3, fp
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	ebb2 080a 	subs.w	r8, r2, sl
 800317e:	eb63 090b 	sbc.w	r9, r3, fp
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800318e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003196:	ebb2 0408 	subs.w	r4, r2, r8
 800319a:	eb63 0509 	sbc.w	r5, r3, r9
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	00eb      	lsls	r3, r5, #3
 80031a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ac:	00e2      	lsls	r2, r4, #3
 80031ae:	4614      	mov	r4, r2
 80031b0:	461d      	mov	r5, r3
 80031b2:	eb14 030a 	adds.w	r3, r4, sl
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	eb45 030b 	adc.w	r3, r5, fp
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ca:	4629      	mov	r1, r5
 80031cc:	028b      	lsls	r3, r1, #10
 80031ce:	4621      	mov	r1, r4
 80031d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d4:	4621      	mov	r1, r4
 80031d6:	028a      	lsls	r2, r1, #10
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	2200      	movs	r2, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e8:	f7fd f842 	bl	8000270 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetSysClockFreq+0x184>)
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003218:	4618      	mov	r0, r3
 800321a:	3740      	adds	r7, #64	; 0x40
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	00f42400 	.word	0x00f42400
 800322c:	017d7840 	.word	0x017d7840

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_RCC_GetHCLKFreq+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000054 	.word	0x20000054

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800324c:	f7ff fff0 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	; (800326c <HAL_RCC_GetPCLK1Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	08005fd0 	.word	0x08005fd0

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003274:	f7ff ffdc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0b5b      	lsrs	r3, r3, #13
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	08005fd0 	.word	0x08005fd0

08003298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e041      	b.n	800332e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd ff1a 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 fc62 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d001      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e04e      	b.n	80033ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_TIM_Base_Start_IT+0xc4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d022      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d01d      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_TIM_Base_Start_IT+0xc8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_TIM_Base_Start_IT+0xcc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_TIM_Base_Start_IT+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_TIM_Base_Start_IT+0xd4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_TIM_Base_Start_IT+0xd8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_TIM_Base_Start_IT+0xdc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d010      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	e007      	b.n	80033ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40001800 	.word	0x40001800

08003418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f839 	bl	80034b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 fba2 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x24>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e022      	b.n	8003536 <HAL_TIM_PWM_Start+0x6a>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d109      	bne.n	800350a <HAL_TIM_PWM_Start+0x3e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e015      	b.n	8003536 <HAL_TIM_PWM_Start+0x6a>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d109      	bne.n	8003524 <HAL_TIM_PWM_Start+0x58>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e008      	b.n	8003536 <HAL_TIM_PWM_Start+0x6a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07c      	b.n	8003638 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <HAL_TIM_PWM_Start+0x82>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	e013      	b.n	8003576 <HAL_TIM_PWM_Start+0xaa>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start+0x92>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800355c:	e00b      	b.n	8003576 <HAL_TIM_PWM_Start+0xaa>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0xa2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800356c:	e003      	b.n	8003576 <HAL_TIM_PWM_Start+0xaa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2201      	movs	r2, #1
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fe04 	bl	800418c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <HAL_TIM_PWM_Start+0x174>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_PWM_Start+0xcc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <HAL_TIM_PWM_Start+0x178>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_TIM_PWM_Start+0xd0>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_TIM_PWM_Start+0xd2>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a22      	ldr	r2, [pc, #136]	; (8003640 <HAL_TIM_PWM_Start+0x174>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d01d      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_TIM_PWM_Start+0x17c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d018      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_PWM_Start+0x180>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_TIM_PWM_Start+0x184>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_TIM_PWM_Start+0x178>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_TIM_PWM_Start+0x188>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_PWM_Start+0x136>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a16      	ldr	r2, [pc, #88]	; (8003658 <HAL_TIM_PWM_Start+0x18c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d010      	beq.n	8003636 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	e007      	b.n	8003636 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40010000 	.word	0x40010000
 8003644:	40010400 	.word	0x40010400
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40014000 	.word	0x40014000
 8003658:	40001800 	.word	0x40001800

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa5b 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa4d 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa5e 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa35 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa27 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa38 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa0f 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa01 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa12 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9e9 	bl	8003b62 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9db 	bl	8003b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f9ec 	bl	8003b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fb7e 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00c      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fe88 	bl	80044fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9bd 	bl	8003b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0220 	mvn.w	r2, #32
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fe5a 	bl	80044e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003856:	2302      	movs	r3, #2
 8003858:	e0ae      	b.n	80039b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	f200 809f 	bhi.w	80039a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080039a9 	.word	0x080039a9
 8003878:	080039a9 	.word	0x080039a9
 800387c:	080039a9 	.word	0x080039a9
 8003880:	080038e5 	.word	0x080038e5
 8003884:	080039a9 	.word	0x080039a9
 8003888:	080039a9 	.word	0x080039a9
 800388c:	080039a9 	.word	0x080039a9
 8003890:	08003927 	.word	0x08003927
 8003894:	080039a9 	.word	0x080039a9
 8003898:	080039a9 	.word	0x080039a9
 800389c:	080039a9 	.word	0x080039a9
 80038a0:	08003967 	.word	0x08003967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa24 	bl	8003cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	619a      	str	r2, [r3, #24]
      break;
 80038e2:	e064      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fa74 	bl	8003dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]
      break;
 8003924:	e043      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fac9 	bl	8003ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0204 	bic.w	r2, r2, #4
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
      break;
 8003964:	e023      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fb1d 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	61da      	str	r2, [r3, #28]
      break;
 80039a6:	e002      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	75fb      	strb	r3, [r7, #23]
      break;
 80039ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_ConfigClockSource+0x1c>
 80039d8:	2302      	movs	r3, #2
 80039da:	e0b4      	b.n	8003b46 <HAL_TIM_ConfigClockSource+0x186>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a14:	d03e      	beq.n	8003a94 <HAL_TIM_ConfigClockSource+0xd4>
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1a:	f200 8087 	bhi.w	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	f000 8086 	beq.w	8003b32 <HAL_TIM_ConfigClockSource+0x172>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d87f      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b70      	cmp	r3, #112	; 0x70
 8003a2e:	d01a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0xa6>
 8003a30:	2b70      	cmp	r3, #112	; 0x70
 8003a32:	d87b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b60      	cmp	r3, #96	; 0x60
 8003a36:	d050      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x11a>
 8003a38:	2b60      	cmp	r3, #96	; 0x60
 8003a3a:	d877      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d03c      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0xfa>
 8003a40:	2b50      	cmp	r3, #80	; 0x50
 8003a42:	d873      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d058      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x13a>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d86f      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b30      	cmp	r3, #48	; 0x30
 8003a4e:	d064      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b30      	cmp	r3, #48	; 0x30
 8003a52:	d86b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d060      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d867      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05c      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15a>
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d05a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	e062      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	f000 fb69 	bl	800414c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	609a      	str	r2, [r3, #8]
      break;
 8003a92:	e04f      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	f000 fb52 	bl	800414c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab6:	609a      	str	r2, [r3, #8]
      break;
 8003ab8:	e03c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f000 fac6 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2150      	movs	r1, #80	; 0x50
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fb1f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e02c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fae5 	bl	80040b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2160      	movs	r1, #96	; 0x60
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb0f 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e01c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 faa6 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2140      	movs	r1, #64	; 0x40
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 faff 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e00c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f000 faf6 	bl	8004116 <TIM_ITRx_SetConfig>
      break;
 8003b2a:	e003      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e000      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a46      	ldr	r2, [pc, #280]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d00f      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a43      	ldr	r2, [pc, #268]	; (8003cd0 <TIM_Base_SetConfig+0x130>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <TIM_Base_SetConfig+0x134>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <TIM_Base_SetConfig+0x138>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d027      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a32      	ldr	r2, [pc, #200]	; (8003cd0 <TIM_Base_SetConfig+0x130>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d023      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <TIM_Base_SetConfig+0x134>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <TIM_Base_SetConfig+0x138>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <TIM_Base_SetConfig+0x140>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <TIM_Base_SetConfig+0x144>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <TIM_Base_SetConfig+0x148>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <TIM_Base_SetConfig+0x14c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <TIM_Base_SetConfig+0x150>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <TIM_Base_SetConfig+0x154>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0xf8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800
 8003cec:	40001800 	.word	0x40001800
 8003cf0:	40001c00 	.word	0x40001c00
 8003cf4:	40002000 	.word	0x40002000

08003cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f023 0201 	bic.w	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 0302 	bic.w	r3, r3, #2
 8003d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_OC1_SetConfig+0xd8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_OC1_SetConfig+0x64>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <TIM_OC1_SetConfig+0xdc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <TIM_OC1_SetConfig+0xd8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC1_SetConfig+0x8e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <TIM_OC1_SetConfig+0xdc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 0210 	bic.w	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <TIM_OC2_SetConfig+0xe4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_OC2_SetConfig+0x68>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <TIM_OC2_SetConfig+0xe8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10d      	bne.n	8003e5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <TIM_OC2_SetConfig+0xe4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC2_SetConfig+0x94>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a16      	ldr	r2, [pc, #88]	; (8003ec0 <TIM_OC2_SetConfig+0xe8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d113      	bne.n	8003e94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <TIM_OC3_SetConfig+0xe0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0x66>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10d      	bne.n	8003f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC3_SetConfig+0xe0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <TIM_OC3_SetConfig+0x92>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <TIM_OC3_SetConfig+0xe4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d113      	bne.n	8003f7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40010400 	.word	0x40010400

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <TIM_OC4_SetConfig+0xa4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_OC4_SetConfig+0x68>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a11      	ldr	r2, [pc, #68]	; (8004054 <TIM_OC4_SetConfig+0xa8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d109      	bne.n	8004028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	f043 0307 	orr.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	431a      	orrs	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2201      	movs	r2, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1a      	ldr	r2, [r3, #32]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	401a      	ands	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_TIMEx_PWMN_Start+0x24>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e022      	b.n	8004242 <HAL_TIMEx_PWMN_Start+0x6a>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d109      	bne.n	8004216 <HAL_TIMEx_PWMN_Start+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e015      	b.n	8004242 <HAL_TIMEx_PWMN_Start+0x6a>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d109      	bne.n	8004230 <HAL_TIMEx_PWMN_Start+0x58>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e008      	b.n	8004242 <HAL_TIMEx_PWMN_Start+0x6a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06d      	b.n	8004326 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_TIMEx_PWMN_Start+0x82>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	e013      	b.n	8004282 <HAL_TIMEx_PWMN_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_TIMEx_PWMN_Start+0x92>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004268:	e00b      	b.n	8004282 <HAL_TIMEx_PWMN_Start+0xaa>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d104      	bne.n	800427a <HAL_TIMEx_PWMN_Start+0xa2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004278:	e003      	b.n	8004282 <HAL_TIMEx_PWMN_Start+0xaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2204      	movs	r2, #4
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f940 	bl	8004510 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <HAL_TIMEx_PWMN_Start+0x158>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d01d      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_TIMEx_PWMN_Start+0x15c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_TIMEx_PWMN_Start+0x160>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_TIMEx_PWMN_Start+0x164>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_TIMEx_PWMN_Start+0x168>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_TIMEx_PWMN_Start+0x16c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x118>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a17      	ldr	r2, [pc, #92]	; (8004348 <HAL_TIMEx_PWMN_Start+0x170>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d010      	beq.n	8004324 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e007      	b.n	8004324 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40010400 	.word	0x40010400
 8004344:	40014000 	.word	0x40014000
 8004348:	40001800 	.word	0x40001800

0800434c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e05a      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d022      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b0:	d01d      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40014000 	.word	0x40014000
 8004440:	40001800 	.word	0x40001800

08004444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800445c:	2302      	movs	r3, #2
 800445e:	e03d      	b.n	80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	2204      	movs	r2, #4
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	431a      	orrs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e042      	b.n	80045f2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fe4f 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fdbe 	bl	8005120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08a      	sub	sp, #40	; 0x28
 80045fe:	af02      	add	r7, sp, #8
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	d175      	bne.n	8004706 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_UART_Transmit+0x2c>
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06e      	b.n	8004708 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2221      	movs	r2, #33	; 0x21
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004638:	f7fc ff76 	bl	8001528 <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d108      	bne.n	8004666 <HAL_UART_Transmit+0x6c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e003      	b.n	800466e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800466e:	e02e      	b.n	80046ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fb20 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e03a      	b.n	8004708 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	3302      	adds	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e007      	b.n	80046c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3301      	adds	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1cb      	bne.n	8004670 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	2140      	movs	r1, #64	; 0x40
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 faec 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e006      	b.n	8004708 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	d112      	bne.n	8004750 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_UART_Receive_IT+0x26>
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e00b      	b.n	8004752 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	461a      	mov	r2, r3
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb13 	bl	8004d72 <UART_Start_Receive_IT>
 800474c:	4603      	mov	r3, r0
 800474e:	e000      	b.n	8004752 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b0ba      	sub	sp, #232	; 0xe8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800479a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10f      	bne.n	80047c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fbf2 	bl	8004fa4 <UART_Receive_IT>
      return;
 80047c0:	e25b      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80de 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80d1 	beq.w	8004988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800482e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
 800483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f043 0208 	orr.w	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 81f2 	beq.w	8004c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb7d 	bl	8004fa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	bf0c      	ite	eq
 80048b8:	2301      	moveq	r3, #1
 80048ba:	2300      	movne	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_UART_IRQHandler+0x17a>
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa85 	bl	8004de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d141      	bne.n	800496e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800491a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800492e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1d9      	bne.n	80048ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	4a7e      	ldr	r2, [pc, #504]	; (8004b3c <HAL_UART_IRQHandler+0x3e0>)
 8004944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd fe29 	bl	80025a2 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e00e      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f994 	bl	8004c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00a      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f990 	bl	8004c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e006      	b.n	8004984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f98c 	bl	8004c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004982:	e175      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	bf00      	nop
    return;
 8004986:	e173      	b.n	8004c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 814f 	bne.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8148 	beq.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8141 	beq.w	8004c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	f040 80b6 	bne.w	8004b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8145 	beq.w	8004c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049f2:	429a      	cmp	r2, r3
 80049f4:	f080 813e 	bcs.w	8004c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0a:	f000 8088 	beq.w	8004b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1d9      	bne.n	8004a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e1      	bne.n	8004a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e3      	bne.n	8004a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e3      	bne.n	8004adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fd fcd2 	bl	80024c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8b7 	bl	8004ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b3a:	e09b      	b.n	8004c74 <HAL_UART_IRQHandler+0x518>
 8004b3c:	08004ead 	.word	0x08004ead
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 808e 	beq.w	8004c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8089 	beq.w	8004c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	623b      	str	r3, [r7, #32]
   return(result);
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0310 	bic.w	r3, r3, #16
 8004bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f83d 	bl	8004ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c2e:	e023      	b.n	8004c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_UART_IRQHandler+0x4f4>
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f943 	bl	8004ed4 <UART_Transmit_IT>
    return;
 8004c4e:	e014      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <HAL_UART_IRQHandler+0x51e>
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f983 	bl	8004f74 <UART_EndTransmit_IT>
    return;
 8004c6e:	e004      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c78:	bf00      	nop
  }
}
 8004c7a:	37e8      	adds	r7, #232	; 0xe8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	e03b      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d037      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fc fc25 	bl	8001528 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03a      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d023      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d020      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d01d      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d116      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f857 	bl	8004de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e00f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d0b4      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2222      	movs	r2, #34	; 0x22
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0220 	orr.w	r2, r2, #32
 8004dd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b095      	sub	sp, #84	; 0x54
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d119      	bne.n	8004e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0310 	bic.w	r3, r3, #16
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7e:	61ba      	str	r2, [r7, #24]
 8004e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ea0:	bf00      	nop
 8004ea2:	3754      	adds	r7, #84	; 0x54
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fee4 	bl	8004c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b21      	cmp	r3, #33	; 0x21
 8004ee6:	d13e      	bne.n	8004f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef0:	d114      	bne.n	8004f1c <UART_Transmit_IT+0x48>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d110      	bne.n	8004f1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	1c9a      	adds	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]
 8004f1a:	e008      	b.n	8004f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	1c59      	adds	r1, r3, #1
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6211      	str	r1, [r2, #32]
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fe73 	bl	8004c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
 8004fb6:	f040 80ae 	bne.w	8005116 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d117      	bne.n	8004ff4 <UART_Receive_IT+0x50>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d113      	bne.n	8004ff4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff2:	e026      	b.n	8005042 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d007      	beq.n	8005018 <UART_Receive_IT+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <UART_Receive_IT+0x82>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e008      	b.n	8005038 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005032:	b2da      	uxtb	r2, r3
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005052:	2b00      	cmp	r3, #0
 8005054:	d15d      	bne.n	8005112 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0220 	bic.w	r2, r2, #32
 8005064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005074:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b01      	cmp	r3, #1
 800509a:	d135      	bne.n	8005108 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0310 	bic.w	r3, r3, #16
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c2:	623a      	str	r2, [r7, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d10a      	bne.n	80050fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fdd1 	bl	8004ca8 <HAL_UARTEx_RxEventCallback>
 8005106:	e002      	b.n	800510e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fb fe3d 	bl	8000d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e002      	b.n	8005118 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3730      	adds	r7, #48	; 0x30
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005124:	b0c0      	sub	sp, #256	; 0x100
 8005126:	af00      	add	r7, sp, #0
 8005128:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	68d9      	ldr	r1, [r3, #12]
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	ea40 0301 	orr.w	r3, r0, r1
 8005148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	431a      	orrs	r2, r3
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	431a      	orrs	r2, r3
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005178:	f021 010c 	bic.w	r1, r1, #12
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005186:	430b      	orrs	r3, r1
 8005188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	6999      	ldr	r1, [r3, #24]
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	ea40 0301 	orr.w	r3, r0, r1
 80051a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b8f      	ldr	r3, [pc, #572]	; (80053ec <UART_SetConfig+0x2cc>)
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d005      	beq.n	80051c0 <UART_SetConfig+0xa0>
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b8d      	ldr	r3, [pc, #564]	; (80053f0 <UART_SetConfig+0x2d0>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d104      	bne.n	80051ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fe f856 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 80051c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051c8:	e003      	b.n	80051d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ca:	f7fe f83d 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 80051ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051dc:	f040 810c 	bne.w	80053f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	1891      	adds	r1, r2, r2
 80051f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051fa:	415b      	adcs	r3, r3
 80051fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005202:	4621      	mov	r1, r4
 8005204:	eb12 0801 	adds.w	r8, r2, r1
 8005208:	4629      	mov	r1, r5
 800520a:	eb43 0901 	adc.w	r9, r3, r1
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800521a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800521e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005222:	4690      	mov	r8, r2
 8005224:	4699      	mov	r9, r3
 8005226:	4623      	mov	r3, r4
 8005228:	eb18 0303 	adds.w	r3, r8, r3
 800522c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005230:	462b      	mov	r3, r5
 8005232:	eb49 0303 	adc.w	r3, r9, r3
 8005236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005246:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800524a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800524e:	460b      	mov	r3, r1
 8005250:	18db      	adds	r3, r3, r3
 8005252:	653b      	str	r3, [r7, #80]	; 0x50
 8005254:	4613      	mov	r3, r2
 8005256:	eb42 0303 	adc.w	r3, r2, r3
 800525a:	657b      	str	r3, [r7, #84]	; 0x54
 800525c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005264:	f7fb f804 	bl	8000270 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4b61      	ldr	r3, [pc, #388]	; (80053f4 <UART_SetConfig+0x2d4>)
 800526e:	fba3 2302 	umull	r2, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	011c      	lsls	r4, r3, #4
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005280:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	1891      	adds	r1, r2, r2
 800528e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005290:	415b      	adcs	r3, r3
 8005292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005298:	4641      	mov	r1, r8
 800529a:	eb12 0a01 	adds.w	sl, r2, r1
 800529e:	4649      	mov	r1, r9
 80052a0:	eb43 0b01 	adc.w	fp, r3, r1
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b8:	4692      	mov	sl, r2
 80052ba:	469b      	mov	fp, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	eb1a 0303 	adds.w	r3, sl, r3
 80052c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052c6:	464b      	mov	r3, r9
 80052c8:	eb4b 0303 	adc.w	r3, fp, r3
 80052cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052e4:	460b      	mov	r3, r1
 80052e6:	18db      	adds	r3, r3, r3
 80052e8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ea:	4613      	mov	r3, r2
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
 80052f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052fa:	f7fa ffb9 	bl	8000270 <__aeabi_uldivmod>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4611      	mov	r1, r2
 8005304:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <UART_SetConfig+0x2d4>)
 8005306:	fba3 2301 	umull	r2, r3, r3, r1
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2264      	movs	r2, #100	; 0x64
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	1acb      	subs	r3, r1, r3
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800531a:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <UART_SetConfig+0x2d4>)
 800531c:	fba3 2302 	umull	r2, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005328:	441c      	add	r4, r3
 800532a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005334:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	1891      	adds	r1, r2, r2
 8005342:	63b9      	str	r1, [r7, #56]	; 0x38
 8005344:	415b      	adcs	r3, r3
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800534c:	4641      	mov	r1, r8
 800534e:	1851      	adds	r1, r2, r1
 8005350:	6339      	str	r1, [r7, #48]	; 0x30
 8005352:	4649      	mov	r1, r9
 8005354:	414b      	adcs	r3, r1
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005364:	4659      	mov	r1, fp
 8005366:	00cb      	lsls	r3, r1, #3
 8005368:	4651      	mov	r1, sl
 800536a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536e:	4651      	mov	r1, sl
 8005370:	00ca      	lsls	r2, r1, #3
 8005372:	4610      	mov	r0, r2
 8005374:	4619      	mov	r1, r3
 8005376:	4603      	mov	r3, r0
 8005378:	4642      	mov	r2, r8
 800537a:	189b      	adds	r3, r3, r2
 800537c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005380:	464b      	mov	r3, r9
 8005382:	460a      	mov	r2, r1
 8005384:	eb42 0303 	adc.w	r3, r2, r3
 8005388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005398:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800539c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053b6:	f7fa ff5b 	bl	8000270 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <UART_SetConfig+0x2d4>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <UART_SetConfig+0x2d4>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f003 0207 	and.w	r2, r3, #7
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4422      	add	r2, r4
 80053e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e8:	e106      	b.n	80055f8 <UART_SetConfig+0x4d8>
 80053ea:	bf00      	nop
 80053ec:	40011000 	.word	0x40011000
 80053f0:	40011400 	.word	0x40011400
 80053f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005402:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800540a:	4642      	mov	r2, r8
 800540c:	464b      	mov	r3, r9
 800540e:	1891      	adds	r1, r2, r2
 8005410:	6239      	str	r1, [r7, #32]
 8005412:	415b      	adcs	r3, r3
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800541a:	4641      	mov	r1, r8
 800541c:	1854      	adds	r4, r2, r1
 800541e:	4649      	mov	r1, r9
 8005420:	eb43 0501 	adc.w	r5, r3, r1
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	00eb      	lsls	r3, r5, #3
 800542e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005432:	00e2      	lsls	r2, r4, #3
 8005434:	4614      	mov	r4, r2
 8005436:	461d      	mov	r5, r3
 8005438:	4643      	mov	r3, r8
 800543a:	18e3      	adds	r3, r4, r3
 800543c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005440:	464b      	mov	r3, r9
 8005442:	eb45 0303 	adc.w	r3, r5, r3
 8005446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005466:	4629      	mov	r1, r5
 8005468:	008b      	lsls	r3, r1, #2
 800546a:	4621      	mov	r1, r4
 800546c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005470:	4621      	mov	r1, r4
 8005472:	008a      	lsls	r2, r1, #2
 8005474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005478:	f7fa fefa 	bl	8000270 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4b60      	ldr	r3, [pc, #384]	; (8005604 <UART_SetConfig+0x4e4>)
 8005482:	fba3 2302 	umull	r2, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	011c      	lsls	r4, r3, #4
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005494:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	1891      	adds	r1, r2, r2
 80054a2:	61b9      	str	r1, [r7, #24]
 80054a4:	415b      	adcs	r3, r3
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054ac:	4641      	mov	r1, r8
 80054ae:	1851      	adds	r1, r2, r1
 80054b0:	6139      	str	r1, [r7, #16]
 80054b2:	4649      	mov	r1, r9
 80054b4:	414b      	adcs	r3, r1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c4:	4659      	mov	r1, fp
 80054c6:	00cb      	lsls	r3, r1, #3
 80054c8:	4651      	mov	r1, sl
 80054ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ce:	4651      	mov	r1, sl
 80054d0:	00ca      	lsls	r2, r1, #3
 80054d2:	4610      	mov	r0, r2
 80054d4:	4619      	mov	r1, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	4642      	mov	r2, r8
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054e0:	464b      	mov	r3, r9
 80054e2:	460a      	mov	r2, r1
 80054e4:	eb42 0303 	adc.w	r3, r2, r3
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005504:	4649      	mov	r1, r9
 8005506:	008b      	lsls	r3, r1, #2
 8005508:	4641      	mov	r1, r8
 800550a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550e:	4641      	mov	r1, r8
 8005510:	008a      	lsls	r2, r1, #2
 8005512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005516:	f7fa feab 	bl	8000270 <__aeabi_uldivmod>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4611      	mov	r1, r2
 8005520:	4b38      	ldr	r3, [pc, #224]	; (8005604 <UART_SetConfig+0x4e4>)
 8005522:	fba3 2301 	umull	r2, r3, r3, r1
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2264      	movs	r2, #100	; 0x64
 800552a:	fb02 f303 	mul.w	r3, r2, r3
 800552e:	1acb      	subs	r3, r1, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a33      	ldr	r2, [pc, #204]	; (8005604 <UART_SetConfig+0x4e4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	441c      	add	r4, r3
 8005542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005546:	2200      	movs	r2, #0
 8005548:	673b      	str	r3, [r7, #112]	; 0x70
 800554a:	677a      	str	r2, [r7, #116]	; 0x74
 800554c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	1891      	adds	r1, r2, r2
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	415b      	adcs	r3, r3
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005560:	4641      	mov	r1, r8
 8005562:	1851      	adds	r1, r2, r1
 8005564:	6039      	str	r1, [r7, #0]
 8005566:	4649      	mov	r1, r9
 8005568:	414b      	adcs	r3, r1
 800556a:	607b      	str	r3, [r7, #4]
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005578:	4659      	mov	r1, fp
 800557a:	00cb      	lsls	r3, r1, #3
 800557c:	4651      	mov	r1, sl
 800557e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005582:	4651      	mov	r1, sl
 8005584:	00ca      	lsls	r2, r1, #3
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	4603      	mov	r3, r0
 800558c:	4642      	mov	r2, r8
 800558e:	189b      	adds	r3, r3, r2
 8005590:	66bb      	str	r3, [r7, #104]	; 0x68
 8005592:	464b      	mov	r3, r9
 8005594:	460a      	mov	r2, r1
 8005596:	eb42 0303 	adc.w	r3, r2, r3
 800559a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	663b      	str	r3, [r7, #96]	; 0x60
 80055a6:	667a      	str	r2, [r7, #100]	; 0x64
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055b4:	4649      	mov	r1, r9
 80055b6:	008b      	lsls	r3, r1, #2
 80055b8:	4641      	mov	r1, r8
 80055ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055be:	4641      	mov	r1, r8
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055c6:	f7fa fe53 	bl	8000270 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <UART_SetConfig+0x4e4>)
 80055d0:	fba3 1302 	umull	r1, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2164      	movs	r1, #100	; 0x64
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <UART_SetConfig+0x4e4>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 020f 	and.w	r2, r3, #15
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4422      	add	r2, r4
 80055f6:	609a      	str	r2, [r3, #8]
}
 80055f8:	bf00      	nop
 80055fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055fe:	46bd      	mov	sp, r7
 8005600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005604:	51eb851f 	.word	0x51eb851f

08005608 <siprintf>:
 8005608:	b40e      	push	{r1, r2, r3}
 800560a:	b500      	push	{lr}
 800560c:	b09c      	sub	sp, #112	; 0x70
 800560e:	ab1d      	add	r3, sp, #116	; 0x74
 8005610:	9002      	str	r0, [sp, #8]
 8005612:	9006      	str	r0, [sp, #24]
 8005614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005618:	4809      	ldr	r0, [pc, #36]	; (8005640 <siprintf+0x38>)
 800561a:	9107      	str	r1, [sp, #28]
 800561c:	9104      	str	r1, [sp, #16]
 800561e:	4909      	ldr	r1, [pc, #36]	; (8005644 <siprintf+0x3c>)
 8005620:	f853 2b04 	ldr.w	r2, [r3], #4
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	a902      	add	r1, sp, #8
 800562c:	f000 f992 	bl	8005954 <_svfiprintf_r>
 8005630:	9b02      	ldr	r3, [sp, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	b01c      	add	sp, #112	; 0x70
 8005638:	f85d eb04 	ldr.w	lr, [sp], #4
 800563c:	b003      	add	sp, #12
 800563e:	4770      	bx	lr
 8005640:	200000ac 	.word	0x200000ac
 8005644:	ffff0208 	.word	0xffff0208

08005648 <memset>:
 8005648:	4402      	add	r2, r0
 800564a:	4603      	mov	r3, r0
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	f803 1b01 	strb.w	r1, [r3], #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <__errno>:
 8005658:	4b01      	ldr	r3, [pc, #4]	; (8005660 <__errno+0x8>)
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	200000ac 	.word	0x200000ac

08005664 <__libc_init_array>:
 8005664:	b570      	push	{r4, r5, r6, lr}
 8005666:	4d0d      	ldr	r5, [pc, #52]	; (800569c <__libc_init_array+0x38>)
 8005668:	4c0d      	ldr	r4, [pc, #52]	; (80056a0 <__libc_init_array+0x3c>)
 800566a:	1b64      	subs	r4, r4, r5
 800566c:	10a4      	asrs	r4, r4, #2
 800566e:	2600      	movs	r6, #0
 8005670:	42a6      	cmp	r6, r4
 8005672:	d109      	bne.n	8005688 <__libc_init_array+0x24>
 8005674:	4d0b      	ldr	r5, [pc, #44]	; (80056a4 <__libc_init_array+0x40>)
 8005676:	4c0c      	ldr	r4, [pc, #48]	; (80056a8 <__libc_init_array+0x44>)
 8005678:	f000 fc6a 	bl	8005f50 <_init>
 800567c:	1b64      	subs	r4, r4, r5
 800567e:	10a4      	asrs	r4, r4, #2
 8005680:	2600      	movs	r6, #0
 8005682:	42a6      	cmp	r6, r4
 8005684:	d105      	bne.n	8005692 <__libc_init_array+0x2e>
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f855 3b04 	ldr.w	r3, [r5], #4
 800568c:	4798      	blx	r3
 800568e:	3601      	adds	r6, #1
 8005690:	e7ee      	b.n	8005670 <__libc_init_array+0xc>
 8005692:	f855 3b04 	ldr.w	r3, [r5], #4
 8005696:	4798      	blx	r3
 8005698:	3601      	adds	r6, #1
 800569a:	e7f2      	b.n	8005682 <__libc_init_array+0x1e>
 800569c:	08006014 	.word	0x08006014
 80056a0:	08006014 	.word	0x08006014
 80056a4:	08006014 	.word	0x08006014
 80056a8:	08006018 	.word	0x08006018

080056ac <__retarget_lock_acquire_recursive>:
 80056ac:	4770      	bx	lr

080056ae <__retarget_lock_release_recursive>:
 80056ae:	4770      	bx	lr

080056b0 <_free_r>:
 80056b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056b2:	2900      	cmp	r1, #0
 80056b4:	d044      	beq.n	8005740 <_free_r+0x90>
 80056b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ba:	9001      	str	r0, [sp, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f1a1 0404 	sub.w	r4, r1, #4
 80056c2:	bfb8      	it	lt
 80056c4:	18e4      	addlt	r4, r4, r3
 80056c6:	f000 f8df 	bl	8005888 <__malloc_lock>
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <_free_r+0x94>)
 80056cc:	9801      	ldr	r0, [sp, #4]
 80056ce:	6813      	ldr	r3, [r2, #0]
 80056d0:	b933      	cbnz	r3, 80056e0 <_free_r+0x30>
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	6014      	str	r4, [r2, #0]
 80056d6:	b003      	add	sp, #12
 80056d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056dc:	f000 b8da 	b.w	8005894 <__malloc_unlock>
 80056e0:	42a3      	cmp	r3, r4
 80056e2:	d908      	bls.n	80056f6 <_free_r+0x46>
 80056e4:	6825      	ldr	r5, [r4, #0]
 80056e6:	1961      	adds	r1, r4, r5
 80056e8:	428b      	cmp	r3, r1
 80056ea:	bf01      	itttt	eq
 80056ec:	6819      	ldreq	r1, [r3, #0]
 80056ee:	685b      	ldreq	r3, [r3, #4]
 80056f0:	1949      	addeq	r1, r1, r5
 80056f2:	6021      	streq	r1, [r4, #0]
 80056f4:	e7ed      	b.n	80056d2 <_free_r+0x22>
 80056f6:	461a      	mov	r2, r3
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	b10b      	cbz	r3, 8005700 <_free_r+0x50>
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	d9fa      	bls.n	80056f6 <_free_r+0x46>
 8005700:	6811      	ldr	r1, [r2, #0]
 8005702:	1855      	adds	r5, r2, r1
 8005704:	42a5      	cmp	r5, r4
 8005706:	d10b      	bne.n	8005720 <_free_r+0x70>
 8005708:	6824      	ldr	r4, [r4, #0]
 800570a:	4421      	add	r1, r4
 800570c:	1854      	adds	r4, r2, r1
 800570e:	42a3      	cmp	r3, r4
 8005710:	6011      	str	r1, [r2, #0]
 8005712:	d1e0      	bne.n	80056d6 <_free_r+0x26>
 8005714:	681c      	ldr	r4, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	6053      	str	r3, [r2, #4]
 800571a:	440c      	add	r4, r1
 800571c:	6014      	str	r4, [r2, #0]
 800571e:	e7da      	b.n	80056d6 <_free_r+0x26>
 8005720:	d902      	bls.n	8005728 <_free_r+0x78>
 8005722:	230c      	movs	r3, #12
 8005724:	6003      	str	r3, [r0, #0]
 8005726:	e7d6      	b.n	80056d6 <_free_r+0x26>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1961      	adds	r1, r4, r5
 800572c:	428b      	cmp	r3, r1
 800572e:	bf04      	itt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	6063      	str	r3, [r4, #4]
 8005736:	bf04      	itt	eq
 8005738:	1949      	addeq	r1, r1, r5
 800573a:	6021      	streq	r1, [r4, #0]
 800573c:	6054      	str	r4, [r2, #4]
 800573e:	e7ca      	b.n	80056d6 <_free_r+0x26>
 8005740:	b003      	add	sp, #12
 8005742:	bd30      	pop	{r4, r5, pc}
 8005744:	200003f4 	.word	0x200003f4

08005748 <sbrk_aligned>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4e0e      	ldr	r6, [pc, #56]	; (8005784 <sbrk_aligned+0x3c>)
 800574c:	460c      	mov	r4, r1
 800574e:	6831      	ldr	r1, [r6, #0]
 8005750:	4605      	mov	r5, r0
 8005752:	b911      	cbnz	r1, 800575a <sbrk_aligned+0x12>
 8005754:	f000 fba6 	bl	8005ea4 <_sbrk_r>
 8005758:	6030      	str	r0, [r6, #0]
 800575a:	4621      	mov	r1, r4
 800575c:	4628      	mov	r0, r5
 800575e:	f000 fba1 	bl	8005ea4 <_sbrk_r>
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	d00a      	beq.n	800577c <sbrk_aligned+0x34>
 8005766:	1cc4      	adds	r4, r0, #3
 8005768:	f024 0403 	bic.w	r4, r4, #3
 800576c:	42a0      	cmp	r0, r4
 800576e:	d007      	beq.n	8005780 <sbrk_aligned+0x38>
 8005770:	1a21      	subs	r1, r4, r0
 8005772:	4628      	mov	r0, r5
 8005774:	f000 fb96 	bl	8005ea4 <_sbrk_r>
 8005778:	3001      	adds	r0, #1
 800577a:	d101      	bne.n	8005780 <sbrk_aligned+0x38>
 800577c:	f04f 34ff 	mov.w	r4, #4294967295
 8005780:	4620      	mov	r0, r4
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	200003f8 	.word	0x200003f8

08005788 <_malloc_r>:
 8005788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800578c:	1ccd      	adds	r5, r1, #3
 800578e:	f025 0503 	bic.w	r5, r5, #3
 8005792:	3508      	adds	r5, #8
 8005794:	2d0c      	cmp	r5, #12
 8005796:	bf38      	it	cc
 8005798:	250c      	movcc	r5, #12
 800579a:	2d00      	cmp	r5, #0
 800579c:	4607      	mov	r7, r0
 800579e:	db01      	blt.n	80057a4 <_malloc_r+0x1c>
 80057a0:	42a9      	cmp	r1, r5
 80057a2:	d905      	bls.n	80057b0 <_malloc_r+0x28>
 80057a4:	230c      	movs	r3, #12
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	2600      	movs	r6, #0
 80057aa:	4630      	mov	r0, r6
 80057ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005884 <_malloc_r+0xfc>
 80057b4:	f000 f868 	bl	8005888 <__malloc_lock>
 80057b8:	f8d8 3000 	ldr.w	r3, [r8]
 80057bc:	461c      	mov	r4, r3
 80057be:	bb5c      	cbnz	r4, 8005818 <_malloc_r+0x90>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ffc0 	bl	8005748 <sbrk_aligned>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	4604      	mov	r4, r0
 80057cc:	d155      	bne.n	800587a <_malloc_r+0xf2>
 80057ce:	f8d8 4000 	ldr.w	r4, [r8]
 80057d2:	4626      	mov	r6, r4
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	d145      	bne.n	8005864 <_malloc_r+0xdc>
 80057d8:	2c00      	cmp	r4, #0
 80057da:	d048      	beq.n	800586e <_malloc_r+0xe6>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	4631      	mov	r1, r6
 80057e0:	4638      	mov	r0, r7
 80057e2:	eb04 0903 	add.w	r9, r4, r3
 80057e6:	f000 fb5d 	bl	8005ea4 <_sbrk_r>
 80057ea:	4581      	cmp	r9, r0
 80057ec:	d13f      	bne.n	800586e <_malloc_r+0xe6>
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	1a6d      	subs	r5, r5, r1
 80057f2:	4629      	mov	r1, r5
 80057f4:	4638      	mov	r0, r7
 80057f6:	f7ff ffa7 	bl	8005748 <sbrk_aligned>
 80057fa:	3001      	adds	r0, #1
 80057fc:	d037      	beq.n	800586e <_malloc_r+0xe6>
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	442b      	add	r3, r5
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	f8d8 3000 	ldr.w	r3, [r8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d038      	beq.n	800587e <_malloc_r+0xf6>
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	42a2      	cmp	r2, r4
 8005810:	d12b      	bne.n	800586a <_malloc_r+0xe2>
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	e00f      	b.n	8005838 <_malloc_r+0xb0>
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	1b52      	subs	r2, r2, r5
 800581c:	d41f      	bmi.n	800585e <_malloc_r+0xd6>
 800581e:	2a0b      	cmp	r2, #11
 8005820:	d917      	bls.n	8005852 <_malloc_r+0xca>
 8005822:	1961      	adds	r1, r4, r5
 8005824:	42a3      	cmp	r3, r4
 8005826:	6025      	str	r5, [r4, #0]
 8005828:	bf18      	it	ne
 800582a:	6059      	strne	r1, [r3, #4]
 800582c:	6863      	ldr	r3, [r4, #4]
 800582e:	bf08      	it	eq
 8005830:	f8c8 1000 	streq.w	r1, [r8]
 8005834:	5162      	str	r2, [r4, r5]
 8005836:	604b      	str	r3, [r1, #4]
 8005838:	4638      	mov	r0, r7
 800583a:	f104 060b 	add.w	r6, r4, #11
 800583e:	f000 f829 	bl	8005894 <__malloc_unlock>
 8005842:	f026 0607 	bic.w	r6, r6, #7
 8005846:	1d23      	adds	r3, r4, #4
 8005848:	1af2      	subs	r2, r6, r3
 800584a:	d0ae      	beq.n	80057aa <_malloc_r+0x22>
 800584c:	1b9b      	subs	r3, r3, r6
 800584e:	50a3      	str	r3, [r4, r2]
 8005850:	e7ab      	b.n	80057aa <_malloc_r+0x22>
 8005852:	42a3      	cmp	r3, r4
 8005854:	6862      	ldr	r2, [r4, #4]
 8005856:	d1dd      	bne.n	8005814 <_malloc_r+0x8c>
 8005858:	f8c8 2000 	str.w	r2, [r8]
 800585c:	e7ec      	b.n	8005838 <_malloc_r+0xb0>
 800585e:	4623      	mov	r3, r4
 8005860:	6864      	ldr	r4, [r4, #4]
 8005862:	e7ac      	b.n	80057be <_malloc_r+0x36>
 8005864:	4634      	mov	r4, r6
 8005866:	6876      	ldr	r6, [r6, #4]
 8005868:	e7b4      	b.n	80057d4 <_malloc_r+0x4c>
 800586a:	4613      	mov	r3, r2
 800586c:	e7cc      	b.n	8005808 <_malloc_r+0x80>
 800586e:	230c      	movs	r3, #12
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	4638      	mov	r0, r7
 8005874:	f000 f80e 	bl	8005894 <__malloc_unlock>
 8005878:	e797      	b.n	80057aa <_malloc_r+0x22>
 800587a:	6025      	str	r5, [r4, #0]
 800587c:	e7dc      	b.n	8005838 <_malloc_r+0xb0>
 800587e:	605b      	str	r3, [r3, #4]
 8005880:	deff      	udf	#255	; 0xff
 8005882:	bf00      	nop
 8005884:	200003f4 	.word	0x200003f4

08005888 <__malloc_lock>:
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <__malloc_lock+0x8>)
 800588a:	f7ff bf0f 	b.w	80056ac <__retarget_lock_acquire_recursive>
 800588e:	bf00      	nop
 8005890:	200003f0 	.word	0x200003f0

08005894 <__malloc_unlock>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__malloc_unlock+0x8>)
 8005896:	f7ff bf0a 	b.w	80056ae <__retarget_lock_release_recursive>
 800589a:	bf00      	nop
 800589c:	200003f0 	.word	0x200003f0

080058a0 <__ssputs_r>:
 80058a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	688e      	ldr	r6, [r1, #8]
 80058a6:	461f      	mov	r7, r3
 80058a8:	42be      	cmp	r6, r7
 80058aa:	680b      	ldr	r3, [r1, #0]
 80058ac:	4682      	mov	sl, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4690      	mov	r8, r2
 80058b2:	d82c      	bhi.n	800590e <__ssputs_r+0x6e>
 80058b4:	898a      	ldrh	r2, [r1, #12]
 80058b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058ba:	d026      	beq.n	800590a <__ssputs_r+0x6a>
 80058bc:	6965      	ldr	r5, [r4, #20]
 80058be:	6909      	ldr	r1, [r1, #16]
 80058c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058c4:	eba3 0901 	sub.w	r9, r3, r1
 80058c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058cc:	1c7b      	adds	r3, r7, #1
 80058ce:	444b      	add	r3, r9
 80058d0:	106d      	asrs	r5, r5, #1
 80058d2:	429d      	cmp	r5, r3
 80058d4:	bf38      	it	cc
 80058d6:	461d      	movcc	r5, r3
 80058d8:	0553      	lsls	r3, r2, #21
 80058da:	d527      	bpl.n	800592c <__ssputs_r+0x8c>
 80058dc:	4629      	mov	r1, r5
 80058de:	f7ff ff53 	bl	8005788 <_malloc_r>
 80058e2:	4606      	mov	r6, r0
 80058e4:	b360      	cbz	r0, 8005940 <__ssputs_r+0xa0>
 80058e6:	6921      	ldr	r1, [r4, #16]
 80058e8:	464a      	mov	r2, r9
 80058ea:	f000 faeb 	bl	8005ec4 <memcpy>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	6126      	str	r6, [r4, #16]
 80058fc:	6165      	str	r5, [r4, #20]
 80058fe:	444e      	add	r6, r9
 8005900:	eba5 0509 	sub.w	r5, r5, r9
 8005904:	6026      	str	r6, [r4, #0]
 8005906:	60a5      	str	r5, [r4, #8]
 8005908:	463e      	mov	r6, r7
 800590a:	42be      	cmp	r6, r7
 800590c:	d900      	bls.n	8005910 <__ssputs_r+0x70>
 800590e:	463e      	mov	r6, r7
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	4632      	mov	r2, r6
 8005914:	4641      	mov	r1, r8
 8005916:	f000 faab 	bl	8005e70 <memmove>
 800591a:	68a3      	ldr	r3, [r4, #8]
 800591c:	1b9b      	subs	r3, r3, r6
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	4433      	add	r3, r6
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	2000      	movs	r0, #0
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	462a      	mov	r2, r5
 800592e:	f000 fad7 	bl	8005ee0 <_realloc_r>
 8005932:	4606      	mov	r6, r0
 8005934:	2800      	cmp	r0, #0
 8005936:	d1e0      	bne.n	80058fa <__ssputs_r+0x5a>
 8005938:	6921      	ldr	r1, [r4, #16]
 800593a:	4650      	mov	r0, sl
 800593c:	f7ff feb8 	bl	80056b0 <_free_r>
 8005940:	230c      	movs	r3, #12
 8005942:	f8ca 3000 	str.w	r3, [sl]
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	f04f 30ff 	mov.w	r0, #4294967295
 8005952:	e7e9      	b.n	8005928 <__ssputs_r+0x88>

08005954 <_svfiprintf_r>:
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4698      	mov	r8, r3
 800595a:	898b      	ldrh	r3, [r1, #12]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	b09d      	sub	sp, #116	; 0x74
 8005960:	4607      	mov	r7, r0
 8005962:	460d      	mov	r5, r1
 8005964:	4614      	mov	r4, r2
 8005966:	d50e      	bpl.n	8005986 <_svfiprintf_r+0x32>
 8005968:	690b      	ldr	r3, [r1, #16]
 800596a:	b963      	cbnz	r3, 8005986 <_svfiprintf_r+0x32>
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	f7ff ff0b 	bl	8005788 <_malloc_r>
 8005972:	6028      	str	r0, [r5, #0]
 8005974:	6128      	str	r0, [r5, #16]
 8005976:	b920      	cbnz	r0, 8005982 <_svfiprintf_r+0x2e>
 8005978:	230c      	movs	r3, #12
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e0d0      	b.n	8005b24 <_svfiprintf_r+0x1d0>
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	616b      	str	r3, [r5, #20]
 8005986:	2300      	movs	r3, #0
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	2320      	movs	r3, #32
 800598c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005990:	f8cd 800c 	str.w	r8, [sp, #12]
 8005994:	2330      	movs	r3, #48	; 0x30
 8005996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b3c <_svfiprintf_r+0x1e8>
 800599a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800599e:	f04f 0901 	mov.w	r9, #1
 80059a2:	4623      	mov	r3, r4
 80059a4:	469a      	mov	sl, r3
 80059a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059aa:	b10a      	cbz	r2, 80059b0 <_svfiprintf_r+0x5c>
 80059ac:	2a25      	cmp	r2, #37	; 0x25
 80059ae:	d1f9      	bne.n	80059a4 <_svfiprintf_r+0x50>
 80059b0:	ebba 0b04 	subs.w	fp, sl, r4
 80059b4:	d00b      	beq.n	80059ce <_svfiprintf_r+0x7a>
 80059b6:	465b      	mov	r3, fp
 80059b8:	4622      	mov	r2, r4
 80059ba:	4629      	mov	r1, r5
 80059bc:	4638      	mov	r0, r7
 80059be:	f7ff ff6f 	bl	80058a0 <__ssputs_r>
 80059c2:	3001      	adds	r0, #1
 80059c4:	f000 80a9 	beq.w	8005b1a <_svfiprintf_r+0x1c6>
 80059c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ca:	445a      	add	r2, fp
 80059cc:	9209      	str	r2, [sp, #36]	; 0x24
 80059ce:	f89a 3000 	ldrb.w	r3, [sl]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80a1 	beq.w	8005b1a <_svfiprintf_r+0x1c6>
 80059d8:	2300      	movs	r3, #0
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059e2:	f10a 0a01 	add.w	sl, sl, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059ee:	931a      	str	r3, [sp, #104]	; 0x68
 80059f0:	4654      	mov	r4, sl
 80059f2:	2205      	movs	r2, #5
 80059f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f8:	4850      	ldr	r0, [pc, #320]	; (8005b3c <_svfiprintf_r+0x1e8>)
 80059fa:	f7fa fbe9 	bl	80001d0 <memchr>
 80059fe:	9a04      	ldr	r2, [sp, #16]
 8005a00:	b9d8      	cbnz	r0, 8005a3a <_svfiprintf_r+0xe6>
 8005a02:	06d0      	lsls	r0, r2, #27
 8005a04:	bf44      	itt	mi
 8005a06:	2320      	movmi	r3, #32
 8005a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a0c:	0711      	lsls	r1, r2, #28
 8005a0e:	bf44      	itt	mi
 8005a10:	232b      	movmi	r3, #43	; 0x2b
 8005a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a16:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	d015      	beq.n	8005a4a <_svfiprintf_r+0xf6>
 8005a1e:	9a07      	ldr	r2, [sp, #28]
 8005a20:	4654      	mov	r4, sl
 8005a22:	2000      	movs	r0, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a2e:	3b30      	subs	r3, #48	; 0x30
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d94d      	bls.n	8005ad0 <_svfiprintf_r+0x17c>
 8005a34:	b1b0      	cbz	r0, 8005a64 <_svfiprintf_r+0x110>
 8005a36:	9207      	str	r2, [sp, #28]
 8005a38:	e014      	b.n	8005a64 <_svfiprintf_r+0x110>
 8005a3a:	eba0 0308 	sub.w	r3, r0, r8
 8005a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	46a2      	mov	sl, r4
 8005a48:	e7d2      	b.n	80059f0 <_svfiprintf_r+0x9c>
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	9103      	str	r1, [sp, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfbb      	ittet	lt
 8005a56:	425b      	neglt	r3, r3
 8005a58:	f042 0202 	orrlt.w	r2, r2, #2
 8005a5c:	9307      	strge	r3, [sp, #28]
 8005a5e:	9307      	strlt	r3, [sp, #28]
 8005a60:	bfb8      	it	lt
 8005a62:	9204      	strlt	r2, [sp, #16]
 8005a64:	7823      	ldrb	r3, [r4, #0]
 8005a66:	2b2e      	cmp	r3, #46	; 0x2e
 8005a68:	d10c      	bne.n	8005a84 <_svfiprintf_r+0x130>
 8005a6a:	7863      	ldrb	r3, [r4, #1]
 8005a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6e:	d134      	bne.n	8005ada <_svfiprintf_r+0x186>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	9203      	str	r2, [sp, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a80:	3402      	adds	r4, #2
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b4c <_svfiprintf_r+0x1f8>
 8005a88:	7821      	ldrb	r1, [r4, #0]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	f7fa fb9f 	bl	80001d0 <memchr>
 8005a92:	b138      	cbz	r0, 8005aa4 <_svfiprintf_r+0x150>
 8005a94:	9b04      	ldr	r3, [sp, #16]
 8005a96:	eba0 000a 	sub.w	r0, r0, sl
 8005a9a:	2240      	movs	r2, #64	; 0x40
 8005a9c:	4082      	lsls	r2, r0
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	3401      	adds	r4, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	4825      	ldr	r0, [pc, #148]	; (8005b40 <_svfiprintf_r+0x1ec>)
 8005aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aae:	2206      	movs	r2, #6
 8005ab0:	f7fa fb8e 	bl	80001d0 <memchr>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d038      	beq.n	8005b2a <_svfiprintf_r+0x1d6>
 8005ab8:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <_svfiprintf_r+0x1f0>)
 8005aba:	bb1b      	cbnz	r3, 8005b04 <_svfiprintf_r+0x1b0>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	3307      	adds	r3, #7
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	9303      	str	r3, [sp, #12]
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	4433      	add	r3, r6
 8005acc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ace:	e768      	b.n	80059a2 <_svfiprintf_r+0x4e>
 8005ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7a6      	b.n	8005a28 <_svfiprintf_r+0xd4>
 8005ada:	2300      	movs	r3, #0
 8005adc:	3401      	adds	r4, #1
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f04f 0c0a 	mov.w	ip, #10
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aec:	3a30      	subs	r2, #48	; 0x30
 8005aee:	2a09      	cmp	r2, #9
 8005af0:	d903      	bls.n	8005afa <_svfiprintf_r+0x1a6>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0c6      	beq.n	8005a84 <_svfiprintf_r+0x130>
 8005af6:	9105      	str	r1, [sp, #20]
 8005af8:	e7c4      	b.n	8005a84 <_svfiprintf_r+0x130>
 8005afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005afe:	4604      	mov	r4, r0
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7f0      	b.n	8005ae6 <_svfiprintf_r+0x192>
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <_svfiprintf_r+0x1f4>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f3af 8000 	nop.w
 8005b14:	1c42      	adds	r2, r0, #1
 8005b16:	4606      	mov	r6, r0
 8005b18:	d1d6      	bne.n	8005ac8 <_svfiprintf_r+0x174>
 8005b1a:	89ab      	ldrh	r3, [r5, #12]
 8005b1c:	065b      	lsls	r3, r3, #25
 8005b1e:	f53f af2d 	bmi.w	800597c <_svfiprintf_r+0x28>
 8005b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b24:	b01d      	add	sp, #116	; 0x74
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	ab03      	add	r3, sp, #12
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <_svfiprintf_r+0x1f4>)
 8005b32:	a904      	add	r1, sp, #16
 8005b34:	4638      	mov	r0, r7
 8005b36:	f000 f879 	bl	8005c2c <_printf_i>
 8005b3a:	e7eb      	b.n	8005b14 <_svfiprintf_r+0x1c0>
 8005b3c:	08005fd8 	.word	0x08005fd8
 8005b40:	08005fe2 	.word	0x08005fe2
 8005b44:	00000000 	.word	0x00000000
 8005b48:	080058a1 	.word	0x080058a1
 8005b4c:	08005fde 	.word	0x08005fde

08005b50 <_printf_common>:
 8005b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	4616      	mov	r6, r2
 8005b56:	4699      	mov	r9, r3
 8005b58:	688a      	ldr	r2, [r1, #8]
 8005b5a:	690b      	ldr	r3, [r1, #16]
 8005b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	bfb8      	it	lt
 8005b64:	4613      	movlt	r3, r2
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b6c:	4607      	mov	r7, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	b10a      	cbz	r2, 8005b76 <_printf_common+0x26>
 8005b72:	3301      	adds	r3, #1
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	0699      	lsls	r1, r3, #26
 8005b7a:	bf42      	ittt	mi
 8005b7c:	6833      	ldrmi	r3, [r6, #0]
 8005b7e:	3302      	addmi	r3, #2
 8005b80:	6033      	strmi	r3, [r6, #0]
 8005b82:	6825      	ldr	r5, [r4, #0]
 8005b84:	f015 0506 	ands.w	r5, r5, #6
 8005b88:	d106      	bne.n	8005b98 <_printf_common+0x48>
 8005b8a:	f104 0a19 	add.w	sl, r4, #25
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	6832      	ldr	r2, [r6, #0]
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc26      	bgt.n	8005be6 <_printf_common+0x96>
 8005b98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b9c:	1e13      	subs	r3, r2, #0
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	0692      	lsls	r2, r2, #26
 8005ba6:	d42b      	bmi.n	8005c00 <_printf_common+0xb0>
 8005ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bac:	4649      	mov	r1, r9
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d01e      	beq.n	8005bf4 <_printf_common+0xa4>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	6922      	ldr	r2, [r4, #16]
 8005bba:	f003 0306 	and.w	r3, r3, #6
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	bf02      	ittt	eq
 8005bc2:	68e5      	ldreq	r5, [r4, #12]
 8005bc4:	6833      	ldreq	r3, [r6, #0]
 8005bc6:	1aed      	subeq	r5, r5, r3
 8005bc8:	68a3      	ldr	r3, [r4, #8]
 8005bca:	bf0c      	ite	eq
 8005bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd0:	2500      	movne	r5, #0
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bfc4      	itt	gt
 8005bd6:	1a9b      	subgt	r3, r3, r2
 8005bd8:	18ed      	addgt	r5, r5, r3
 8005bda:	2600      	movs	r6, #0
 8005bdc:	341a      	adds	r4, #26
 8005bde:	42b5      	cmp	r5, r6
 8005be0:	d11a      	bne.n	8005c18 <_printf_common+0xc8>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e008      	b.n	8005bf8 <_printf_common+0xa8>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4652      	mov	r2, sl
 8005bea:	4649      	mov	r1, r9
 8005bec:	4638      	mov	r0, r7
 8005bee:	47c0      	blx	r8
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d103      	bne.n	8005bfc <_printf_common+0xac>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	e7c6      	b.n	8005b8e <_printf_common+0x3e>
 8005c00:	18e1      	adds	r1, r4, r3
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	2030      	movs	r0, #48	; 0x30
 8005c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0a:	4422      	add	r2, r4
 8005c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c14:	3302      	adds	r3, #2
 8005c16:	e7c7      	b.n	8005ba8 <_printf_common+0x58>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	4649      	mov	r1, r9
 8005c1e:	4638      	mov	r0, r7
 8005c20:	47c0      	blx	r8
 8005c22:	3001      	adds	r0, #1
 8005c24:	d0e6      	beq.n	8005bf4 <_printf_common+0xa4>
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7d9      	b.n	8005bde <_printf_common+0x8e>
	...

08005c2c <_printf_i>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	7e0f      	ldrb	r7, [r1, #24]
 8005c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c34:	2f78      	cmp	r7, #120	; 0x78
 8005c36:	4691      	mov	r9, r2
 8005c38:	4680      	mov	r8, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	469a      	mov	sl, r3
 8005c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c42:	d807      	bhi.n	8005c54 <_printf_i+0x28>
 8005c44:	2f62      	cmp	r7, #98	; 0x62
 8005c46:	d80a      	bhi.n	8005c5e <_printf_i+0x32>
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	f000 80d4 	beq.w	8005df6 <_printf_i+0x1ca>
 8005c4e:	2f58      	cmp	r7, #88	; 0x58
 8005c50:	f000 80c0 	beq.w	8005dd4 <_printf_i+0x1a8>
 8005c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c5c:	e03a      	b.n	8005cd4 <_printf_i+0xa8>
 8005c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c62:	2b15      	cmp	r3, #21
 8005c64:	d8f6      	bhi.n	8005c54 <_printf_i+0x28>
 8005c66:	a101      	add	r1, pc, #4	; (adr r1, 8005c6c <_printf_i+0x40>)
 8005c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005c55 	.word	0x08005c55
 8005c78:	08005c55 	.word	0x08005c55
 8005c7c:	08005c55 	.word	0x08005c55
 8005c80:	08005c55 	.word	0x08005c55
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c55 	.word	0x08005c55
 8005c8c:	08005c55 	.word	0x08005c55
 8005c90:	08005c55 	.word	0x08005c55
 8005c94:	08005c55 	.word	0x08005c55
 8005c98:	08005ddd 	.word	0x08005ddd
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005d97 	.word	0x08005d97
 8005ca4:	08005c55 	.word	0x08005c55
 8005ca8:	08005c55 	.word	0x08005c55
 8005cac:	08005dff 	.word	0x08005dff
 8005cb0:	08005c55 	.word	0x08005c55
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005c55 	.word	0x08005c55
 8005cbc:	08005c55 	.word	0x08005c55
 8005cc0:	08005d9f 	.word	0x08005d9f
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e09f      	b.n	8005e18 <_printf_i+0x1ec>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	0607      	lsls	r7, r0, #24
 8005cde:	f103 0104 	add.w	r1, r3, #4
 8005ce2:	6029      	str	r1, [r5, #0]
 8005ce4:	d501      	bpl.n	8005cea <_printf_i+0xbe>
 8005ce6:	681e      	ldr	r6, [r3, #0]
 8005ce8:	e003      	b.n	8005cf2 <_printf_i+0xc6>
 8005cea:	0646      	lsls	r6, r0, #25
 8005cec:	d5fb      	bpl.n	8005ce6 <_printf_i+0xba>
 8005cee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	da03      	bge.n	8005cfe <_printf_i+0xd2>
 8005cf6:	232d      	movs	r3, #45	; 0x2d
 8005cf8:	4276      	negs	r6, r6
 8005cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfe:	485a      	ldr	r0, [pc, #360]	; (8005e68 <_printf_i+0x23c>)
 8005d00:	230a      	movs	r3, #10
 8005d02:	e012      	b.n	8005d2a <_printf_i+0xfe>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	1d19      	adds	r1, r3, #4
 8005d0a:	6029      	str	r1, [r5, #0]
 8005d0c:	0605      	lsls	r5, r0, #24
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0xe8>
 8005d10:	681e      	ldr	r6, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0xee>
 8005d14:	0641      	lsls	r1, r0, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0xe4>
 8005d18:	881e      	ldrh	r6, [r3, #0]
 8005d1a:	4853      	ldr	r0, [pc, #332]	; (8005e68 <_printf_i+0x23c>)
 8005d1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d1e:	bf0c      	ite	eq
 8005d20:	2308      	moveq	r3, #8
 8005d22:	230a      	movne	r3, #10
 8005d24:	2100      	movs	r1, #0
 8005d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d2a:	6865      	ldr	r5, [r4, #4]
 8005d2c:	60a5      	str	r5, [r4, #8]
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	bfa2      	ittt	ge
 8005d32:	6821      	ldrge	r1, [r4, #0]
 8005d34:	f021 0104 	bicge.w	r1, r1, #4
 8005d38:	6021      	strge	r1, [r4, #0]
 8005d3a:	b90e      	cbnz	r6, 8005d40 <_printf_i+0x114>
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	d04b      	beq.n	8005dd8 <_printf_i+0x1ac>
 8005d40:	4615      	mov	r5, r2
 8005d42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d46:	fb03 6711 	mls	r7, r3, r1, r6
 8005d4a:	5dc7      	ldrb	r7, [r0, r7]
 8005d4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d50:	4637      	mov	r7, r6
 8005d52:	42bb      	cmp	r3, r7
 8005d54:	460e      	mov	r6, r1
 8005d56:	d9f4      	bls.n	8005d42 <_printf_i+0x116>
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d10b      	bne.n	8005d74 <_printf_i+0x148>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	07de      	lsls	r6, r3, #31
 8005d60:	d508      	bpl.n	8005d74 <_printf_i+0x148>
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	6861      	ldr	r1, [r4, #4]
 8005d66:	4299      	cmp	r1, r3
 8005d68:	bfde      	ittt	le
 8005d6a:	2330      	movle	r3, #48	; 0x30
 8005d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d74:	1b52      	subs	r2, r2, r5
 8005d76:	6122      	str	r2, [r4, #16]
 8005d78:	f8cd a000 	str.w	sl, [sp]
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	aa03      	add	r2, sp, #12
 8005d80:	4621      	mov	r1, r4
 8005d82:	4640      	mov	r0, r8
 8005d84:	f7ff fee4 	bl	8005b50 <_printf_common>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d14a      	bne.n	8005e22 <_printf_i+0x1f6>
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	b004      	add	sp, #16
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	f043 0320 	orr.w	r3, r3, #32
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	4833      	ldr	r0, [pc, #204]	; (8005e6c <_printf_i+0x240>)
 8005da0:	2778      	movs	r7, #120	; 0x78
 8005da2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	6829      	ldr	r1, [r5, #0]
 8005daa:	061f      	lsls	r7, r3, #24
 8005dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005db0:	d402      	bmi.n	8005db8 <_printf_i+0x18c>
 8005db2:	065f      	lsls	r7, r3, #25
 8005db4:	bf48      	it	mi
 8005db6:	b2b6      	uxthmi	r6, r6
 8005db8:	07df      	lsls	r7, r3, #31
 8005dba:	bf48      	it	mi
 8005dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc0:	6029      	str	r1, [r5, #0]
 8005dc2:	bf48      	it	mi
 8005dc4:	6023      	strmi	r3, [r4, #0]
 8005dc6:	b91e      	cbnz	r6, 8005dd0 <_printf_i+0x1a4>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	f023 0320 	bic.w	r3, r3, #32
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	e7a7      	b.n	8005d24 <_printf_i+0xf8>
 8005dd4:	4824      	ldr	r0, [pc, #144]	; (8005e68 <_printf_i+0x23c>)
 8005dd6:	e7e4      	b.n	8005da2 <_printf_i+0x176>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	e7bd      	b.n	8005d58 <_printf_i+0x12c>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	6826      	ldr	r6, [r4, #0]
 8005de0:	6961      	ldr	r1, [r4, #20]
 8005de2:	1d18      	adds	r0, r3, #4
 8005de4:	6028      	str	r0, [r5, #0]
 8005de6:	0635      	lsls	r5, r6, #24
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	d501      	bpl.n	8005df0 <_printf_i+0x1c4>
 8005dec:	6019      	str	r1, [r3, #0]
 8005dee:	e002      	b.n	8005df6 <_printf_i+0x1ca>
 8005df0:	0670      	lsls	r0, r6, #25
 8005df2:	d5fb      	bpl.n	8005dec <_printf_i+0x1c0>
 8005df4:	8019      	strh	r1, [r3, #0]
 8005df6:	2300      	movs	r3, #0
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	e7bc      	b.n	8005d78 <_printf_i+0x14c>
 8005dfe:	682b      	ldr	r3, [r5, #0]
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	6862      	ldr	r2, [r4, #4]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7fa f9e0 	bl	80001d0 <memchr>
 8005e10:	b108      	cbz	r0, 8005e16 <_printf_i+0x1ea>
 8005e12:	1b40      	subs	r0, r0, r5
 8005e14:	6060      	str	r0, [r4, #4]
 8005e16:	6863      	ldr	r3, [r4, #4]
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	e7aa      	b.n	8005d78 <_printf_i+0x14c>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	462a      	mov	r2, r5
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	47d0      	blx	sl
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d0ad      	beq.n	8005d8c <_printf_i+0x160>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	079b      	lsls	r3, r3, #30
 8005e34:	d413      	bmi.n	8005e5e <_printf_i+0x232>
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	bfb8      	it	lt
 8005e3e:	4618      	movlt	r0, r3
 8005e40:	e7a6      	b.n	8005d90 <_printf_i+0x164>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4632      	mov	r2, r6
 8005e46:	4649      	mov	r1, r9
 8005e48:	4640      	mov	r0, r8
 8005e4a:	47d0      	blx	sl
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d09d      	beq.n	8005d8c <_printf_i+0x160>
 8005e50:	3501      	adds	r5, #1
 8005e52:	68e3      	ldr	r3, [r4, #12]
 8005e54:	9903      	ldr	r1, [sp, #12]
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	42ab      	cmp	r3, r5
 8005e5a:	dcf2      	bgt.n	8005e42 <_printf_i+0x216>
 8005e5c:	e7eb      	b.n	8005e36 <_printf_i+0x20a>
 8005e5e:	2500      	movs	r5, #0
 8005e60:	f104 0619 	add.w	r6, r4, #25
 8005e64:	e7f5      	b.n	8005e52 <_printf_i+0x226>
 8005e66:	bf00      	nop
 8005e68:	08005fe9 	.word	0x08005fe9
 8005e6c:	08005ffa 	.word	0x08005ffa

08005e70 <memmove>:
 8005e70:	4288      	cmp	r0, r1
 8005e72:	b510      	push	{r4, lr}
 8005e74:	eb01 0402 	add.w	r4, r1, r2
 8005e78:	d902      	bls.n	8005e80 <memmove+0x10>
 8005e7a:	4284      	cmp	r4, r0
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	d807      	bhi.n	8005e90 <memmove+0x20>
 8005e80:	1e43      	subs	r3, r0, #1
 8005e82:	42a1      	cmp	r1, r4
 8005e84:	d008      	beq.n	8005e98 <memmove+0x28>
 8005e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e8e:	e7f8      	b.n	8005e82 <memmove+0x12>
 8005e90:	4402      	add	r2, r0
 8005e92:	4601      	mov	r1, r0
 8005e94:	428a      	cmp	r2, r1
 8005e96:	d100      	bne.n	8005e9a <memmove+0x2a>
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ea2:	e7f7      	b.n	8005e94 <memmove+0x24>

08005ea4 <_sbrk_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4d06      	ldr	r5, [pc, #24]	; (8005ec0 <_sbrk_r+0x1c>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	f7fb fa62 	bl	8001378 <_sbrk>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_sbrk_r+0x1a>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_sbrk_r+0x1a>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	200003ec 	.word	0x200003ec

08005ec4 <memcpy>:
 8005ec4:	440a      	add	r2, r1
 8005ec6:	4291      	cmp	r1, r2
 8005ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ecc:	d100      	bne.n	8005ed0 <memcpy+0xc>
 8005ece:	4770      	bx	lr
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eda:	4291      	cmp	r1, r2
 8005edc:	d1f9      	bne.n	8005ed2 <memcpy+0xe>
 8005ede:	bd10      	pop	{r4, pc}

08005ee0 <_realloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4614      	mov	r4, r2
 8005ee8:	460e      	mov	r6, r1
 8005eea:	b921      	cbnz	r1, 8005ef6 <_realloc_r+0x16>
 8005eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	f7ff bc49 	b.w	8005788 <_malloc_r>
 8005ef6:	b92a      	cbnz	r2, 8005f04 <_realloc_r+0x24>
 8005ef8:	f7ff fbda 	bl	80056b0 <_free_r>
 8005efc:	4625      	mov	r5, r4
 8005efe:	4628      	mov	r0, r5
 8005f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f04:	f000 f81b 	bl	8005f3e <_malloc_usable_size_r>
 8005f08:	4284      	cmp	r4, r0
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	d802      	bhi.n	8005f14 <_realloc_r+0x34>
 8005f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f12:	d812      	bhi.n	8005f3a <_realloc_r+0x5a>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff fc36 	bl	8005788 <_malloc_r>
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0ed      	beq.n	8005efe <_realloc_r+0x1e>
 8005f22:	42bc      	cmp	r4, r7
 8005f24:	4622      	mov	r2, r4
 8005f26:	4631      	mov	r1, r6
 8005f28:	bf28      	it	cs
 8005f2a:	463a      	movcs	r2, r7
 8005f2c:	f7ff ffca 	bl	8005ec4 <memcpy>
 8005f30:	4631      	mov	r1, r6
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fbbc 	bl	80056b0 <_free_r>
 8005f38:	e7e1      	b.n	8005efe <_realloc_r+0x1e>
 8005f3a:	4635      	mov	r5, r6
 8005f3c:	e7df      	b.n	8005efe <_realloc_r+0x1e>

08005f3e <_malloc_usable_size_r>:
 8005f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f42:	1f18      	subs	r0, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bfbc      	itt	lt
 8005f48:	580b      	ldrlt	r3, [r1, r0]
 8005f4a:	18c0      	addlt	r0, r0, r3
 8005f4c:	4770      	bx	lr
	...

08005f50 <_init>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr

08005f5c <_fini>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr
