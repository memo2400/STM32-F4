
F407_Can_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e1c  08004e1c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000002fc  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef3d  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fed  00000000  00000000  0002f054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00031048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000abc  00000000  00000000  00031e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021688  00000000  00000000  000328bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f85d  00000000  00000000  00053f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cde4d  00000000  00000000  000637a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f54  00000000  00000000  001315f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00135544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d64 	.word	0x08004d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08004d64 	.word	0x08004d64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t CanError [27] = "\nNo se pudo enviar mensaje\r";
//char serial_test [60] = {"h","o","l","a"} //,0xff, 0xfa, 0x98, 0xff};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
	{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, canRxData);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000578:	2100      	movs	r1, #0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f001 f8ec 	bl	8001758 <HAL_CAN_GetRxMessage>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000586:	f001 ffd0 	bl	800252a <HAL_GPIO_TogglePin>
					  canRxData[3],
					  canRxData[4],
					  canRxData[5],
					  canRxData[6],
					  canRxData[7]); */
	}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000238 	.word	0x20000238
 8000598:	20000204 	.word	0x20000204
 800059c:	40021000 	.word	0x40021000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b08f      	sub	sp, #60	; 0x3c
 80005a4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fd2d 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8fb 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fa39 	bl	8000a24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b2:	f000 fa0d 	bl	80009d0 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 80005b6:	f000 f95d 	bl	8000874 <MX_CAN2_Init>
  MX_TIM13_Init();
 80005ba:	f000 f9c1 	bl	8000940 <MX_TIM13_Init>
  MX_TIM14_Init();
 80005be:	f000 f9e3 	bl	8000988 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);  // segun yo 	 agregue
 80005c2:	4866      	ldr	r0, [pc, #408]	; (800075c <main+0x1bc>)
 80005c4:	f000 ff90 	bl	80014e8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING); // esta IT llama al callback
 80005c8:	2102      	movs	r1, #2
 80005ca:	4864      	ldr	r0, [pc, #400]	; (800075c <main+0x1bc>)
 80005cc:	f001 f9e6 	bl	800199c <HAL_CAN_ActivateNotification>
  HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 80005d0:	2204      	movs	r2, #4
 80005d2:	4963      	ldr	r1, [pc, #396]	; (8000760 <main+0x1c0>)
 80005d4:	4863      	ldr	r0, [pc, #396]	; (8000764 <main+0x1c4>)
 80005d6:	f002 ffa6 	bl	8003526 <HAL_UART_Receive_IT>

  //timmer
  HAL_TIM_Base_Start_IT(&htim13);
 80005da:	4863      	ldr	r0, [pc, #396]	; (8000768 <main+0x1c8>)
 80005dc:	f002 fc80 	bl	8002ee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14); // iniciamos el timer
 80005e0:	4862      	ldr	r0, [pc, #392]	; (800076c <main+0x1cc>)
 80005e2:	f002 fc7d 	bl	8002ee0 <HAL_TIM_Base_Start_IT>

  // Tiempo de debounce en milisegundos
  #define DEBOUNCE_TIME 50

  volatile uint8_t buttonPressed = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	73fb      	strb	r3, [r7, #15]
  uint32_t lastInterruptTime = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  canRxData [5] = 0xff;
  canRxData [6] = 0xff;
  canRxData [7] = 0xff;
  */

	HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	485f      	ldr	r0, [pc, #380]	; (8000770 <main+0x1d0>)
 80005f4:	f001 ff80 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	485c      	ldr	r0, [pc, #368]	; (8000770 <main+0x1d0>)
 80005fe:	f001 ff7b 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	485a      	ldr	r0, [pc, #360]	; (8000770 <main+0x1d0>)
 8000608:	f001 ff76 	bl	80024f8 <HAL_GPIO_WritePin>

  while (1)
  {
	  // trama de datos

	  canTxData [0] = 0x26;
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <main+0x1d4>)
 800060e:	2226      	movs	r2, #38	; 0x26
 8000610:	701a      	strb	r2, [r3, #0]
	  canTxData [1] = 0x5C;
 8000612:	4b58      	ldr	r3, [pc, #352]	; (8000774 <main+0x1d4>)
 8000614:	225c      	movs	r2, #92	; 0x5c
 8000616:	705a      	strb	r2, [r3, #1]
	  canTxData [2] = 0x03;
 8000618:	4b56      	ldr	r3, [pc, #344]	; (8000774 <main+0x1d4>)
 800061a:	2203      	movs	r2, #3
 800061c:	709a      	strb	r2, [r3, #2]
	  canTxData [3] = 0x00;
 800061e:	4b55      	ldr	r3, [pc, #340]	; (8000774 <main+0x1d4>)
 8000620:	2200      	movs	r2, #0
 8000622:	70da      	strb	r2, [r3, #3]
	  canTxData [4] = 0xff;
 8000624:	4b53      	ldr	r3, [pc, #332]	; (8000774 <main+0x1d4>)
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	711a      	strb	r2, [r3, #4]
	  canTxData [5] = 0xff;
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <main+0x1d4>)
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	715a      	strb	r2, [r3, #5]
	  canTxData [6] = 0xff;
 8000630:	4b50      	ldr	r3, [pc, #320]	; (8000774 <main+0x1d4>)
 8000632:	22ff      	movs	r2, #255	; 0xff
 8000634:	719a      	strb	r2, [r3, #6]
	  canTxData [7] = 0xff;
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <main+0x1d4>)
 8000638:	22ff      	movs	r2, #255	; 0xff
 800063a:	71da      	strb	r2, [r3, #7]

	  // Leds encendido apagado

	  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	484d      	ldr	r0, [pc, #308]	; (8000778 <main+0x1d8>)
 8000642:	f001 ff72 	bl	800252a <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  //Boton
	  if (HAL_GPIO_ReadPin(Boton_S2_GPIO_Port, Boton_S2_Pin))
 8000646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064a:	484b      	ldr	r0, [pc, #300]	; (8000778 <main+0x1d8>)
 800064c:	f001 ff3c 	bl	80024c8 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <main+0xc0>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4847      	ldr	r0, [pc, #284]	; (8000778 <main+0x1d8>)
 800065c:	f001 ff65 	bl	800252a <HAL_GPIO_TogglePin>


	  //USART
	  //HAL_UART_Transmit(&huart1, (char*)contartoggle, sizeof(contartoggle), 300);
	  //HAL_UART_Transmit(&huart1, serial, sizeof(serial), 300);
	  HAL_UART_Transmit(&huart1, (uint8_t*)0x98, 16, HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2210      	movs	r2, #16
 8000666:	2198      	movs	r1, #152	; 0x98
 8000668:	483e      	ldr	r0, [pc, #248]	; (8000764 <main+0x1c4>)
 800066a:	f002 fed1 	bl	8003410 <HAL_UART_Transmit>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien


	  //Enviar CAN Si funciono.

	  HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, canTxData, &canTxMailbox);
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <main+0x1dc>)
 8000670:	4a40      	ldr	r2, [pc, #256]	; (8000774 <main+0x1d4>)
 8000672:	4943      	ldr	r1, [pc, #268]	; (8000780 <main+0x1e0>)
 8000674:	4839      	ldr	r0, [pc, #228]	; (800075c <main+0x1bc>)
 8000676:	f000 ff7b 	bl	8001570 <HAL_CAN_AddTxMessage>


	  // Revisar si el conteo mensaje se envio
	  uint8_t ContarIntentoCan = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	75fb      	strb	r3, [r7, #23]
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 800067e:	e014      	b.n	80006aa <main+0x10a>
	  	  {
	  	  	  HAL_UART_Transmit (&huart1, canenviado, sizeof(canenviado), 300);
 8000680:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000684:	2212      	movs	r2, #18
 8000686:	493f      	ldr	r1, [pc, #252]	; (8000784 <main+0x1e4>)
 8000688:	4836      	ldr	r0, [pc, #216]	; (8000764 <main+0x1c4>)
 800068a:	f002 fec1 	bl	8003410 <HAL_UART_Transmit>
	  		  //HAL_Delay(300);

	  		  if (ContarIntentoCan == 3)
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d107      	bne.n	80006a4 <main+0x104>
	  		  {
	  			  HAL_UART_Transmit (&huart1, CanError, sizeof(CanError), 300);
 8000694:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000698:	221b      	movs	r2, #27
 800069a:	493b      	ldr	r1, [pc, #236]	; (8000788 <main+0x1e8>)
 800069c:	4831      	ldr	r0, [pc, #196]	; (8000764 <main+0x1c4>)
 800069e:	f002 feb7 	bl	8003410 <HAL_UART_Transmit>
	  			  break;
 80006a2:	e00b      	b.n	80006bc <main+0x11c>
	  		  }
	  		ContarIntentoCan++;
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	3301      	adds	r3, #1
 80006a8:	75fb      	strb	r3, [r7, #23]
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <main+0x1dc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	482a      	ldr	r0, [pc, #168]	; (800075c <main+0x1bc>)
 80006b2:	f001 f82d 	bl	8001710 <HAL_CAN_IsTxMessagePending>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1e1      	bne.n	8000680 <main+0xe0>
	  sprintf(BufferEnvio, "\n\n MSM CAN es: %X %X %X %X\r", canRxData[0],canRxData[1],canRxData[2],canRxData[3]); //%d convierte hex a Dec
	  HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien
	  */


	  sprintf(BufferEnvio, " El PGN Enviado: %lX ", canTxHeader.ExtId); //%d convierte hex a Dec
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <main+0x1e0>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4932      	ldr	r1, [pc, #200]	; (800078c <main+0x1ec>)
 80006c4:	4832      	ldr	r0, [pc, #200]	; (8000790 <main+0x1f0>)
 80006c6:	f003 fea9 	bl	800441c <siprintf>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);

	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <main+0x1f4>)
 80006cc:	685a      	ldr	r2, [r3, #4]
			  CanRxHeader.ExtId,
			  canRxData[0],
 80006ce:	4b32      	ldr	r3, [pc, #200]	; (8000798 <main+0x1f8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006d2:	469c      	mov	ip, r3
			  canRxData[1],
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <main+0x1f8>)
 80006d6:	785b      	ldrb	r3, [r3, #1]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006d8:	4619      	mov	r1, r3
			  canRxData[2],
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <main+0x1f8>)
 80006dc:	789b      	ldrb	r3, [r3, #2]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006de:	4618      	mov	r0, r3
			  canRxData[3],
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0x1f8>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006e4:	461c      	mov	r4, r3
			  canRxData[4],
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <main+0x1f8>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006ea:	461d      	mov	r5, r3
			  canRxData[5],
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <main+0x1f8>)
 80006ee:	795b      	ldrb	r3, [r3, #5]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006f0:	461e      	mov	r6, r3
			  canRxData[6],
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <main+0x1f8>)
 80006f4:	799b      	ldrb	r3, [r3, #6]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006f6:	607b      	str	r3, [r7, #4]
			  canRxData[7]);
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <main+0x1f8>)
 80006fa:	79db      	ldrb	r3, [r3, #7]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80006fc:	9306      	str	r3, [sp, #24]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	9305      	str	r3, [sp, #20]
 8000702:	9604      	str	r6, [sp, #16]
 8000704:	9503      	str	r5, [sp, #12]
 8000706:	9402      	str	r4, [sp, #8]
 8000708:	9001      	str	r0, [sp, #4]
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	4663      	mov	r3, ip
 800070e:	4923      	ldr	r1, [pc, #140]	; (800079c <main+0x1fc>)
 8000710:	481f      	ldr	r0, [pc, #124]	; (8000790 <main+0x1f0>)
 8000712:	f003 fe83 	bl	800441c <siprintf>

	  	  	  	  canRxData[0] = 0;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <main+0x1f8>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	  			  canRxData[1] = 0;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <main+0x1f8>)
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
	  			  canRxData[2] = 0;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <main+0x1f8>)
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
	  			  canRxData[3] = 0;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <main+0x1f8>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
	  			  canRxData[4] = 0;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <main+0x1f8>)
 8000730:	2200      	movs	r2, #0
 8000732:	711a      	strb	r2, [r3, #4]
	  			  canRxData[5] = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <main+0x1f8>)
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]
	  			  canRxData[6] = 0;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x1f8>)
 800073c:	2200      	movs	r2, #0
 800073e:	719a      	strb	r2, [r3, #6]
	  			  canRxData[7] = 0;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x1f8>)
 8000742:	2200      	movs	r2, #0
 8000744:	71da      	strb	r2, [r3, #7]

	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);



	  HAL_Delay(500);
 8000746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074a:	f000 fccd 	bl	80010e8 <HAL_Delay>
	  contartoggle ++;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0x200>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <main+0x200>)
 8000758:	701a      	strb	r2, [r3, #0]
  {
 800075a:	e757      	b.n	800060c <main+0x6c>
 800075c:	200000c0 	.word	0x200000c0
 8000760:	200001c0 	.word	0x200001c0
 8000764:	20000178 	.word	0x20000178
 8000768:	200000e8 	.word	0x200000e8
 800076c:	20000130 	.word	0x20000130
 8000770:	40020000 	.word	0x40020000
 8000774:	20000240 	.word	0x20000240
 8000778:	40021000 	.word	0x40021000
 800077c:	20000248 	.word	0x20000248
 8000780:	20000220 	.word	0x20000220
 8000784:	20000018 	.word	0x20000018
 8000788:	2000002c 	.word	0x2000002c
 800078c:	08004d7c 	.word	0x08004d7c
 8000790:	200001c8 	.word	0x200001c8
 8000794:	20000204 	.word	0x20000204
 8000798:	20000238 	.word	0x20000238
 800079c:	08004d94 	.word	0x08004d94
 80007a0:	200001c4 	.word	0x200001c4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 fe52 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xc8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <SystemClock_Config+0xc8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xc8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <SystemClock_Config+0xcc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <SystemClock_Config+0xcc>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemClock_Config+0xcc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000818:	2350      	movs	r3, #80	; 0x50
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f001 feb1 	bl	8002590 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 f9f8 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f002 f913 	bl	8002a80 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000860:	f000 f9e2 	bl	8000c28 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_CAN2_Init+0xbc>)
 800087c:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <MX_CAN2_Init+0xc0>)
 800087e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_CAN2_Init+0xbc>)
 8000882:	2210      	movs	r2, #16
 8000884:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_CAN2_Init+0xbc>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_CAN2_Init+0xbc>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_CAN2_Init+0xbc>)
 8000894:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000898:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_CAN2_Init+0xbc>)
 800089c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008a0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008c6:	481a      	ldr	r0, [pc, #104]	; (8000930 <MX_CAN2_Init+0xbc>)
 80008c8:	f000 fc32 	bl	8001130 <HAL_CAN_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80008d2:	f000 f9a9 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

    // ####### Trama de datos FULL HD
    canTxHeader.DLC = 0x08;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_CAN2_Init+0xc4>)
 80008d8:	2208      	movs	r2, #8
 80008da:	611a      	str	r2, [r3, #16]
    //canTxHeader.ExtId = 0x18fee000; //temp aceite
    canTxHeader.ExtId = 0x18fec100; // Odometro HR.
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_CAN2_Init+0xc4>)
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_CAN2_Init+0xc8>)
 80008e0:	605a      	str	r2, [r3, #4]
    canTxHeader.IDE = CAN_ID_EXT;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_CAN2_Init+0xc4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	609a      	str	r2, [r3, #8]
    canTxHeader.RTR = CAN_RTR_DATA;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_CAN2_Init+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
    //canTxHeader.StdId = 0x00; // lo comento
    canTxHeader.TransmitGlobalTime = DISABLE;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_CAN2_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	751a      	strb	r2, [r3, #20]

    // ####### Configutacion del filtro.
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  //  ver si es de can2
 80008f8:	230a      	movs	r3, #10
 80008fa:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //ver si este es para CAN2
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh =0;
 8000900:	2300      	movs	r3, #0
 8000902:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow =0x0000;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank =0; // ver si es de can2
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig); //asigno el filtro a la funcion.
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_CAN2_Init+0xbc>)
 8000922:	f000 fd01 	bl	8001328 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000c0 	.word	0x200000c0
 8000934:	40006800 	.word	0x40006800
 8000938:	20000220 	.word	0x20000220
 800093c:	18fec100 	.word	0x18fec100

08000940 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_TIM13_Init+0x40>)
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_TIM13_Init+0x44>)
 8000948:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_TIM13_Init+0x40>)
 800094c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000950:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_TIM13_Init+0x40>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_TIM13_Init+0x40>)
 800095a:	f242 7210 	movw	r2, #10000	; 0x2710
 800095e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_TIM13_Init+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_TIM13_Init+0x40>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_TIM13_Init+0x40>)
 800096e:	f002 fa67 	bl	8002e40 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000978:	f000 f956 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000e8 	.word	0x200000e8
 8000984:	40001c00 	.word	0x40001c00

08000988 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_TIM14_Init+0x40>)
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <MX_TIM14_Init+0x44>)
 8000990:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_TIM14_Init+0x40>)
 8000994:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000998:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_TIM14_Init+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_TIM14_Init+0x40>)
 80009a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009a6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_TIM14_Init+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_TIM14_Init+0x40>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_TIM14_Init+0x40>)
 80009b6:	f002 fa43 	bl	8002e40 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80009c0:	f000 f932 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000130 	.word	0x20000130
 80009cc:	40002000 	.word	0x40002000

080009d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a08:	f002 fcb2 	bl	8003370 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f909 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000178 	.word	0x20000178
 8000a20:	40011000 	.word	0x40011000

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a3a      	ldr	r2, [pc, #232]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_GPIO_Init+0x108>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A4_Pin|LED_A5_Pin|LED_A6_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2170      	movs	r1, #112	; 0x70
 8000a92:	4827      	ldr	r0, [pc, #156]	; (8000b30 <MX_GPIO_Init+0x10c>)
 8000a94:	f001 fd30 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a9e:	4825      	ldr	r0, [pc, #148]	; (8000b34 <MX_GPIO_Init+0x110>)
 8000aa0:	f001 fd2a 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_A4_Pin LED_A5_Pin LED_A6_Pin */
  GPIO_InitStruct.Pin = LED_A4_Pin|LED_A5_Pin|LED_A6_Pin;
 8000aa4:	2370      	movs	r3, #112	; 0x70
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481d      	ldr	r0, [pc, #116]	; (8000b30 <MX_GPIO_Init+0x10c>)
 8000abc:	f001 fb68 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_S1_IT_Pin */
  GPIO_InitStruct.Pin = Boton_S1_IT_Pin;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Boton_S1_IT_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4817      	ldr	r0, [pc, #92]	; (8000b34 <MX_GPIO_Init+0x110>)
 8000ad8:	f001 fb5a 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_S2_Pin Boton_S3_Pin */
  GPIO_InitStruct.Pin = Boton_S2_Pin|Boton_S3_Pin;
 8000adc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x110>)
 8000af2:	f001 fb4d 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000af6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <MX_GPIO_Init+0x110>)
 8000b10:	f001 fb3e 	bl	8002190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2101      	movs	r1, #1
 8000b18:	2028      	movs	r0, #40	; 0x28
 8000b1a:	f001 fa70 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f001 fa89 	bl	8002036 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Transmit (&huart1, InterrupcionUsart, sizeof(InterrupcionUsart), HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2215      	movs	r2, #21
 8000b46:	4906      	ldr	r1, [pc, #24]	; (8000b60 <HAL_UART_RxCpltCallback+0x28>)
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <HAL_UART_RxCpltCallback+0x2c>)
 8000b4a:	f002 fc61 	bl	8003410 <HAL_UART_Transmit>
	//HAL_UART_Receive_IT(&huart1, InterrupcionUsart, sizeof(InterrupcionUsart));
	HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4905      	ldr	r1, [pc, #20]	; (8000b68 <HAL_UART_RxCpltCallback+0x30>)
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <HAL_UART_RxCpltCallback+0x2c>)
 8000b54:	f002 fce7 	bl	8003526 <HAL_UART_Receive_IT>
	//UsartRxData

}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000178 	.word	0x20000178
 8000b68:	200001c0 	.word	0x200001c0

08000b6c <HAL_GPIO_EXTI_Callback>:

int contador_IT = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]



    if (GPIO_Pin == Boton_S1_IT_Pin)  // Asegurar que es el pin correcto
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7c:	d135      	bne.n	8000bea <HAL_GPIO_EXTI_Callback+0x7e>
    {
    	//HAL_GPIO_TogglePin(LED_A5_GPIO_Port, LED_A5_Pin);  // Ejemplo: Cambiar el estado de un LED
    	if (contador_IT == 1)
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x24>
    	{
    		HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b8c:	f001 fcb4 	bl	80024f8 <HAL_GPIO_WritePin>
    	}
    	if (contador_IT == 2)
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d104      	bne.n	8000ba2 <HAL_GPIO_EXTI_Callback+0x36>
    	{
    		HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4816      	ldr	r0, [pc, #88]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b9e:	f001 fcab 	bl	80024f8 <HAL_GPIO_WritePin>
    	}
    	if (contador_IT == 3)
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d104      	bne.n	8000bb4 <HAL_GPIO_EXTI_Callback+0x48>
    	{
    		HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bb0:	f001 fca2 	bl	80024f8 <HAL_GPIO_WritePin>
    	}
    	if (contador_IT >= 4)
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	dd11      	ble.n	8000be0 <HAL_GPIO_EXTI_Callback+0x74>
    	{
    		HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bc2:	f001 fc99 	bl	80024f8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bcc:	f001 fc94 	bl	80024f8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000bd6:	f001 fc8f 	bl	80024f8 <HAL_GPIO_WritePin>
    		contador_IT = 0;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
    	}
    	contador_IT++;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000be8:	6013      	str	r3, [r2, #0]
    }
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000024c 	.word	0x2000024c
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_TIM_PeriodElapsedCallback>:

/*
 * Interrupcion del timmer
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) // aqui le indicamos que usamos el timmer 1 para no revolver timers
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d104      	bne.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//HAL_GPIO_TogglePin(LedRojo_GPIO_Port, LedRojo_Pin);
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c14:	f001 fc89 	bl	800252a <HAL_GPIO_TogglePin>
	}
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40002000 	.word	0x40002000
 8000c24:	40021000 	.word	0x40021000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <HAL_CAN_MspInit+0xb0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d141      	bne.n	8000d2a <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_CAN_MspInit+0xb4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cfa:	2360      	movs	r3, #96	; 0x60
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d0a:	2309      	movs	r3, #9
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_CAN_MspInit+0xb8>)
 8000d16:	f001 fa3b 	bl	8002190 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2040      	movs	r0, #64	; 0x40
 8000d20:	f001 f96d 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d24:	2040      	movs	r0, #64	; 0x40
 8000d26:	f001 f986 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40006800 	.word	0x40006800
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_TIM_Base_MspInit+0x80>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d116      	bne.n	8000d80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	202c      	movs	r0, #44	; 0x2c
 8000d74:	f001 f943 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000d78:	202c      	movs	r0, #44	; 0x2c
 8000d7a:	f001 f95c 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000d7e:	e01a      	b.n	8000db6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_TIM_Base_MspInit+0x88>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d115      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	202d      	movs	r0, #45	; 0x2d
 8000dac:	f001 f927 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000db0:	202d      	movs	r0, #45	; 0x2d
 8000db2:	f001 f940 	bl	8002036 <HAL_NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40001c00 	.word	0x40001c00
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40002000 	.word	0x40002000

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d134      	bne.n	8000e58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_UART_MspInit+0x98>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_UART_MspInit+0x9c>)
 8000e44:	f001 f9a4 	bl	8002190 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2025      	movs	r0, #37	; 0x25
 8000e4e:	f001 f8d6 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e52:	2025      	movs	r0, #37	; 0x25
 8000e54:	f001 f8ef 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8f6 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <USART1_IRQHandler+0x10>)
 8000ec6:	f002 fb53 	bl	8003570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000178 	.word	0x20000178

08000ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Boton_S1_IT_Pin);
 8000ed8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000edc:	f001 fb40 	bl	8002560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000eea:	f002 f869 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000e8 	.word	0x200000e8

08000ef8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000efe:	f002 f85f 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000130 	.word	0x20000130

08000f0c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <CAN2_RX0_IRQHandler+0x10>)
 8000f12:	f000 fd69 	bl	80019e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000c0 	.word	0x200000c0

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f003 fa8c 	bl	800446c <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20020000 	.word	0x20020000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	20000250 	.word	0x20000250
 8000f88:	200003a0 	.word	0x200003a0

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fb4:	f7ff ffea 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	; (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f003 fa4b 	bl	8004478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fadd 	bl	80005a0 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000ff4:	08004e24 	.word	0x08004e24
  ldr r2, =_sbss
 8000ff8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000ffc:	200003a0 	.word	0x200003a0

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 ffdb 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f808 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fdfc 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fff3 	bl	8002052 <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 ffbb 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000048 	.word	0x20000048
 80010a0:	20000050 	.word	0x20000050
 80010a4:	2000004c 	.word	0x2000004c

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000050 	.word	0x20000050
 80010cc:	20000254 	.word	0x20000254

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000254 	.word	0x20000254

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000050 	.word	0x20000050

08001130 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0ed      	b.n	800131e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fd98 	bl	8000c84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001164:	f7ff ffb4 	bl	80010d0 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116a:	e012      	b.n	8001192 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800116c:	f7ff ffb0 	bl	80010d0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d90b      	bls.n	8001192 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2205      	movs	r2, #5
 800118a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0c5      	b.n	800131e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0e5      	beq.n	800116c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0202 	bic.w	r2, r2, #2
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b0:	f7ff ff8e 	bl	80010d0 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011b6:	e012      	b.n	80011de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011b8:	f7ff ff8a 	bl	80010d0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d90b      	bls.n	80011de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e09f      	b.n	800131e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e5      	bne.n	80011b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e1b      	ldrb	r3, [r3, #24]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e5b      	ldrb	r3, [r3, #25]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e9b      	ldrb	r3, [r3, #26]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0220 	bic.w	r2, r2, #32
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7edb      	ldrb	r3, [r3, #27]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0210 	bic.w	r2, r2, #16
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0210 	orr.w	r2, r2, #16
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7f1b      	ldrb	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0208 	orr.w	r2, r2, #8
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0208 	bic.w	r2, r2, #8
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7f5b      	ldrb	r3, [r3, #29]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0204 	orr.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0204 	bic.w	r2, r2, #4
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	ea42 0103 	orr.w	r1, r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <HAL_CAN_ConfigFilter+0x26>
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	2b02      	cmp	r3, #2
 800134a:	f040 80be 	bne.w	80014ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001350:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001368:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	2201      	movs	r2, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d123      	bne.n	80013f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3248      	adds	r2, #72	; 0x48
 80013d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013ee:	6979      	ldr	r1, [r7, #20]
 80013f0:	3348      	adds	r3, #72	; 0x48
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d122      	bne.n	8001446 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001420:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3248      	adds	r2, #72	; 0x48
 8001426:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	3348      	adds	r3, #72	; 0x48
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	440b      	add	r3, r1
 8001444:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	401a      	ands	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001460:	e007      	b.n	8001472 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	431a      	orrs	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	401a      	ands	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800148c:	e007      	b.n	800149e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	431a      	orrs	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014bc:	f023 0201 	bic.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e006      	b.n	80014d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40006400 	.word	0x40006400

080014e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d12e      	bne.n	800155a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fddc 	bl	80010d0 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800151a:	e012      	b.n	8001542 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800151c:	f7ff fdd8 	bl	80010d0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d90b      	bls.n	8001542 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2205      	movs	r2, #5
 800153a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e012      	b.n	8001568 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e5      	bne.n	800151c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e006      	b.n	8001568 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
  }
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d003      	beq.n	800159c <HAL_CAN_AddTxMessage+0x2c>
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	2b02      	cmp	r3, #2
 8001598:	f040 80ad 	bne.w	80016f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8095 	beq.w	80016e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	0e1b      	lsrs	r3, r3, #24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015c6:	2201      	movs	r2, #1
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	409a      	lsls	r2, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	6809      	ldr	r1, [r1, #0]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3318      	adds	r3, #24
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e00f      	b.n	8001614 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001608:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3318      	adds	r3, #24
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3318      	adds	r3, #24
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	440b      	add	r3, r1
 8001624:	3304      	adds	r3, #4
 8001626:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	7d1b      	ldrb	r3, [r3, #20]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d111      	bne.n	8001654 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3318      	adds	r3, #24
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6811      	ldr	r1, [r2, #0]
 8001644:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3318      	adds	r3, #24
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	440b      	add	r3, r1
 8001650:	3304      	adds	r3, #4
 8001652:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3307      	adds	r3, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	061a      	lsls	r2, r3, #24
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3306      	adds	r3, #6
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3305      	adds	r3, #5
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4313      	orrs	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	3204      	adds	r2, #4
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4610      	mov	r0, r2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	6811      	ldr	r1, [r2, #0]
 800167c:	ea43 0200 	orr.w	r2, r3, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800168a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3303      	adds	r3, #3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061a      	lsls	r2, r3, #24
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3302      	adds	r3, #2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3301      	adds	r3, #1
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4610      	mov	r0, r2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	ea43 0200 	orr.w	r2, r3, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3318      	adds	r3, #24
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	6811      	ldr	r1, [r2, #0]
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3318      	adds	r3, #24
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e00e      	b.n	8001704 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e006      	b.n	8001704 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	3724      	adds	r7, #36	; 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001724:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d002      	beq.n	8001732 <HAL_CAN_IsTxMessagePending+0x22>
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d10b      	bne.n	800174a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	401a      	ands	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	069b      	lsls	r3, r3, #26
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d003      	beq.n	800177c <HAL_CAN_GetRxMessage+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b02      	cmp	r3, #2
 8001778:	f040 8103 	bne.w	8001982 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d116      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0f7      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0e8      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	331b      	adds	r3, #27
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0204 	and.w	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	331b      	adds	r3, #27
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e00b      	b.n	800180e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0202 	and.w	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	331b      	adds	r3, #27
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2208      	movs	r2, #8
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	e00b      	b.n	800185c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	331b      	adds	r3, #27
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 020f 	and.w	r2, r3, #15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	331b      	adds	r3, #27
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	3304      	adds	r3, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b2da      	uxtb	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	331b      	adds	r3, #27
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	b29a      	uxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0a1a      	lsrs	r2, r3, #8
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e1a      	lsrs	r2, r3, #24
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3303      	adds	r3, #3
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	3304      	adds	r3, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0a1a      	lsrs	r2, r3, #8
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3305      	adds	r3, #5
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0c1a      	lsrs	r2, r3, #16
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3306      	adds	r3, #6
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0e1a      	lsrs	r2, r3, #24
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	3307      	adds	r3, #7
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d108      	bne.n	800196e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	e007      	b.n	800197e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0220 	orr.w	r2, r2, #32
 800197c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_ActivateNotification+0x1e>
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d109      	bne.n	80019ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6959      	ldr	r1, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e006      	b.n	80019dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
  }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d07c      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d023      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f983 	bl	8001d56 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a50:	e016      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	e00c      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	e002      	b.n	8001a80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f989 	bl	8001d92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f963 	bl	8001d6a <HAL_CAN_TxMailbox1CompleteCallback>
 8001aa4:	e016      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e00c      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	e002      	b.n	8001ad4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f969 	bl	8001da6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f943 	bl	8001d7e <HAL_CAN_TxMailbox2CompleteCallback>
 8001af8:	e016      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	e00c      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b20:	e002      	b.n	8001b28 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f949 	bl	8001dba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00b      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f930 	bl	8001dce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fcf0 	bl	800056c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2210      	movs	r2, #16
 8001bae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f912 	bl	8001df6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8f9 	bl	8001de2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8fc 	bl	8001e0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8f5 	bl	8001e1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d07b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d072      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d043      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03e      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb6:	2b60      	cmp	r3, #96	; 0x60
 8001cb8:	d02b      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x32a>
 8001cba:	2b60      	cmp	r3, #96	; 0x60
 8001cbc:	d82e      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cbe:	2b50      	cmp	r3, #80	; 0x50
 8001cc0:	d022      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x320>
 8001cc2:	2b50      	cmp	r3, #80	; 0x50
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cc6:	2b40      	cmp	r3, #64	; 0x40
 8001cc8:	d019      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x316>
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d826      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cce:	2b30      	cmp	r3, #48	; 0x30
 8001cd0:	d010      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x30c>
 8001cd2:	2b30      	cmp	r3, #48	; 0x30
 8001cd4:	d822      	bhi.n	8001d1c <HAL_CAN_IRQHandler+0x334>
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d002      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x2f8>
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d005      	beq.n	8001cea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cde:	e01d      	b.n	8001d1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f043 0308 	orr.w	r3, r3, #8
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce8:	e019      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf2:	e014      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfc:	e00f      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d06:	e00a      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d10:	e005      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1a:	e000      	b.n	8001d1e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2204      	movs	r2, #4
 8001d34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f872 	bl	8001e32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff29 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff3e 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff31 	bl	8001eac <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa2 	bl	8001fa4 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff f82a 	bl	80010d0 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d008      	beq.n	800209c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e052      	b.n	8002142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0216 	bic.w	r2, r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <HAL_DMA_Abort+0x62>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0208 	bic.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	e013      	b.n	8002116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ee:	f7fe ffef 	bl	80010d0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d90c      	bls.n	8002116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e015      	b.n	8002142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e4      	bne.n	80020ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d004      	beq.n	8002168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e00c      	b.n	8002182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e16b      	b.n	8002484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 815a 	bne.w	800247e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80b4 	beq.w	800247e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b60      	ldr	r3, [pc, #384]	; (800249c <HAL_GPIO_Init+0x30c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a5b      	ldr	r2, [pc, #364]	; (80024a0 <HAL_GPIO_Init+0x310>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x314>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d02b      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a51      	ldr	r2, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x318>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d025      	beq.n	80023b2 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x31c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_GPIO_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_GPIO_Init+0x21a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0x216>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_GPIO_Init+0x328>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00d      	beq.n	80023a2 <HAL_GPIO_Init+0x212>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_GPIO_Init+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0x20e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_GPIO_Init+0x330>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_GPIO_Init+0x20a>
 8002396:	2307      	movs	r3, #7
 8002398:	e00e      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239a:	2308      	movs	r3, #8
 800239c:	e00c      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 800239e:	2306      	movs	r3, #6
 80023a0:	e00a      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x228>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x310>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_GPIO_Init+0x334>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x334>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f ae90 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40021400 	.word	0x40021400
 80024bc:	40021800 	.word	0x40021800
 80024c0:	40021c00 	.word	0x40021c00
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43d9      	mvns	r1, r3
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	400b      	ands	r3, r1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe faf4 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e267      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d075      	beq.n	800269a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ae:	4b88      	ldr	r3, [pc, #544]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d112      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d2:	d10b      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <HAL_RCC_OscConfig+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d157      	bne.n	8002698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e242      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x74>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x98>
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xb0>
 8002628:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fd42 	bl	80010d0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fd3e 	bl	80010d0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e207      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xc0>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fd2e 	bl	80010d0 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002678:	f7fe fd2a 	bl	80010d0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1f3      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0xe8>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d063      	beq.n	800276e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1c7      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fce3 	bl	80010d0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fcdf 	bl	80010d0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1a8      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_RCC_OscConfig+0x244>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fcc2 	bl	80010d0 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fcbe 	bl	80010d0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e187      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fca2 	bl	80010d0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fc9e 	bl	80010d0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e167      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x200>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_OscConfig+0x248>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fc8b 	bl	80010d0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe fc87 	bl	80010d0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e150      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b77      	ldr	r3, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b74      	ldr	r3, [pc, #464]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe fc47 	bl	80010d0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe fc43 	bl	80010d0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e10c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x474>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x2ea>
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x30c>
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	4a5e      	ldr	r2, [pc, #376]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	; 0x70
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x324>
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a54      	ldr	r2, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fc08 	bl	80010d0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fc04 	bl	80010d0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0cb      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x334>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fe fbf2 	bl	80010d0 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fbee 	bl	80010d0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b5      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a1 	beq.w	8002a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d05c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d141      	bne.n	80029c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fbc2 	bl	80010d0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fbbe 	bl	80010d0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e087      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fb97 	bl	80010d0 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fb93 	bl	80010d0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e05c      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x416>
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_OscConfig+0x478>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fb80 	bl	80010d0 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fb7c 	bl	80010d0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e045      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_RCC_OscConfig+0x470>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x444>
 80029f2:	e03d      	b.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e038      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ec>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d028      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d121      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d11a      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d111      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	3b01      	subs	r3, #1
 8002a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0cc      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d90c      	bls.n	8002abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0b8      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	494d      	ldr	r1, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e07f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e067      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4934      	ldr	r1, [pc, #208]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fe faae 	bl	80010d0 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe faaa 	bl	80010d0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04f      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d20c      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e032      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4916      	ldr	r1, [pc, #88]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c06:	f000 f821 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fa0e 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08004dc8 	.word	0x08004dc8
 8002c44:	20000048 	.word	0x20000048
 8002c48:	2000004c 	.word	0x2000004c

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b090      	sub	sp, #64	; 0x40
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d00d      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x40>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	f200 80a1 	bhi.w	8002db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7e:	e09b      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c84:	e09b      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c8a:	e098      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c96:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d028      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	627a      	str	r2, [r7, #36]	; 0x24
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb8:	fb03 f201 	mul.w	r2, r3, r1
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	fb00 f303 	mul.w	r3, r0, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ccc:	460a      	mov	r2, r1
 8002cce:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	4413      	add	r3, r2
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	61fa      	str	r2, [r7, #28]
 8002cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce6:	f7fd fac3 	bl	8000270 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf2:	e053      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	617a      	str	r2, [r7, #20]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d06:	f04f 0b00 	mov.w	fp, #0
 8002d0a:	4652      	mov	r2, sl
 8002d0c:	465b      	mov	r3, fp
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	0159      	lsls	r1, r3, #5
 8002d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1c:	0150      	lsls	r0, r2, #5
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	ebb2 080a 	subs.w	r8, r2, sl
 8002d26:	eb63 090b 	sbc.w	r9, r3, fp
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d42:	eb63 0509 	sbc.w	r5, r3, r9
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	00eb      	lsls	r3, r5, #3
 8002d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d54:	00e2      	lsls	r2, r4, #3
 8002d56:	4614      	mov	r4, r2
 8002d58:	461d      	mov	r5, r3
 8002d5a:	eb14 030a 	adds.w	r3, r4, sl
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	eb45 030b 	adc.w	r3, r5, fp
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d72:	4629      	mov	r1, r5
 8002d74:	028b      	lsls	r3, r1, #10
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	028a      	lsls	r2, r1, #10
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	2200      	movs	r2, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d90:	f7fd fa6e 	bl	8000270 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	3301      	adds	r3, #1
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3740      	adds	r7, #64	; 0x40
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	017d7840 	.word	0x017d7840

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_GetHCLKFreq+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000048 	.word	0x20000048

08002df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08004dd8 	.word	0x08004dd8

08002e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e1c:	f7ff ffdc 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0b5b      	lsrs	r3, r3, #13
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4903      	ldr	r1, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08004dd8 	.word	0x08004dd8

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd ff6a 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f9b6 	bl	80031f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04e      	b.n	8002f96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d01d      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_TIM_Base_Start_IT+0xcc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d010      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	e007      	b.n	8002f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40001800 	.word	0x40001800

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8d2 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8c4 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8d5 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8ac 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f89e 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8af 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f886 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f878 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f889 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2208      	movs	r2, #8
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f860 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f852 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f863 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fd68 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f906 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f834 	bl	80031dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8d8 	bl	8003348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a46      	ldr	r2, [pc, #280]	; (800331c <TIM_Base_SetConfig+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a43      	ldr	r2, [pc, #268]	; (8003320 <TIM_Base_SetConfig+0x130>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a42      	ldr	r2, [pc, #264]	; (8003324 <TIM_Base_SetConfig+0x134>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a41      	ldr	r2, [pc, #260]	; (8003328 <TIM_Base_SetConfig+0x138>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a40      	ldr	r2, [pc, #256]	; (800332c <TIM_Base_SetConfig+0x13c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a35      	ldr	r2, [pc, #212]	; (800331c <TIM_Base_SetConfig+0x12c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d027      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a32      	ldr	r2, [pc, #200]	; (8003320 <TIM_Base_SetConfig+0x130>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d023      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a31      	ldr	r2, [pc, #196]	; (8003324 <TIM_Base_SetConfig+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a30      	ldr	r2, [pc, #192]	; (8003328 <TIM_Base_SetConfig+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <TIM_Base_SetConfig+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d017      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2e      	ldr	r2, [pc, #184]	; (8003330 <TIM_Base_SetConfig+0x140>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <TIM_Base_SetConfig+0x144>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2c      	ldr	r2, [pc, #176]	; (8003338 <TIM_Base_SetConfig+0x148>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2b      	ldr	r2, [pc, #172]	; (800333c <TIM_Base_SetConfig+0x14c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <TIM_Base_SetConfig+0x150>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0x154>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <TIM_Base_SetConfig+0x12c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0xf8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <TIM_Base_SetConfig+0x13c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]
  }
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40001800 	.word	0x40001800
 8003340:	40001c00 	.word	0x40001c00
 8003344:	40002000 	.word	0x40002000

08003348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fd18 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fdbd 	bl	8003f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b20      	cmp	r3, #32
 800342e:	d175      	bne.n	800351c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Transmit+0x2c>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2221      	movs	r2, #33	; 0x21
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344e:	f7fd fe3f 	bl	80010d0 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d108      	bne.n	800347c <HAL_UART_Transmit+0x6c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003484:	e02e      	b.n	80034e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fb1f 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03a      	b.n	800351e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e007      	b.n	80034d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1cb      	bne.n	8003486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2140      	movs	r1, #64	; 0x40
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 faeb 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	d112      	bne.n	8003566 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Receive_IT+0x26>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e00b      	b.n	8003568 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	461a      	mov	r2, r3
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fb12 	bl	8003b86 <UART_Start_Receive_IT>
 8003562:	4603      	mov	r3, r0
 8003564:	e000      	b.n	8003568 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0ba      	sub	sp, #232	; 0xe8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_UART_IRQHandler+0x66>
 80035c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fbf2 	bl	8003db8 <UART_Receive_IT>
      return;
 80035d4:	e25b      	b.n	8003a8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80de 	beq.w	800379c <HAL_UART_IRQHandler+0x22c>
 80035e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80d1 	beq.w	800379c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_UART_IRQHandler+0xae>
 8003606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_UART_IRQHandler+0xd2>
 800362a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_UART_IRQHandler+0xf6>
 800364e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0204 	orr.w	r2, r3, #4
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_UART_IRQHandler+0x126>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800367e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0208 	orr.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 81f2 	beq.w	8003a84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_UART_IRQHandler+0x14e>
 80036ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fb7d 	bl	8003db8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_UART_IRQHandler+0x17a>
 80036e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d04f      	beq.n	800378a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa85 	bl	8003bfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d141      	bne.n	8003782 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800372a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800372e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1d9      	bne.n	80036fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d013      	beq.n	800377a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	4a7e      	ldr	r2, [pc, #504]	; (8003950 <HAL_UART_IRQHandler+0x3e0>)
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fcf3 	bl	800214a <HAL_DMA_Abort_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d016      	beq.n	8003798 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003774:	4610      	mov	r0, r2
 8003776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00e      	b.n	8003798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f994 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00a      	b.n	8003798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f990 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e006      	b.n	8003798 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f98c 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003796:	e175      	b.n	8003a84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	bf00      	nop
    return;
 800379a:	e173      	b.n	8003a84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	f040 814f 	bne.w	8003a44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8148 	beq.w	8003a44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8141 	beq.w	8003a44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	f040 80b6 	bne.w	8003954 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8145 	beq.w	8003a88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003806:	429a      	cmp	r2, r3
 8003808:	f080 813e 	bcs.w	8003a88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003812:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381e:	f000 8088 	beq.w	8003932 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800384e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800385a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1d9      	bne.n	8003822 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800387e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800389a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e1      	bne.n	800386e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e3      	bne.n	80038aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003914:	65ba      	str	r2, [r7, #88]	; 0x58
 8003916:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800391a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e3      	bne.n	80038f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fb9c 	bl	800206a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	b29b      	uxth	r3, r3
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8b7 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394e:	e09b      	b.n	8003a88 <HAL_UART_IRQHandler+0x518>
 8003950:	08003cc1 	.word	0x08003cc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395c:	b29b      	uxth	r3, r3
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 808e 	beq.w	8003a8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8089 	beq.w	8003a8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003990:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800399e:	647a      	str	r2, [r7, #68]	; 0x44
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e3      	bne.n	800397a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	623b      	str	r3, [r7, #32]
   return(result);
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039d6:	633a      	str	r2, [r7, #48]	; 0x30
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e3      	bne.n	80039b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0310 	bic.w	r3, r3, #16
 8003a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a1c:	61fa      	str	r2, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	69b9      	ldr	r1, [r7, #24]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e3      	bne.n	80039f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f83d 	bl	8003abc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a42:	e023      	b.n	8003a8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_IRQHandler+0x4f4>
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f943 	bl	8003ce8 <UART_Transmit_IT>
    return;
 8003a62:	e014      	b.n	8003a8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <HAL_UART_IRQHandler+0x51e>
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f983 	bl	8003d88 <UART_EndTransmit_IT>
    return;
 8003a82:	e004      	b.n	8003a8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003a8c:	bf00      	nop
  }
}
 8003a8e:	37e8      	adds	r7, #232	; 0xe8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	e03b      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d037      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fd faef 	bl	80010d0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	6a3a      	ldr	r2, [r7, #32]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e03a      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d023      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d020      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d01d      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d116      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f857 	bl	8003bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2208      	movs	r2, #8
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00f      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d0b4      	beq.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2222      	movs	r2, #34	; 0x22
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0220 	orr.w	r2, r2, #32
 8003bea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b095      	sub	sp, #84	; 0x54
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c22:	643a      	str	r2, [r7, #64]	; 0x40
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e5      	bne.n	8003c02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d119      	bne.n	8003ca6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f023 0310 	bic.w	r3, r3, #16
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c92:	61ba      	str	r2, [r7, #24]
 8003c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cb4:	bf00      	nop
 8003cb6:	3754      	adds	r7, #84	; 0x54
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff fee4 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b21      	cmp	r3, #33	; 0x21
 8003cfa:	d13e      	bne.n	8003d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d114      	bne.n	8003d30 <UART_Transmit_IT+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d110      	bne.n	8003d30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]
 8003d2e:	e008      	b.n	8003d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6211      	str	r1, [r2, #32]
 8003d3a:	781a      	ldrb	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff fe73 	bl	8003a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	; 0x30
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b22      	cmp	r3, #34	; 0x22
 8003dca:	f040 80ae 	bne.w	8003f2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d117      	bne.n	8003e08 <UART_Receive_IT+0x50>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d113      	bne.n	8003e08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
 8003e06:	e026      	b.n	8003e56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d007      	beq.n	8003e2c <UART_Receive_IT+0x74>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <UART_Receive_IT+0x82>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e008      	b.n	8003e4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4619      	mov	r1, r3
 8003e64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d15d      	bne.n	8003f26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0220 	bic.w	r2, r2, #32
 8003e78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d135      	bne.n	8003f1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	623a      	str	r2, [r7, #32]
 8003ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	69f9      	ldr	r1, [r7, #28]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e5      	bne.n	8003eb6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d10a      	bne.n	8003f0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fdd1 	bl	8003abc <HAL_UARTEx_RxEventCallback>
 8003f1a:	e002      	b.n	8003f22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fc fe0b 	bl	8000b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e002      	b.n	8003f2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e000      	b.n	8003f2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3730      	adds	r7, #48	; 0x30
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b0c0      	sub	sp, #256	; 0x100
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	68d9      	ldr	r1, [r3, #12]
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	ea40 0301 	orr.w	r3, r0, r1
 8003f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f8c:	f021 010c 	bic.w	r1, r1, #12
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	6999      	ldr	r1, [r3, #24]
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	ea40 0301 	orr.w	r3, r0, r1
 8003fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b8f      	ldr	r3, [pc, #572]	; (8004200 <UART_SetConfig+0x2cc>)
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d005      	beq.n	8003fd4 <UART_SetConfig+0xa0>
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <UART_SetConfig+0x2d0>)
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d104      	bne.n	8003fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fd4:	f7fe ff20 	bl	8002e18 <HAL_RCC_GetPCLK2Freq>
 8003fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fdc:	e003      	b.n	8003fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fde:	f7fe ff07 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8003fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff0:	f040 810c 	bne.w	800420c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004006:	4622      	mov	r2, r4
 8004008:	462b      	mov	r3, r5
 800400a:	1891      	adds	r1, r2, r2
 800400c:	65b9      	str	r1, [r7, #88]	; 0x58
 800400e:	415b      	adcs	r3, r3
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004016:	4621      	mov	r1, r4
 8004018:	eb12 0801 	adds.w	r8, r2, r1
 800401c:	4629      	mov	r1, r5
 800401e:	eb43 0901 	adc.w	r9, r3, r1
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004036:	4690      	mov	r8, r2
 8004038:	4699      	mov	r9, r3
 800403a:	4623      	mov	r3, r4
 800403c:	eb18 0303 	adds.w	r3, r8, r3
 8004040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004044:	462b      	mov	r3, r5
 8004046:	eb49 0303 	adc.w	r3, r9, r3
 800404a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800405a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800405e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004062:	460b      	mov	r3, r1
 8004064:	18db      	adds	r3, r3, r3
 8004066:	653b      	str	r3, [r7, #80]	; 0x50
 8004068:	4613      	mov	r3, r2
 800406a:	eb42 0303 	adc.w	r3, r2, r3
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
 8004070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004078:	f7fc f8fa 	bl	8000270 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b61      	ldr	r3, [pc, #388]	; (8004208 <UART_SetConfig+0x2d4>)
 8004082:	fba3 2302 	umull	r2, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	011c      	lsls	r4, r3, #4
 800408a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040a4:	415b      	adcs	r3, r3
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040ac:	4641      	mov	r1, r8
 80040ae:	eb12 0a01 	adds.w	sl, r2, r1
 80040b2:	4649      	mov	r1, r9
 80040b4:	eb43 0b01 	adc.w	fp, r3, r1
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040cc:	4692      	mov	sl, r2
 80040ce:	469b      	mov	fp, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	eb1a 0303 	adds.w	r3, sl, r3
 80040d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040da:	464b      	mov	r3, r9
 80040dc:	eb4b 0303 	adc.w	r3, fp, r3
 80040e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040f8:	460b      	mov	r3, r1
 80040fa:	18db      	adds	r3, r3, r3
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
 80040fe:	4613      	mov	r3, r2
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	647b      	str	r3, [r7, #68]	; 0x44
 8004106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800410a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800410e:	f7fc f8af 	bl	8000270 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4611      	mov	r1, r2
 8004118:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <UART_SetConfig+0x2d4>)
 800411a:	fba3 2301 	umull	r2, r3, r3, r1
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2264      	movs	r2, #100	; 0x64
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	1acb      	subs	r3, r1, r3
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <UART_SetConfig+0x2d4>)
 8004130:	fba3 2302 	umull	r2, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800413c:	441c      	add	r4, r3
 800413e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004142:	2200      	movs	r2, #0
 8004144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800414c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004150:	4642      	mov	r2, r8
 8004152:	464b      	mov	r3, r9
 8004154:	1891      	adds	r1, r2, r2
 8004156:	63b9      	str	r1, [r7, #56]	; 0x38
 8004158:	415b      	adcs	r3, r3
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004160:	4641      	mov	r1, r8
 8004162:	1851      	adds	r1, r2, r1
 8004164:	6339      	str	r1, [r7, #48]	; 0x30
 8004166:	4649      	mov	r1, r9
 8004168:	414b      	adcs	r3, r1
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004178:	4659      	mov	r1, fp
 800417a:	00cb      	lsls	r3, r1, #3
 800417c:	4651      	mov	r1, sl
 800417e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004182:	4651      	mov	r1, sl
 8004184:	00ca      	lsls	r2, r1, #3
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	4603      	mov	r3, r0
 800418c:	4642      	mov	r2, r8
 800418e:	189b      	adds	r3, r3, r2
 8004190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004194:	464b      	mov	r3, r9
 8004196:	460a      	mov	r2, r1
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041b4:	460b      	mov	r3, r1
 80041b6:	18db      	adds	r3, r3, r3
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ba:	4613      	mov	r3, r2
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041ca:	f7fc f851 	bl	8000270 <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <UART_SetConfig+0x2d4>)
 80041d4:	fba3 1302 	umull	r1, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	2164      	movs	r1, #100	; 0x64
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3332      	adds	r3, #50	; 0x32
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <UART_SetConfig+0x2d4>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	f003 0207 	and.w	r2, r3, #7
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4422      	add	r2, r4
 80041fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041fc:	e106      	b.n	800440c <UART_SetConfig+0x4d8>
 80041fe:	bf00      	nop
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800420c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800421a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800421e:	4642      	mov	r2, r8
 8004220:	464b      	mov	r3, r9
 8004222:	1891      	adds	r1, r2, r2
 8004224:	6239      	str	r1, [r7, #32]
 8004226:	415b      	adcs	r3, r3
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800422e:	4641      	mov	r1, r8
 8004230:	1854      	adds	r4, r2, r1
 8004232:	4649      	mov	r1, r9
 8004234:	eb43 0501 	adc.w	r5, r3, r1
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	00eb      	lsls	r3, r5, #3
 8004242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004246:	00e2      	lsls	r2, r4, #3
 8004248:	4614      	mov	r4, r2
 800424a:	461d      	mov	r5, r3
 800424c:	4643      	mov	r3, r8
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004254:	464b      	mov	r3, r9
 8004256:	eb45 0303 	adc.w	r3, r5, r3
 800425a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800426a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800427a:	4629      	mov	r1, r5
 800427c:	008b      	lsls	r3, r1, #2
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004284:	4621      	mov	r1, r4
 8004286:	008a      	lsls	r2, r1, #2
 8004288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800428c:	f7fb fff0 	bl	8000270 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4b60      	ldr	r3, [pc, #384]	; (8004418 <UART_SetConfig+0x4e4>)
 8004296:	fba3 2302 	umull	r2, r3, r3, r2
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	011c      	lsls	r4, r3, #4
 800429e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	1891      	adds	r1, r2, r2
 80042b6:	61b9      	str	r1, [r7, #24]
 80042b8:	415b      	adcs	r3, r3
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c0:	4641      	mov	r1, r8
 80042c2:	1851      	adds	r1, r2, r1
 80042c4:	6139      	str	r1, [r7, #16]
 80042c6:	4649      	mov	r1, r9
 80042c8:	414b      	adcs	r3, r1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d8:	4659      	mov	r1, fp
 80042da:	00cb      	lsls	r3, r1, #3
 80042dc:	4651      	mov	r1, sl
 80042de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e2:	4651      	mov	r1, sl
 80042e4:	00ca      	lsls	r2, r1, #3
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	4642      	mov	r2, r8
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042f4:	464b      	mov	r3, r9
 80042f6:	460a      	mov	r2, r1
 80042f8:	eb42 0303 	adc.w	r3, r2, r3
 80042fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	67bb      	str	r3, [r7, #120]	; 0x78
 800430a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004318:	4649      	mov	r1, r9
 800431a:	008b      	lsls	r3, r1, #2
 800431c:	4641      	mov	r1, r8
 800431e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004322:	4641      	mov	r1, r8
 8004324:	008a      	lsls	r2, r1, #2
 8004326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800432a:	f7fb ffa1 	bl	8000270 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4611      	mov	r1, r2
 8004334:	4b38      	ldr	r3, [pc, #224]	; (8004418 <UART_SetConfig+0x4e4>)
 8004336:	fba3 2301 	umull	r2, r3, r3, r1
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2264      	movs	r2, #100	; 0x64
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	1acb      	subs	r3, r1, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a33      	ldr	r2, [pc, #204]	; (8004418 <UART_SetConfig+0x4e4>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	441c      	add	r4, r3
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	673b      	str	r3, [r7, #112]	; 0x70
 800435e:	677a      	str	r2, [r7, #116]	; 0x74
 8004360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004364:	4642      	mov	r2, r8
 8004366:	464b      	mov	r3, r9
 8004368:	1891      	adds	r1, r2, r2
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	415b      	adcs	r3, r3
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004374:	4641      	mov	r1, r8
 8004376:	1851      	adds	r1, r2, r1
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	4649      	mov	r1, r9
 800437c:	414b      	adcs	r3, r1
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800438c:	4659      	mov	r1, fp
 800438e:	00cb      	lsls	r3, r1, #3
 8004390:	4651      	mov	r1, sl
 8004392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004396:	4651      	mov	r1, sl
 8004398:	00ca      	lsls	r2, r1, #3
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	4642      	mov	r2, r8
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a6:	464b      	mov	r3, r9
 80043a8:	460a      	mov	r2, r1
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ba:	667a      	str	r2, [r7, #100]	; 0x64
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043c8:	4649      	mov	r1, r9
 80043ca:	008b      	lsls	r3, r1, #2
 80043cc:	4641      	mov	r1, r8
 80043ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d2:	4641      	mov	r1, r8
 80043d4:	008a      	lsls	r2, r1, #2
 80043d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043da:	f7fb ff49 	bl	8000270 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <UART_SetConfig+0x4e4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	; 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <UART_SetConfig+0x4e4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004412:	46bd      	mov	sp, r7
 8004414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004418:	51eb851f 	.word	0x51eb851f

0800441c <siprintf>:
 800441c:	b40e      	push	{r1, r2, r3}
 800441e:	b500      	push	{lr}
 8004420:	b09c      	sub	sp, #112	; 0x70
 8004422:	ab1d      	add	r3, sp, #116	; 0x74
 8004424:	9002      	str	r0, [sp, #8]
 8004426:	9006      	str	r0, [sp, #24]
 8004428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800442c:	4809      	ldr	r0, [pc, #36]	; (8004454 <siprintf+0x38>)
 800442e:	9107      	str	r1, [sp, #28]
 8004430:	9104      	str	r1, [sp, #16]
 8004432:	4909      	ldr	r1, [pc, #36]	; (8004458 <siprintf+0x3c>)
 8004434:	f853 2b04 	ldr.w	r2, [r3], #4
 8004438:	9105      	str	r1, [sp, #20]
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	a902      	add	r1, sp, #8
 8004440:	f000 f992 	bl	8004768 <_svfiprintf_r>
 8004444:	9b02      	ldr	r3, [sp, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	b01c      	add	sp, #112	; 0x70
 800444c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004450:	b003      	add	sp, #12
 8004452:	4770      	bx	lr
 8004454:	200000a0 	.word	0x200000a0
 8004458:	ffff0208 	.word	0xffff0208

0800445c <memset>:
 800445c:	4402      	add	r2, r0
 800445e:	4603      	mov	r3, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	f803 1b01 	strb.w	r1, [r3], #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <__errno>:
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <__errno+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	200000a0 	.word	0x200000a0

08004478 <__libc_init_array>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4d0d      	ldr	r5, [pc, #52]	; (80044b0 <__libc_init_array+0x38>)
 800447c:	4c0d      	ldr	r4, [pc, #52]	; (80044b4 <__libc_init_array+0x3c>)
 800447e:	1b64      	subs	r4, r4, r5
 8004480:	10a4      	asrs	r4, r4, #2
 8004482:	2600      	movs	r6, #0
 8004484:	42a6      	cmp	r6, r4
 8004486:	d109      	bne.n	800449c <__libc_init_array+0x24>
 8004488:	4d0b      	ldr	r5, [pc, #44]	; (80044b8 <__libc_init_array+0x40>)
 800448a:	4c0c      	ldr	r4, [pc, #48]	; (80044bc <__libc_init_array+0x44>)
 800448c:	f000 fc6a 	bl	8004d64 <_init>
 8004490:	1b64      	subs	r4, r4, r5
 8004492:	10a4      	asrs	r4, r4, #2
 8004494:	2600      	movs	r6, #0
 8004496:	42a6      	cmp	r6, r4
 8004498:	d105      	bne.n	80044a6 <__libc_init_array+0x2e>
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a0:	4798      	blx	r3
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7ee      	b.n	8004484 <__libc_init_array+0xc>
 80044a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044aa:	4798      	blx	r3
 80044ac:	3601      	adds	r6, #1
 80044ae:	e7f2      	b.n	8004496 <__libc_init_array+0x1e>
 80044b0:	08004e1c 	.word	0x08004e1c
 80044b4:	08004e1c 	.word	0x08004e1c
 80044b8:	08004e1c 	.word	0x08004e1c
 80044bc:	08004e20 	.word	0x08004e20

080044c0 <__retarget_lock_acquire_recursive>:
 80044c0:	4770      	bx	lr

080044c2 <__retarget_lock_release_recursive>:
 80044c2:	4770      	bx	lr

080044c4 <_free_r>:
 80044c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044c6:	2900      	cmp	r1, #0
 80044c8:	d044      	beq.n	8004554 <_free_r+0x90>
 80044ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ce:	9001      	str	r0, [sp, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f1a1 0404 	sub.w	r4, r1, #4
 80044d6:	bfb8      	it	lt
 80044d8:	18e4      	addlt	r4, r4, r3
 80044da:	f000 f8df 	bl	800469c <__malloc_lock>
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <_free_r+0x94>)
 80044e0:	9801      	ldr	r0, [sp, #4]
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	b933      	cbnz	r3, 80044f4 <_free_r+0x30>
 80044e6:	6063      	str	r3, [r4, #4]
 80044e8:	6014      	str	r4, [r2, #0]
 80044ea:	b003      	add	sp, #12
 80044ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f0:	f000 b8da 	b.w	80046a8 <__malloc_unlock>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d908      	bls.n	800450a <_free_r+0x46>
 80044f8:	6825      	ldr	r5, [r4, #0]
 80044fa:	1961      	adds	r1, r4, r5
 80044fc:	428b      	cmp	r3, r1
 80044fe:	bf01      	itttt	eq
 8004500:	6819      	ldreq	r1, [r3, #0]
 8004502:	685b      	ldreq	r3, [r3, #4]
 8004504:	1949      	addeq	r1, r1, r5
 8004506:	6021      	streq	r1, [r4, #0]
 8004508:	e7ed      	b.n	80044e6 <_free_r+0x22>
 800450a:	461a      	mov	r2, r3
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b10b      	cbz	r3, 8004514 <_free_r+0x50>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d9fa      	bls.n	800450a <_free_r+0x46>
 8004514:	6811      	ldr	r1, [r2, #0]
 8004516:	1855      	adds	r5, r2, r1
 8004518:	42a5      	cmp	r5, r4
 800451a:	d10b      	bne.n	8004534 <_free_r+0x70>
 800451c:	6824      	ldr	r4, [r4, #0]
 800451e:	4421      	add	r1, r4
 8004520:	1854      	adds	r4, r2, r1
 8004522:	42a3      	cmp	r3, r4
 8004524:	6011      	str	r1, [r2, #0]
 8004526:	d1e0      	bne.n	80044ea <_free_r+0x26>
 8004528:	681c      	ldr	r4, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	440c      	add	r4, r1
 8004530:	6014      	str	r4, [r2, #0]
 8004532:	e7da      	b.n	80044ea <_free_r+0x26>
 8004534:	d902      	bls.n	800453c <_free_r+0x78>
 8004536:	230c      	movs	r3, #12
 8004538:	6003      	str	r3, [r0, #0]
 800453a:	e7d6      	b.n	80044ea <_free_r+0x26>
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	1961      	adds	r1, r4, r5
 8004540:	428b      	cmp	r3, r1
 8004542:	bf04      	itt	eq
 8004544:	6819      	ldreq	r1, [r3, #0]
 8004546:	685b      	ldreq	r3, [r3, #4]
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	bf04      	itt	eq
 800454c:	1949      	addeq	r1, r1, r5
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	6054      	str	r4, [r2, #4]
 8004552:	e7ca      	b.n	80044ea <_free_r+0x26>
 8004554:	b003      	add	sp, #12
 8004556:	bd30      	pop	{r4, r5, pc}
 8004558:	20000398 	.word	0x20000398

0800455c <sbrk_aligned>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	4e0e      	ldr	r6, [pc, #56]	; (8004598 <sbrk_aligned+0x3c>)
 8004560:	460c      	mov	r4, r1
 8004562:	6831      	ldr	r1, [r6, #0]
 8004564:	4605      	mov	r5, r0
 8004566:	b911      	cbnz	r1, 800456e <sbrk_aligned+0x12>
 8004568:	f000 fba6 	bl	8004cb8 <_sbrk_r>
 800456c:	6030      	str	r0, [r6, #0]
 800456e:	4621      	mov	r1, r4
 8004570:	4628      	mov	r0, r5
 8004572:	f000 fba1 	bl	8004cb8 <_sbrk_r>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	d00a      	beq.n	8004590 <sbrk_aligned+0x34>
 800457a:	1cc4      	adds	r4, r0, #3
 800457c:	f024 0403 	bic.w	r4, r4, #3
 8004580:	42a0      	cmp	r0, r4
 8004582:	d007      	beq.n	8004594 <sbrk_aligned+0x38>
 8004584:	1a21      	subs	r1, r4, r0
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fb96 	bl	8004cb8 <_sbrk_r>
 800458c:	3001      	adds	r0, #1
 800458e:	d101      	bne.n	8004594 <sbrk_aligned+0x38>
 8004590:	f04f 34ff 	mov.w	r4, #4294967295
 8004594:	4620      	mov	r0, r4
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	2000039c 	.word	0x2000039c

0800459c <_malloc_r>:
 800459c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a0:	1ccd      	adds	r5, r1, #3
 80045a2:	f025 0503 	bic.w	r5, r5, #3
 80045a6:	3508      	adds	r5, #8
 80045a8:	2d0c      	cmp	r5, #12
 80045aa:	bf38      	it	cc
 80045ac:	250c      	movcc	r5, #12
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	4607      	mov	r7, r0
 80045b2:	db01      	blt.n	80045b8 <_malloc_r+0x1c>
 80045b4:	42a9      	cmp	r1, r5
 80045b6:	d905      	bls.n	80045c4 <_malloc_r+0x28>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	2600      	movs	r6, #0
 80045be:	4630      	mov	r0, r6
 80045c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004698 <_malloc_r+0xfc>
 80045c8:	f000 f868 	bl	800469c <__malloc_lock>
 80045cc:	f8d8 3000 	ldr.w	r3, [r8]
 80045d0:	461c      	mov	r4, r3
 80045d2:	bb5c      	cbnz	r4, 800462c <_malloc_r+0x90>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ffc0 	bl	800455c <sbrk_aligned>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	4604      	mov	r4, r0
 80045e0:	d155      	bne.n	800468e <_malloc_r+0xf2>
 80045e2:	f8d8 4000 	ldr.w	r4, [r8]
 80045e6:	4626      	mov	r6, r4
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	d145      	bne.n	8004678 <_malloc_r+0xdc>
 80045ec:	2c00      	cmp	r4, #0
 80045ee:	d048      	beq.n	8004682 <_malloc_r+0xe6>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	4631      	mov	r1, r6
 80045f4:	4638      	mov	r0, r7
 80045f6:	eb04 0903 	add.w	r9, r4, r3
 80045fa:	f000 fb5d 	bl	8004cb8 <_sbrk_r>
 80045fe:	4581      	cmp	r9, r0
 8004600:	d13f      	bne.n	8004682 <_malloc_r+0xe6>
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	1a6d      	subs	r5, r5, r1
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ffa7 	bl	800455c <sbrk_aligned>
 800460e:	3001      	adds	r0, #1
 8004610:	d037      	beq.n	8004682 <_malloc_r+0xe6>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	442b      	add	r3, r5
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	f8d8 3000 	ldr.w	r3, [r8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d038      	beq.n	8004692 <_malloc_r+0xf6>
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	42a2      	cmp	r2, r4
 8004624:	d12b      	bne.n	800467e <_malloc_r+0xe2>
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	e00f      	b.n	800464c <_malloc_r+0xb0>
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	1b52      	subs	r2, r2, r5
 8004630:	d41f      	bmi.n	8004672 <_malloc_r+0xd6>
 8004632:	2a0b      	cmp	r2, #11
 8004634:	d917      	bls.n	8004666 <_malloc_r+0xca>
 8004636:	1961      	adds	r1, r4, r5
 8004638:	42a3      	cmp	r3, r4
 800463a:	6025      	str	r5, [r4, #0]
 800463c:	bf18      	it	ne
 800463e:	6059      	strne	r1, [r3, #4]
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	bf08      	it	eq
 8004644:	f8c8 1000 	streq.w	r1, [r8]
 8004648:	5162      	str	r2, [r4, r5]
 800464a:	604b      	str	r3, [r1, #4]
 800464c:	4638      	mov	r0, r7
 800464e:	f104 060b 	add.w	r6, r4, #11
 8004652:	f000 f829 	bl	80046a8 <__malloc_unlock>
 8004656:	f026 0607 	bic.w	r6, r6, #7
 800465a:	1d23      	adds	r3, r4, #4
 800465c:	1af2      	subs	r2, r6, r3
 800465e:	d0ae      	beq.n	80045be <_malloc_r+0x22>
 8004660:	1b9b      	subs	r3, r3, r6
 8004662:	50a3      	str	r3, [r4, r2]
 8004664:	e7ab      	b.n	80045be <_malloc_r+0x22>
 8004666:	42a3      	cmp	r3, r4
 8004668:	6862      	ldr	r2, [r4, #4]
 800466a:	d1dd      	bne.n	8004628 <_malloc_r+0x8c>
 800466c:	f8c8 2000 	str.w	r2, [r8]
 8004670:	e7ec      	b.n	800464c <_malloc_r+0xb0>
 8004672:	4623      	mov	r3, r4
 8004674:	6864      	ldr	r4, [r4, #4]
 8004676:	e7ac      	b.n	80045d2 <_malloc_r+0x36>
 8004678:	4634      	mov	r4, r6
 800467a:	6876      	ldr	r6, [r6, #4]
 800467c:	e7b4      	b.n	80045e8 <_malloc_r+0x4c>
 800467e:	4613      	mov	r3, r2
 8004680:	e7cc      	b.n	800461c <_malloc_r+0x80>
 8004682:	230c      	movs	r3, #12
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4638      	mov	r0, r7
 8004688:	f000 f80e 	bl	80046a8 <__malloc_unlock>
 800468c:	e797      	b.n	80045be <_malloc_r+0x22>
 800468e:	6025      	str	r5, [r4, #0]
 8004690:	e7dc      	b.n	800464c <_malloc_r+0xb0>
 8004692:	605b      	str	r3, [r3, #4]
 8004694:	deff      	udf	#255	; 0xff
 8004696:	bf00      	nop
 8004698:	20000398 	.word	0x20000398

0800469c <__malloc_lock>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__malloc_lock+0x8>)
 800469e:	f7ff bf0f 	b.w	80044c0 <__retarget_lock_acquire_recursive>
 80046a2:	bf00      	nop
 80046a4:	20000394 	.word	0x20000394

080046a8 <__malloc_unlock>:
 80046a8:	4801      	ldr	r0, [pc, #4]	; (80046b0 <__malloc_unlock+0x8>)
 80046aa:	f7ff bf0a 	b.w	80044c2 <__retarget_lock_release_recursive>
 80046ae:	bf00      	nop
 80046b0:	20000394 	.word	0x20000394

080046b4 <__ssputs_r>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	461f      	mov	r7, r3
 80046bc:	42be      	cmp	r6, r7
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	4682      	mov	sl, r0
 80046c2:	460c      	mov	r4, r1
 80046c4:	4690      	mov	r8, r2
 80046c6:	d82c      	bhi.n	8004722 <__ssputs_r+0x6e>
 80046c8:	898a      	ldrh	r2, [r1, #12]
 80046ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ce:	d026      	beq.n	800471e <__ssputs_r+0x6a>
 80046d0:	6965      	ldr	r5, [r4, #20]
 80046d2:	6909      	ldr	r1, [r1, #16]
 80046d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046d8:	eba3 0901 	sub.w	r9, r3, r1
 80046dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e0:	1c7b      	adds	r3, r7, #1
 80046e2:	444b      	add	r3, r9
 80046e4:	106d      	asrs	r5, r5, #1
 80046e6:	429d      	cmp	r5, r3
 80046e8:	bf38      	it	cc
 80046ea:	461d      	movcc	r5, r3
 80046ec:	0553      	lsls	r3, r2, #21
 80046ee:	d527      	bpl.n	8004740 <__ssputs_r+0x8c>
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7ff ff53 	bl	800459c <_malloc_r>
 80046f6:	4606      	mov	r6, r0
 80046f8:	b360      	cbz	r0, 8004754 <__ssputs_r+0xa0>
 80046fa:	6921      	ldr	r1, [r4, #16]
 80046fc:	464a      	mov	r2, r9
 80046fe:	f000 faeb 	bl	8004cd8 <memcpy>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	6126      	str	r6, [r4, #16]
 8004710:	6165      	str	r5, [r4, #20]
 8004712:	444e      	add	r6, r9
 8004714:	eba5 0509 	sub.w	r5, r5, r9
 8004718:	6026      	str	r6, [r4, #0]
 800471a:	60a5      	str	r5, [r4, #8]
 800471c:	463e      	mov	r6, r7
 800471e:	42be      	cmp	r6, r7
 8004720:	d900      	bls.n	8004724 <__ssputs_r+0x70>
 8004722:	463e      	mov	r6, r7
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	4632      	mov	r2, r6
 8004728:	4641      	mov	r1, r8
 800472a:	f000 faab 	bl	8004c84 <memmove>
 800472e:	68a3      	ldr	r3, [r4, #8]
 8004730:	1b9b      	subs	r3, r3, r6
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	4433      	add	r3, r6
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2000      	movs	r0, #0
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	462a      	mov	r2, r5
 8004742:	f000 fad7 	bl	8004cf4 <_realloc_r>
 8004746:	4606      	mov	r6, r0
 8004748:	2800      	cmp	r0, #0
 800474a:	d1e0      	bne.n	800470e <__ssputs_r+0x5a>
 800474c:	6921      	ldr	r1, [r4, #16]
 800474e:	4650      	mov	r0, sl
 8004750:	f7ff feb8 	bl	80044c4 <_free_r>
 8004754:	230c      	movs	r3, #12
 8004756:	f8ca 3000 	str.w	r3, [sl]
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	e7e9      	b.n	800473c <__ssputs_r+0x88>

08004768 <_svfiprintf_r>:
 8004768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	4698      	mov	r8, r3
 800476e:	898b      	ldrh	r3, [r1, #12]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	b09d      	sub	sp, #116	; 0x74
 8004774:	4607      	mov	r7, r0
 8004776:	460d      	mov	r5, r1
 8004778:	4614      	mov	r4, r2
 800477a:	d50e      	bpl.n	800479a <_svfiprintf_r+0x32>
 800477c:	690b      	ldr	r3, [r1, #16]
 800477e:	b963      	cbnz	r3, 800479a <_svfiprintf_r+0x32>
 8004780:	2140      	movs	r1, #64	; 0x40
 8004782:	f7ff ff0b 	bl	800459c <_malloc_r>
 8004786:	6028      	str	r0, [r5, #0]
 8004788:	6128      	str	r0, [r5, #16]
 800478a:	b920      	cbnz	r0, 8004796 <_svfiprintf_r+0x2e>
 800478c:	230c      	movs	r3, #12
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	e0d0      	b.n	8004938 <_svfiprintf_r+0x1d0>
 8004796:	2340      	movs	r3, #64	; 0x40
 8004798:	616b      	str	r3, [r5, #20]
 800479a:	2300      	movs	r3, #0
 800479c:	9309      	str	r3, [sp, #36]	; 0x24
 800479e:	2320      	movs	r3, #32
 80047a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a8:	2330      	movs	r3, #48	; 0x30
 80047aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004950 <_svfiprintf_r+0x1e8>
 80047ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b2:	f04f 0901 	mov.w	r9, #1
 80047b6:	4623      	mov	r3, r4
 80047b8:	469a      	mov	sl, r3
 80047ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047be:	b10a      	cbz	r2, 80047c4 <_svfiprintf_r+0x5c>
 80047c0:	2a25      	cmp	r2, #37	; 0x25
 80047c2:	d1f9      	bne.n	80047b8 <_svfiprintf_r+0x50>
 80047c4:	ebba 0b04 	subs.w	fp, sl, r4
 80047c8:	d00b      	beq.n	80047e2 <_svfiprintf_r+0x7a>
 80047ca:	465b      	mov	r3, fp
 80047cc:	4622      	mov	r2, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	4638      	mov	r0, r7
 80047d2:	f7ff ff6f 	bl	80046b4 <__ssputs_r>
 80047d6:	3001      	adds	r0, #1
 80047d8:	f000 80a9 	beq.w	800492e <_svfiprintf_r+0x1c6>
 80047dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047de:	445a      	add	r2, fp
 80047e0:	9209      	str	r2, [sp, #36]	; 0x24
 80047e2:	f89a 3000 	ldrb.w	r3, [sl]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80a1 	beq.w	800492e <_svfiprintf_r+0x1c6>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f04f 32ff 	mov.w	r2, #4294967295
 80047f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f6:	f10a 0a01 	add.w	sl, sl, #1
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	9307      	str	r3, [sp, #28]
 80047fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004802:	931a      	str	r3, [sp, #104]	; 0x68
 8004804:	4654      	mov	r4, sl
 8004806:	2205      	movs	r2, #5
 8004808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480c:	4850      	ldr	r0, [pc, #320]	; (8004950 <_svfiprintf_r+0x1e8>)
 800480e:	f7fb fcdf 	bl	80001d0 <memchr>
 8004812:	9a04      	ldr	r2, [sp, #16]
 8004814:	b9d8      	cbnz	r0, 800484e <_svfiprintf_r+0xe6>
 8004816:	06d0      	lsls	r0, r2, #27
 8004818:	bf44      	itt	mi
 800481a:	2320      	movmi	r3, #32
 800481c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004820:	0711      	lsls	r1, r2, #28
 8004822:	bf44      	itt	mi
 8004824:	232b      	movmi	r3, #43	; 0x2b
 8004826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800482a:	f89a 3000 	ldrb.w	r3, [sl]
 800482e:	2b2a      	cmp	r3, #42	; 0x2a
 8004830:	d015      	beq.n	800485e <_svfiprintf_r+0xf6>
 8004832:	9a07      	ldr	r2, [sp, #28]
 8004834:	4654      	mov	r4, sl
 8004836:	2000      	movs	r0, #0
 8004838:	f04f 0c0a 	mov.w	ip, #10
 800483c:	4621      	mov	r1, r4
 800483e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004842:	3b30      	subs	r3, #48	; 0x30
 8004844:	2b09      	cmp	r3, #9
 8004846:	d94d      	bls.n	80048e4 <_svfiprintf_r+0x17c>
 8004848:	b1b0      	cbz	r0, 8004878 <_svfiprintf_r+0x110>
 800484a:	9207      	str	r2, [sp, #28]
 800484c:	e014      	b.n	8004878 <_svfiprintf_r+0x110>
 800484e:	eba0 0308 	sub.w	r3, r0, r8
 8004852:	fa09 f303 	lsl.w	r3, r9, r3
 8004856:	4313      	orrs	r3, r2
 8004858:	9304      	str	r3, [sp, #16]
 800485a:	46a2      	mov	sl, r4
 800485c:	e7d2      	b.n	8004804 <_svfiprintf_r+0x9c>
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	1d19      	adds	r1, r3, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	9103      	str	r1, [sp, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	bfbb      	ittet	lt
 800486a:	425b      	neglt	r3, r3
 800486c:	f042 0202 	orrlt.w	r2, r2, #2
 8004870:	9307      	strge	r3, [sp, #28]
 8004872:	9307      	strlt	r3, [sp, #28]
 8004874:	bfb8      	it	lt
 8004876:	9204      	strlt	r2, [sp, #16]
 8004878:	7823      	ldrb	r3, [r4, #0]
 800487a:	2b2e      	cmp	r3, #46	; 0x2e
 800487c:	d10c      	bne.n	8004898 <_svfiprintf_r+0x130>
 800487e:	7863      	ldrb	r3, [r4, #1]
 8004880:	2b2a      	cmp	r3, #42	; 0x2a
 8004882:	d134      	bne.n	80048ee <_svfiprintf_r+0x186>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	9203      	str	r2, [sp, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	bfb8      	it	lt
 8004890:	f04f 33ff 	movlt.w	r3, #4294967295
 8004894:	3402      	adds	r4, #2
 8004896:	9305      	str	r3, [sp, #20]
 8004898:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004960 <_svfiprintf_r+0x1f8>
 800489c:	7821      	ldrb	r1, [r4, #0]
 800489e:	2203      	movs	r2, #3
 80048a0:	4650      	mov	r0, sl
 80048a2:	f7fb fc95 	bl	80001d0 <memchr>
 80048a6:	b138      	cbz	r0, 80048b8 <_svfiprintf_r+0x150>
 80048a8:	9b04      	ldr	r3, [sp, #16]
 80048aa:	eba0 000a 	sub.w	r0, r0, sl
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	4082      	lsls	r2, r0
 80048b2:	4313      	orrs	r3, r2
 80048b4:	3401      	adds	r4, #1
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048bc:	4825      	ldr	r0, [pc, #148]	; (8004954 <_svfiprintf_r+0x1ec>)
 80048be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c2:	2206      	movs	r2, #6
 80048c4:	f7fb fc84 	bl	80001d0 <memchr>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d038      	beq.n	800493e <_svfiprintf_r+0x1d6>
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <_svfiprintf_r+0x1f0>)
 80048ce:	bb1b      	cbnz	r3, 8004918 <_svfiprintf_r+0x1b0>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	3307      	adds	r3, #7
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	3308      	adds	r3, #8
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	4433      	add	r3, r6
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	e768      	b.n	80047b6 <_svfiprintf_r+0x4e>
 80048e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048e8:	460c      	mov	r4, r1
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7a6      	b.n	800483c <_svfiprintf_r+0xd4>
 80048ee:	2300      	movs	r3, #0
 80048f0:	3401      	adds	r4, #1
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0c0a 	mov.w	ip, #10
 80048fa:	4620      	mov	r0, r4
 80048fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004900:	3a30      	subs	r2, #48	; 0x30
 8004902:	2a09      	cmp	r2, #9
 8004904:	d903      	bls.n	800490e <_svfiprintf_r+0x1a6>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0c6      	beq.n	8004898 <_svfiprintf_r+0x130>
 800490a:	9105      	str	r1, [sp, #20]
 800490c:	e7c4      	b.n	8004898 <_svfiprintf_r+0x130>
 800490e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004912:	4604      	mov	r4, r0
 8004914:	2301      	movs	r3, #1
 8004916:	e7f0      	b.n	80048fa <_svfiprintf_r+0x192>
 8004918:	ab03      	add	r3, sp, #12
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	462a      	mov	r2, r5
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <_svfiprintf_r+0x1f4>)
 8004920:	a904      	add	r1, sp, #16
 8004922:	4638      	mov	r0, r7
 8004924:	f3af 8000 	nop.w
 8004928:	1c42      	adds	r2, r0, #1
 800492a:	4606      	mov	r6, r0
 800492c:	d1d6      	bne.n	80048dc <_svfiprintf_r+0x174>
 800492e:	89ab      	ldrh	r3, [r5, #12]
 8004930:	065b      	lsls	r3, r3, #25
 8004932:	f53f af2d 	bmi.w	8004790 <_svfiprintf_r+0x28>
 8004936:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004938:	b01d      	add	sp, #116	; 0x74
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <_svfiprintf_r+0x1f4>)
 8004946:	a904      	add	r1, sp, #16
 8004948:	4638      	mov	r0, r7
 800494a:	f000 f879 	bl	8004a40 <_printf_i>
 800494e:	e7eb      	b.n	8004928 <_svfiprintf_r+0x1c0>
 8004950:	08004de0 	.word	0x08004de0
 8004954:	08004dea 	.word	0x08004dea
 8004958:	00000000 	.word	0x00000000
 800495c:	080046b5 	.word	0x080046b5
 8004960:	08004de6 	.word	0x08004de6

08004964 <_printf_common>:
 8004964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	4616      	mov	r6, r2
 800496a:	4699      	mov	r9, r3
 800496c:	688a      	ldr	r2, [r1, #8]
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004974:	4293      	cmp	r3, r2
 8004976:	bfb8      	it	lt
 8004978:	4613      	movlt	r3, r2
 800497a:	6033      	str	r3, [r6, #0]
 800497c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004980:	4607      	mov	r7, r0
 8004982:	460c      	mov	r4, r1
 8004984:	b10a      	cbz	r2, 800498a <_printf_common+0x26>
 8004986:	3301      	adds	r3, #1
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	0699      	lsls	r1, r3, #26
 800498e:	bf42      	ittt	mi
 8004990:	6833      	ldrmi	r3, [r6, #0]
 8004992:	3302      	addmi	r3, #2
 8004994:	6033      	strmi	r3, [r6, #0]
 8004996:	6825      	ldr	r5, [r4, #0]
 8004998:	f015 0506 	ands.w	r5, r5, #6
 800499c:	d106      	bne.n	80049ac <_printf_common+0x48>
 800499e:	f104 0a19 	add.w	sl, r4, #25
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	6832      	ldr	r2, [r6, #0]
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	dc26      	bgt.n	80049fa <_printf_common+0x96>
 80049ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b0:	1e13      	subs	r3, r2, #0
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	bf18      	it	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	0692      	lsls	r2, r2, #26
 80049ba:	d42b      	bmi.n	8004a14 <_printf_common+0xb0>
 80049bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	3001      	adds	r0, #1
 80049c8:	d01e      	beq.n	8004a08 <_printf_common+0xa4>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	f003 0306 	and.w	r3, r3, #6
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	bf02      	ittt	eq
 80049d6:	68e5      	ldreq	r5, [r4, #12]
 80049d8:	6833      	ldreq	r3, [r6, #0]
 80049da:	1aed      	subeq	r5, r5, r3
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	bf0c      	ite	eq
 80049e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e4:	2500      	movne	r5, #0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfc4      	itt	gt
 80049ea:	1a9b      	subgt	r3, r3, r2
 80049ec:	18ed      	addgt	r5, r5, r3
 80049ee:	2600      	movs	r6, #0
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xc8>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xa8>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4649      	mov	r1, r9
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c0      	blx	r8
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xac>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c6      	b.n	80049a2 <_printf_common+0x3e>
 8004a14:	18e1      	adds	r1, r4, r3
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	2030      	movs	r0, #48	; 0x30
 8004a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a1e:	4422      	add	r2, r4
 8004a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a28:	3302      	adds	r3, #2
 8004a2a:	e7c7      	b.n	80049bc <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4649      	mov	r1, r9
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa4>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x8e>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	7e0f      	ldrb	r7, [r1, #24]
 8004a46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a48:	2f78      	cmp	r7, #120	; 0x78
 8004a4a:	4691      	mov	r9, r2
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	469a      	mov	sl, r3
 8004a52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	; 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d4 	beq.w	8004c0a <_printf_i+0x1ca>
 8004a62:	2f58      	cmp	r7, #88	; 0x58
 8004a64:	f000 80c0 	beq.w	8004be8 <_printf_i+0x1a8>
 8004a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a101      	add	r1, pc, #4	; (adr r1, 8004a80 <_printf_i+0x40>)
 8004a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004bf1 	.word	0x08004bf1
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004bab 	.word	0x08004bab
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c13 	.word	0x08004c13
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b19 	.word	0x08004b19
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004bb3 	.word	0x08004bb3
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	602a      	str	r2, [r5, #0]
 8004ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e09f      	b.n	8004c2c <_printf_i+0x1ec>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	0607      	lsls	r7, r0, #24
 8004af2:	f103 0104 	add.w	r1, r3, #4
 8004af6:	6029      	str	r1, [r5, #0]
 8004af8:	d501      	bpl.n	8004afe <_printf_i+0xbe>
 8004afa:	681e      	ldr	r6, [r3, #0]
 8004afc:	e003      	b.n	8004b06 <_printf_i+0xc6>
 8004afe:	0646      	lsls	r6, r0, #25
 8004b00:	d5fb      	bpl.n	8004afa <_printf_i+0xba>
 8004b02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	da03      	bge.n	8004b12 <_printf_i+0xd2>
 8004b0a:	232d      	movs	r3, #45	; 0x2d
 8004b0c:	4276      	negs	r6, r6
 8004b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b12:	485a      	ldr	r0, [pc, #360]	; (8004c7c <_printf_i+0x23c>)
 8004b14:	230a      	movs	r3, #10
 8004b16:	e012      	b.n	8004b3e <_printf_i+0xfe>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	1d19      	adds	r1, r3, #4
 8004b1e:	6029      	str	r1, [r5, #0]
 8004b20:	0605      	lsls	r5, r0, #24
 8004b22:	d501      	bpl.n	8004b28 <_printf_i+0xe8>
 8004b24:	681e      	ldr	r6, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <_printf_i+0xee>
 8004b28:	0641      	lsls	r1, r0, #25
 8004b2a:	d5fb      	bpl.n	8004b24 <_printf_i+0xe4>
 8004b2c:	881e      	ldrh	r6, [r3, #0]
 8004b2e:	4853      	ldr	r0, [pc, #332]	; (8004c7c <_printf_i+0x23c>)
 8004b30:	2f6f      	cmp	r7, #111	; 0x6f
 8004b32:	bf0c      	ite	eq
 8004b34:	2308      	moveq	r3, #8
 8004b36:	230a      	movne	r3, #10
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b3e:	6865      	ldr	r5, [r4, #4]
 8004b40:	60a5      	str	r5, [r4, #8]
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	bfa2      	ittt	ge
 8004b46:	6821      	ldrge	r1, [r4, #0]
 8004b48:	f021 0104 	bicge.w	r1, r1, #4
 8004b4c:	6021      	strge	r1, [r4, #0]
 8004b4e:	b90e      	cbnz	r6, 8004b54 <_printf_i+0x114>
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	d04b      	beq.n	8004bec <_printf_i+0x1ac>
 8004b54:	4615      	mov	r5, r2
 8004b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b5e:	5dc7      	ldrb	r7, [r0, r7]
 8004b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b64:	4637      	mov	r7, r6
 8004b66:	42bb      	cmp	r3, r7
 8004b68:	460e      	mov	r6, r1
 8004b6a:	d9f4      	bls.n	8004b56 <_printf_i+0x116>
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d10b      	bne.n	8004b88 <_printf_i+0x148>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	07de      	lsls	r6, r3, #31
 8004b74:	d508      	bpl.n	8004b88 <_printf_i+0x148>
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	6861      	ldr	r1, [r4, #4]
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	bfde      	ittt	le
 8004b7e:	2330      	movle	r3, #48	; 0x30
 8004b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b88:	1b52      	subs	r2, r2, r5
 8004b8a:	6122      	str	r2, [r4, #16]
 8004b8c:	f8cd a000 	str.w	sl, [sp]
 8004b90:	464b      	mov	r3, r9
 8004b92:	aa03      	add	r2, sp, #12
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f7ff fee4 	bl	8004964 <_printf_common>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d14a      	bne.n	8004c36 <_printf_i+0x1f6>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b004      	add	sp, #16
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	f043 0320 	orr.w	r3, r3, #32
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	4833      	ldr	r0, [pc, #204]	; (8004c80 <_printf_i+0x240>)
 8004bb4:	2778      	movs	r7, #120	; 0x78
 8004bb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6829      	ldr	r1, [r5, #0]
 8004bbe:	061f      	lsls	r7, r3, #24
 8004bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc4:	d402      	bmi.n	8004bcc <_printf_i+0x18c>
 8004bc6:	065f      	lsls	r7, r3, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2b6      	uxthmi	r6, r6
 8004bcc:	07df      	lsls	r7, r3, #31
 8004bce:	bf48      	it	mi
 8004bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd4:	6029      	str	r1, [r5, #0]
 8004bd6:	bf48      	it	mi
 8004bd8:	6023      	strmi	r3, [r4, #0]
 8004bda:	b91e      	cbnz	r6, 8004be4 <_printf_i+0x1a4>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	2310      	movs	r3, #16
 8004be6:	e7a7      	b.n	8004b38 <_printf_i+0xf8>
 8004be8:	4824      	ldr	r0, [pc, #144]	; (8004c7c <_printf_i+0x23c>)
 8004bea:	e7e4      	b.n	8004bb6 <_printf_i+0x176>
 8004bec:	4615      	mov	r5, r2
 8004bee:	e7bd      	b.n	8004b6c <_printf_i+0x12c>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	6826      	ldr	r6, [r4, #0]
 8004bf4:	6961      	ldr	r1, [r4, #20]
 8004bf6:	1d18      	adds	r0, r3, #4
 8004bf8:	6028      	str	r0, [r5, #0]
 8004bfa:	0635      	lsls	r5, r6, #24
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	d501      	bpl.n	8004c04 <_printf_i+0x1c4>
 8004c00:	6019      	str	r1, [r3, #0]
 8004c02:	e002      	b.n	8004c0a <_printf_i+0x1ca>
 8004c04:	0670      	lsls	r0, r6, #25
 8004c06:	d5fb      	bpl.n	8004c00 <_printf_i+0x1c0>
 8004c08:	8019      	strh	r1, [r3, #0]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	4615      	mov	r5, r2
 8004c10:	e7bc      	b.n	8004b8c <_printf_i+0x14c>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	602a      	str	r2, [r5, #0]
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	6862      	ldr	r2, [r4, #4]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f7fb fad6 	bl	80001d0 <memchr>
 8004c24:	b108      	cbz	r0, 8004c2a <_printf_i+0x1ea>
 8004c26:	1b40      	subs	r0, r0, r5
 8004c28:	6060      	str	r0, [r4, #4]
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	e7aa      	b.n	8004b8c <_printf_i+0x14c>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d0ad      	beq.n	8004ba0 <_printf_i+0x160>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	079b      	lsls	r3, r3, #30
 8004c48:	d413      	bmi.n	8004c72 <_printf_i+0x232>
 8004c4a:	68e0      	ldr	r0, [r4, #12]
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	4298      	cmp	r0, r3
 8004c50:	bfb8      	it	lt
 8004c52:	4618      	movlt	r0, r3
 8004c54:	e7a6      	b.n	8004ba4 <_printf_i+0x164>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d09d      	beq.n	8004ba0 <_printf_i+0x160>
 8004c64:	3501      	adds	r5, #1
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	9903      	ldr	r1, [sp, #12]
 8004c6a:	1a5b      	subs	r3, r3, r1
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dcf2      	bgt.n	8004c56 <_printf_i+0x216>
 8004c70:	e7eb      	b.n	8004c4a <_printf_i+0x20a>
 8004c72:	2500      	movs	r5, #0
 8004c74:	f104 0619 	add.w	r6, r4, #25
 8004c78:	e7f5      	b.n	8004c66 <_printf_i+0x226>
 8004c7a:	bf00      	nop
 8004c7c:	08004df1 	.word	0x08004df1
 8004c80:	08004e02 	.word	0x08004e02

08004c84 <memmove>:
 8004c84:	4288      	cmp	r0, r1
 8004c86:	b510      	push	{r4, lr}
 8004c88:	eb01 0402 	add.w	r4, r1, r2
 8004c8c:	d902      	bls.n	8004c94 <memmove+0x10>
 8004c8e:	4284      	cmp	r4, r0
 8004c90:	4623      	mov	r3, r4
 8004c92:	d807      	bhi.n	8004ca4 <memmove+0x20>
 8004c94:	1e43      	subs	r3, r0, #1
 8004c96:	42a1      	cmp	r1, r4
 8004c98:	d008      	beq.n	8004cac <memmove+0x28>
 8004c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ca2:	e7f8      	b.n	8004c96 <memmove+0x12>
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	428a      	cmp	r2, r1
 8004caa:	d100      	bne.n	8004cae <memmove+0x2a>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cb6:	e7f7      	b.n	8004ca8 <memmove+0x24>

08004cb8 <_sbrk_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4d06      	ldr	r5, [pc, #24]	; (8004cd4 <_sbrk_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fc f92c 	bl	8000f20 <_sbrk>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_sbrk_r+0x1a>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_sbrk_r+0x1a>
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000390 	.word	0x20000390

08004cd8 <memcpy>:
 8004cd8:	440a      	add	r2, r1
 8004cda:	4291      	cmp	r1, r2
 8004cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ce0:	d100      	bne.n	8004ce4 <memcpy+0xc>
 8004ce2:	4770      	bx	lr
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	d1f9      	bne.n	8004ce6 <memcpy+0xe>
 8004cf2:	bd10      	pop	{r4, pc}

08004cf4 <_realloc_r>:
 8004cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	460e      	mov	r6, r1
 8004cfe:	b921      	cbnz	r1, 8004d0a <_realloc_r+0x16>
 8004d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d04:	4611      	mov	r1, r2
 8004d06:	f7ff bc49 	b.w	800459c <_malloc_r>
 8004d0a:	b92a      	cbnz	r2, 8004d18 <_realloc_r+0x24>
 8004d0c:	f7ff fbda 	bl	80044c4 <_free_r>
 8004d10:	4625      	mov	r5, r4
 8004d12:	4628      	mov	r0, r5
 8004d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d18:	f000 f81b 	bl	8004d52 <_malloc_usable_size_r>
 8004d1c:	4284      	cmp	r4, r0
 8004d1e:	4607      	mov	r7, r0
 8004d20:	d802      	bhi.n	8004d28 <_realloc_r+0x34>
 8004d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d26:	d812      	bhi.n	8004d4e <_realloc_r+0x5a>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7ff fc36 	bl	800459c <_malloc_r>
 8004d30:	4605      	mov	r5, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d0ed      	beq.n	8004d12 <_realloc_r+0x1e>
 8004d36:	42bc      	cmp	r4, r7
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	bf28      	it	cs
 8004d3e:	463a      	movcs	r2, r7
 8004d40:	f7ff ffca 	bl	8004cd8 <memcpy>
 8004d44:	4631      	mov	r1, r6
 8004d46:	4640      	mov	r0, r8
 8004d48:	f7ff fbbc 	bl	80044c4 <_free_r>
 8004d4c:	e7e1      	b.n	8004d12 <_realloc_r+0x1e>
 8004d4e:	4635      	mov	r5, r6
 8004d50:	e7df      	b.n	8004d12 <_realloc_r+0x1e>

08004d52 <_malloc_usable_size_r>:
 8004d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d56:	1f18      	subs	r0, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfbc      	itt	lt
 8004d5c:	580b      	ldrlt	r3, [r1, r0]
 8004d5e:	18c0      	addlt	r0, r0, r3
 8004d60:	4770      	bx	lr
	...

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
