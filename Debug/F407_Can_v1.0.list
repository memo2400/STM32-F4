
F407_Can_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080062b4  080062b4  000162b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          000003dc  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f505  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000203c  00000000  00000000  0002f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de0  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae0  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021721  00000000  00000000  00032f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fbd2  00000000  00000000  00054649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce12d  00000000  00000000  0006421b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004008  00000000  00000000  00132348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00136350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800629c 	.word	0x0800629c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800629c 	.word	0x0800629c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t CanError [27] = "\nNo se pudo enviar mensaje\r";
//char serial_test [60] = {"h","o","l","a"} //,0xff, 0xfa, 0x98, 0xff};


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
	{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, canRxData);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000578:	2100      	movs	r1, #0
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f001 fcbe 	bl	8001efc <HAL_CAN_GetRxMessage>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000586:	f002 fba2 	bl	8002cce <HAL_GPIO_TogglePin>
					  canRxData[3],
					  canRxData[4],
					  canRxData[5],
					  canRxData[6],
					  canRxData[7]); */
	}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000031c 	.word	0x2000031c
 8000598:	200002e8 	.word	0x200002e8
 800059c:	40021000 	.word	0x40021000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b097      	sub	sp, #92	; 0x5c
 80005a4:	af08      	add	r7, sp, #32
int main(void)
 80005a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005aa:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f001 f8fc 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f968 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 fc3e 	bl	8000e34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 fc12 	bl	8000de0 <MX_USART1_UART_Init>
  MX_CAN2_Init();
 80005bc:	f000 f9ca 	bl	8000954 <MX_CAN2_Init>
  MX_TIM13_Init();
 80005c0:	f000 fbc6 	bl	8000d50 <MX_TIM13_Init>
  MX_TIM14_Init();
 80005c4:	f000 fbe8 	bl	8000d98 <MX_TIM14_Init>
  MX_TIM1_Init();
 80005c8:	f000 fa2a 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005cc:	f000 fac8 	bl	8000b60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d0:	f000 fb48 	bl	8000c64 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan2);  // segun yo 	 agregue
 80005d4:	4895      	ldr	r0, [pc, #596]	; (800082c <main+0x28c>)
 80005d6:	f001 fb59 	bl	8001c8c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING); // esta IT llama al callback
 80005da:	2102      	movs	r1, #2
 80005dc:	4893      	ldr	r0, [pc, #588]	; (800082c <main+0x28c>)
 80005de:	f001 fdaf 	bl	8002140 <HAL_CAN_ActivateNotification>
  HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 80005e2:	2204      	movs	r2, #4
 80005e4:	4992      	ldr	r1, [pc, #584]	; (8000830 <main+0x290>)
 80005e6:	4893      	ldr	r0, [pc, #588]	; (8000834 <main+0x294>)
 80005e8:	f004 fa38 	bl	8004a5c <HAL_UART_Receive_IT>

  //timmer
  HAL_TIM_Base_Start_IT(&htim13);
 80005ec:	4892      	ldr	r0, [pc, #584]	; (8000838 <main+0x298>)
 80005ee:	f003 f849 	bl	8003684 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14); // iniciamos el timer
 80005f2:	4892      	ldr	r0, [pc, #584]	; (800083c <main+0x29c>)
 80005f4:	f003 f846 	bl	8003684 <HAL_TIM_Base_Start_IT>
  canRxData [5] = 0xff;
  canRxData [6] = 0xff;
  canRxData [7] = 0xff;
  */

	HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	4890      	ldr	r0, [pc, #576]	; (8000840 <main+0x2a0>)
 80005fe:	f002 fb4d 	bl	8002c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2120      	movs	r1, #32
 8000606:	488e      	ldr	r0, [pc, #568]	; (8000840 <main+0x2a0>)
 8000608:	f002 fb48 	bl	8002c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	488b      	ldr	r0, [pc, #556]	; (8000840 <main+0x2a0>)
 8000612:	f002 fb43 	bl	8002c9c <HAL_GPIO_WritePin>

	uint8_t contador_display = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t display[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 800061c:	4a89      	ldr	r2, [pc, #548]	; (8000844 <main+0x2a4>)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	ca07      	ldmia	r2, {r0, r1, r2}
 8000624:	c303      	stmia	r3!, {r0, r1}
 8000626:	801a      	strh	r2, [r3, #0]
		    HAL_GPIO_WritePin(GPIOD, F_Pin, (((patron & 0x20) >> 5) & 0x01));
		    HAL_GPIO_WritePin(GPIOD, G_Pin, (((patron & 0x40) >> 6) & 0x01));
	}

	// PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Inicia el PWM // Inicia el canal principal
 8000628:	2100      	movs	r1, #0
 800062a:	4887      	ldr	r0, [pc, #540]	; (8000848 <main+0x2a8>)
 800062c:	f003 f8f4 	bl	8003818 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4886      	ldr	r0, [pc, #536]	; (800084c <main+0x2ac>)
 8000634:	f003 f8f0 	bl	8003818 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000638:	2104      	movs	r1, #4
 800063a:	4884      	ldr	r0, [pc, #528]	; (800084c <main+0x2ac>)
 800063c:	f003 f8ec 	bl	8003818 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000640:	210c      	movs	r1, #12
 8000642:	4883      	ldr	r0, [pc, #524]	; (8000850 <main+0x2b0>)
 8000644:	f003 f8e8 	bl	8003818 <HAL_TIM_PWM_Start>


	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // Inicia el canal complementario
 8000648:	2100      	movs	r1, #0
 800064a:	487f      	ldr	r0, [pc, #508]	; (8000848 <main+0x2a8>)
 800064c:	f003 ff6a 	bl	8004524 <HAL_TIMEx_PWMN_Start>

	uint32_t dutyCycle = 100;
 8000650:	2364      	movs	r3, #100	; 0x64
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

	// Definiciones de pines RGB
	#define RED_PWM_PIN    TIM4_CH4_D15_Pin   	// Ejemplo: PE7
	#define GREEN_PWM_PIN  TIM3_CH1_C6_Pin  	// Ejemplo: PE8
	#define BLUE_PWM_PIN   TIM3_CH2_C7_Pin  	// Ejemplo: PB10
	int r = 100;
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	623b      	str	r3, [r7, #32]
	int g = 200;
 8000658:	23c8      	movs	r3, #200	; 0xc8
 800065a:	61fb      	str	r3, [r7, #28]
	int b = 100;
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	61bb      	str	r3, [r7, #24]
	      // Puedes cambiar el valor de dutyCycle para ajustar el brillo del LED
	  HAL_Delay(500); // Pequeño retardo para evitar cambios bruscos
	  dutyCycle = 800;*/


	  	  for (int i = 0; i <= 1000; i += 10)
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
 8000664:	e009      	b.n	800067a <main+0xda>
	      {
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);  // Ajusta el brillo
 8000666:	4b78      	ldr	r3, [pc, #480]	; (8000848 <main+0x2a8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
	        HAL_Delay(10);  // Pequeño retardo para ver el efecto
 800066e:	200a      	movs	r0, #10
 8000670:	f001 f90c 	bl	800188c <HAL_Delay>
	  	  for (int i = 0; i <= 1000; i += 10)
 8000674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000676:	330a      	adds	r3, #10
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
 800067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000680:	ddf1      	ble.n	8000666 <main+0xc6>
	      }

	      for (int i = 1000; i >= 0; i -= 10)
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000688:	e009      	b.n	800069e <main+0xfe>
	      {
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);  // Ajusta el brillo
 800068a:	4b6f      	ldr	r3, [pc, #444]	; (8000848 <main+0x2a8>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
	        HAL_Delay(10);  // Pequeño retardo para ver el efecto
 8000692:	200a      	movs	r0, #10
 8000694:	f001 f8fa 	bl	800188c <HAL_Delay>
	      for (int i = 1000; i >= 0; i -= 10)
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	3b0a      	subs	r3, #10
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	daf2      	bge.n	800068a <main+0xea>
	      }

	  // PWM RGB

	      // Mapear valores ADC a PWM (0-4095 a 0-1000)
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, r);    // Rojo
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <main+0x2ac>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a3a      	ldr	r2, [r7, #32]
 80006aa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, g);  // Verde
 80006ac:	4b67      	ldr	r3, [pc, #412]	; (800084c <main+0x2ac>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, b);   // Azul
 80006b4:	4b66      	ldr	r3, [pc, #408]	; (8000850 <main+0x2b0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	641a      	str	r2, [r3, #64]	; 0x40



	  // Diplay - Funcional ASC
	  // DisplayPort(display[contador_display]);
	  contador_display ++;
 80006bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c0:	3301      	adds	r3, #1
 80006c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  if (contador_display > 9){
 80006c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ca:	2b09      	cmp	r3, #9
 80006cc:	d902      	bls.n	80006d4 <main+0x134>
		  contador_display = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  }

	  // trama de datos

	  canTxData [0] = 0x26;
 80006d4:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <main+0x2b4>)
 80006d6:	2226      	movs	r2, #38	; 0x26
 80006d8:	701a      	strb	r2, [r3, #0]
	  canTxData [1] = 0x5C;
 80006da:	4b5e      	ldr	r3, [pc, #376]	; (8000854 <main+0x2b4>)
 80006dc:	225c      	movs	r2, #92	; 0x5c
 80006de:	705a      	strb	r2, [r3, #1]
	  canTxData [2] = 0x03;
 80006e0:	4b5c      	ldr	r3, [pc, #368]	; (8000854 <main+0x2b4>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	709a      	strb	r2, [r3, #2]
	  canTxData [3] = 0x00;
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <main+0x2b4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	70da      	strb	r2, [r3, #3]
	  canTxData [4] = 0xff;
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <main+0x2b4>)
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	711a      	strb	r2, [r3, #4]
	  canTxData [5] = 0xff;
 80006f2:	4b58      	ldr	r3, [pc, #352]	; (8000854 <main+0x2b4>)
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	715a      	strb	r2, [r3, #5]
	  canTxData [6] = 0xff;
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <main+0x2b4>)
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	719a      	strb	r2, [r3, #6]
	  canTxData [7] = 0xff;
 80006fe:	4b55      	ldr	r3, [pc, #340]	; (8000854 <main+0x2b4>)
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	71da      	strb	r2, [r3, #7]

	  // Leds encendido apagado

	  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4853      	ldr	r0, [pc, #332]	; (8000858 <main+0x2b8>)
 800070a:	f002 fae0 	bl	8002cce <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	  //HAL_GPIO_TogglePin(LED_E7_GPIO_Port, LED_E7_Pin);
	  //HAL_GPIO_TogglePin(GPIOE, LED_E8_Pin);

	  //Boton S2
	  if (HAL_GPIO_ReadPin(Boton_S2_GPIO_Port, Boton_S2_Pin))
 800070e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000712:	4851      	ldr	r0, [pc, #324]	; (8000858 <main+0x2b8>)
 8000714:	f002 faaa 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x188>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <main+0x2b8>)
 8000724:	f002 fad3 	bl	8002cce <HAL_GPIO_TogglePin>


	  //USART
	  //HAL_UART_Transmit(&huart1, (char*)contartoggle, sizeof(contartoggle), 300);
	  //HAL_UART_Transmit(&huart1, serial, sizeof(serial), 300);
	  HAL_UART_Transmit(&huart1, (uint8_t*)0x98, 16, HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	2210      	movs	r2, #16
 800072e:	2198      	movs	r1, #152	; 0x98
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <main+0x294>)
 8000732:	f004 f908 	bl	8004946 <HAL_UART_Transmit>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien


	  //Enviar CAN Si funciono.

	  HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, canTxData, &canTxMailbox);
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <main+0x2bc>)
 8000738:	4a46      	ldr	r2, [pc, #280]	; (8000854 <main+0x2b4>)
 800073a:	4949      	ldr	r1, [pc, #292]	; (8000860 <main+0x2c0>)
 800073c:	483b      	ldr	r0, [pc, #236]	; (800082c <main+0x28c>)
 800073e:	f001 fae9 	bl	8001d14 <HAL_CAN_AddTxMessage>


	  // Revisar si el conteo mensaje se envio
	  uint8_t ContarIntentoCan = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 8000748:	e017      	b.n	800077a <main+0x1da>
	  	  {
	  	  	  HAL_UART_Transmit (&huart1, canenviado, sizeof(canenviado), 300);
 800074a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800074e:	2212      	movs	r2, #18
 8000750:	4944      	ldr	r1, [pc, #272]	; (8000864 <main+0x2c4>)
 8000752:	4838      	ldr	r0, [pc, #224]	; (8000834 <main+0x294>)
 8000754:	f004 f8f7 	bl	8004946 <HAL_UART_Transmit>
	  		  //HAL_Delay(300);

	  		  if (ContarIntentoCan == 3)
 8000758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800075c:	2b03      	cmp	r3, #3
 800075e:	d107      	bne.n	8000770 <main+0x1d0>
	  		  {
	  			  HAL_UART_Transmit (&huart1, CanError, sizeof(CanError), 300);
 8000760:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000764:	221b      	movs	r2, #27
 8000766:	4940      	ldr	r1, [pc, #256]	; (8000868 <main+0x2c8>)
 8000768:	4832      	ldr	r0, [pc, #200]	; (8000834 <main+0x294>)
 800076a:	f004 f8ec 	bl	8004946 <HAL_UART_Transmit>
	  			  break;
 800076e:	e00d      	b.n	800078c <main+0x1ec>
	  		  }
	  		ContarIntentoCan++;
 8000770:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000774:	3301      	adds	r3, #1
 8000776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  while (HAL_CAN_IsTxMessagePending(&hcan2, canTxMailbox)) // si ya no hay mensajes pendientes se ejecuta el while
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <main+0x2bc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	482a      	ldr	r0, [pc, #168]	; (800082c <main+0x28c>)
 8000782:	f001 fb97 	bl	8001eb4 <HAL_CAN_IsTxMessagePending>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1de      	bne.n	800074a <main+0x1aa>
	  sprintf(BufferEnvio, "\n\n MSM CAN es: %X %X %X %X\r", canRxData[0],canRxData[1],canRxData[2],canRxData[3]); //%d convierte hex a Dec
	  HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY); // sizeof(BufferLectura) = es si funcion no tambien
	  */


	  sprintf(BufferEnvio, " El PGN Enviado: %lX ", canTxHeader.ExtId); //%d convierte hex a Dec
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <main+0x2c0>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	461a      	mov	r2, r3
 8000792:	4936      	ldr	r1, [pc, #216]	; (800086c <main+0x2cc>)
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <main+0x2d0>)
 8000796:	f005 f8dd 	bl	8005954 <siprintf>
	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);

	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 800079a:	4b36      	ldr	r3, [pc, #216]	; (8000874 <main+0x2d4>)
 800079c:	685a      	ldr	r2, [r3, #4]
			  CanRxHeader.ExtId,
			  canRxData[0],
 800079e:	4b36      	ldr	r3, [pc, #216]	; (8000878 <main+0x2d8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007a2:	469c      	mov	ip, r3
			  canRxData[1],
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <main+0x2d8>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007a8:	4619      	mov	r1, r3
			  canRxData[2],
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <main+0x2d8>)
 80007ac:	789b      	ldrb	r3, [r3, #2]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007ae:	4618      	mov	r0, r3
			  canRxData[3],
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0x2d8>)
 80007b2:	78db      	ldrb	r3, [r3, #3]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007b4:	461c      	mov	r4, r3
			  canRxData[4],
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <main+0x2d8>)
 80007b8:	791b      	ldrb	r3, [r3, #4]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007ba:	461d      	mov	r5, r3
			  canRxData[5],
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <main+0x2d8>)
 80007be:	795b      	ldrb	r3, [r3, #5]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007c0:	461e      	mov	r6, r3
			  canRxData[6],
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x2d8>)
 80007c4:	799b      	ldrb	r3, [r3, #6]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007c6:	607b      	str	r3, [r7, #4]
			  canRxData[7]);
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <main+0x2d8>)
 80007ca:	79db      	ldrb	r3, [r3, #7]
	  sprintf(BufferEnvio, " PGN Recibido: Datos: %lX %X %X %X %X %X %X %X %X\r",
 80007cc:	9306      	str	r3, [sp, #24]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	9305      	str	r3, [sp, #20]
 80007d2:	9604      	str	r6, [sp, #16]
 80007d4:	9503      	str	r5, [sp, #12]
 80007d6:	9402      	str	r4, [sp, #8]
 80007d8:	9001      	str	r0, [sp, #4]
 80007da:	9100      	str	r1, [sp, #0]
 80007dc:	4663      	mov	r3, ip
 80007de:	4927      	ldr	r1, [pc, #156]	; (800087c <main+0x2dc>)
 80007e0:	4823      	ldr	r0, [pc, #140]	; (8000870 <main+0x2d0>)
 80007e2:	f005 f8b7 	bl	8005954 <siprintf>

	  	  	  	  canRxData[0] = 0;
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <main+0x2d8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	  			  canRxData[1] = 0;
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <main+0x2d8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	705a      	strb	r2, [r3, #1]
	  			  canRxData[2] = 0;
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <main+0x2d8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	709a      	strb	r2, [r3, #2]
	  			  canRxData[3] = 0;
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <main+0x2d8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	70da      	strb	r2, [r3, #3]
	  			  canRxData[4] = 0;
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <main+0x2d8>)
 8000800:	2200      	movs	r2, #0
 8000802:	711a      	strb	r2, [r3, #4]
	  			  canRxData[5] = 0;
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <main+0x2d8>)
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
	  			  canRxData[6] = 0;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x2d8>)
 800080c:	2200      	movs	r2, #0
 800080e:	719a      	strb	r2, [r3, #6]
	  			  canRxData[7] = 0;
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <main+0x2d8>)
 8000812:	2200      	movs	r2, #0
 8000814:	71da      	strb	r2, [r3, #7]

	  //HAL_UART_Transmit (&huart1, (uint8_t*)BufferEnvio, strlen(BufferEnvio), HAL_MAX_DELAY);



	  HAL_Delay(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f001 f837 	bl	800188c <HAL_Delay>
	  contartoggle ++;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <main+0x2e0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <main+0x2e0>)
 8000828:	701a      	strb	r2, [r3, #0]
  {
 800082a:	e719      	b.n	8000660 <main+0xc0>
 800082c:	200000cc 	.word	0x200000cc
 8000830:	200002a4 	.word	0x200002a4
 8000834:	2000025c 	.word	0x2000025c
 8000838:	200001cc 	.word	0x200001cc
 800083c:	20000214 	.word	0x20000214
 8000840:	40020000 	.word	0x40020000
 8000844:	08006300 	.word	0x08006300
 8000848:	200000f4 	.word	0x200000f4
 800084c:	2000013c 	.word	0x2000013c
 8000850:	20000184 	.word	0x20000184
 8000854:	20000324 	.word	0x20000324
 8000858:	40021000 	.word	0x40021000
 800085c:	2000032c 	.word	0x2000032c
 8000860:	20000304 	.word	0x20000304
 8000864:	20000018 	.word	0x20000018
 8000868:	2000002c 	.word	0x2000002c
 800086c:	080062b4 	.word	0x080062b4
 8000870:	200002ac 	.word	0x200002ac
 8000874:	200002e8 	.word	0x200002e8
 8000878:	2000031c 	.word	0x2000031c
 800087c:	080062cc 	.word	0x080062cc
 8000880:	200002a8 	.word	0x200002a8

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 f87e 	bl	8005994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	; (800094c <SystemClock_Config+0xc8>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <SystemClock_Config+0xcc>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008f8:	2350      	movs	r3, #80	; 0x50
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fa13 	bl	8002d34 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 fc8c 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2102      	movs	r1, #2
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fc75 	bl	8003224 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000940:	f000 fc76 	bl	8001230 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_CAN2_Init+0xbc>)
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <MX_CAN2_Init+0xc0>)
 800095e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000962:	2210      	movs	r2, #16
 8000964:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_CAN2_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000974:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000978:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_CAN2_Init+0xbc>)
 800097c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000980:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000984:	2200      	movs	r2, #0
 8000986:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_CAN2_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000990:	2200      	movs	r2, #0
 8000992:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000996:	2200      	movs	r2, #0
 8000998:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_CAN2_Init+0xbc>)
 800099c:	2200      	movs	r2, #0
 800099e:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_CAN2_Init+0xbc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_CAN2_Init+0xbc>)
 80009a8:	f000 ff94 	bl	80018d4 <HAL_CAN_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80009b2:	f000 fc3d 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

    // ####### Trama de datos FULL HD
    canTxHeader.DLC = 0x08;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_CAN2_Init+0xc4>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	611a      	str	r2, [r3, #16]
    //canTxHeader.ExtId = 0x18fee000; //temp aceite
    canTxHeader.ExtId = 0x18fec100; // Odometro HR.
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_CAN2_Init+0xc4>)
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <MX_CAN2_Init+0xc8>)
 80009c0:	605a      	str	r2, [r3, #4]
    canTxHeader.IDE = CAN_ID_EXT;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_CAN2_Init+0xc4>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	609a      	str	r2, [r3, #8]
    canTxHeader.RTR = CAN_RTR_DATA;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_CAN2_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    //canTxHeader.StdId = 0x00; // lo comento
    canTxHeader.TransmitGlobalTime = DISABLE;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_CAN2_Init+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	751a      	strb	r2, [r3, #20]

    // ####### Configutacion del filtro.
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 10;  //  ver si es de can2
 80009d8:	230a      	movs	r3, #10
 80009da:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //ver si este es para CAN2
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh =0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow =0x0000;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank =0; // ver si es de can2
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig); //asigno el filtro a la funcion.
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_CAN2_Init+0xbc>)
 8000a02:	f001 f863 	bl	8001acc <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000cc 	.word	0x200000cc
 8000a14:	40006800 	.word	0x40006800
 8000a18:	20000304 	.word	0x20000304
 8000a1c:	18fec100 	.word	0x18fec100

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 ff9b 	bl	8005994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a60:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <MX_TIM1_Init+0x13c>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a66:	224f      	movs	r2, #79	; 0x4f
 8000a68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000a70:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	4833      	ldr	r0, [pc, #204]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000a8c:	f002 fdaa 	bl	80035e4 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fbcb 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482c      	ldr	r0, [pc, #176]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000aa8:	f003 f930 	bl	8003d0c <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fbbd 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	4828      	ldr	r0, [pc, #160]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000ab8:	f002 fe54 	bl	8003764 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fbb5 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4820      	ldr	r0, [pc, #128]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000ad6:	f003 fddf 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 fba6 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000b0a:	f003 f83d 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b14:	f000 fb8c 	bl	8001230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000b3c:	f003 fe28 	bl	8004790 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b46:	f000 fb73 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM1_Init+0x138>)
 8000b4c:	f000 fc84 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3758      	adds	r7, #88	; 0x58
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000f4 	.word	0x200000f4
 8000b5c:	40010000 	.word	0x40010000

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000b92:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <MX_TIM3_Init+0x100>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000b98:	224f      	movs	r2, #79	; 0x4f
 8000b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb6:	4829      	ldr	r0, [pc, #164]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000bb8:	f002 fd14 	bl	80035e4 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bc2:	f000 fb35 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000bd4:	f003 f89a 	bl	8003d0c <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bde:	f000 fb27 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000be2:	481e      	ldr	r0, [pc, #120]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000be4:	f002 fdbe 	bl	8003764 <HAL_TIM_PWM_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bee:	f000 fb1f 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4816      	ldr	r0, [pc, #88]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000c02:	f003 fd49 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c0c:	f000 fb10 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c10:	2360      	movs	r3, #96	; 0x60
 8000c12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000c28:	f002 ffae 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c32:	f000 fafd 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2204      	movs	r2, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000c3e:	f002 ffa3 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000c48:	f000 faf2 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM3_Init+0xfc>)
 8000c4e:	f000 fc03 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8000c52:	bf00      	nop
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000013c 	.word	0x2000013c
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <MX_TIM4_Init+0xe8>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000c9c:	224f      	movs	r2, #79	; 0x4f
 8000c9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cba:	4823      	ldr	r0, [pc, #140]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000cbc:	f002 fc92 	bl	80035e4 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cc6:	f000 fab3 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481c      	ldr	r0, [pc, #112]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000cd8:	f003 f818 	bl	8003d0c <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ce2:	f000 faa5 	bl	8001230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000ce8:	f002 fd3c 	bl	8003764 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000cf2:	f000 fa9d 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000d06:	f003 fcc7 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d10:	f000 fa8e 	bl	8001230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	220c      	movs	r2, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000d2c:	f002 ff2c 	bl	8003b88 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d36:	f000 fa7b 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_TIM4_Init+0xe4>)
 8000d3c:	f000 fb8c 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000184 	.word	0x20000184
 8000d4c:	40000800 	.word	0x40000800

08000d50 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <MX_TIM13_Init+0x44>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d5c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d60:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d6e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_TIM13_Init+0x40>)
 8000d7e:	f002 fc31 	bl	80035e4 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000d88:	f000 fa52 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001cc 	.word	0x200001cc
 8000d94:	40001c00 	.word	0x40001c00

08000d98 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <MX_TIM14_Init+0x44>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000da4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000da8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_TIM14_Init+0x40>)
 8000dc6:	f002 fc0d 	bl	80035e4 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000dd0:	f000 fa2e 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000214 	.word	0x20000214
 8000ddc:	40002000 	.word	0x40002000

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART1_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e18:	f003 fd45 	bl	80048a6 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 fa05 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000025c 	.word	0x2000025c
 8000e30:	40011000 	.word	0x40011000

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a56      	ldr	r2, [pc, #344]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <MX_GPIO_Init+0x194>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A4_Pin|LED_A5_Pin|LED_A6_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2170      	movs	r1, #112	; 0x70
 8000eda:	483c      	ldr	r0, [pc, #240]	; (8000fcc <MX_GPIO_Init+0x198>)
 8000edc:	f001 fede 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ee6:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <MX_GPIO_Init+0x19c>)
 8000ee8:	f001 fed8 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ef2:	4838      	ldr	r0, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x1a0>)
 8000ef4:	f001 fed2 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, C_Pin|D_Pin|E_Pin|F_Pin
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8000efe:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <MX_GPIO_Init+0x1a0>)
 8000f00:	f001 fecc 	bl	8002c9c <HAL_GPIO_WritePin>
                          |G_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : LED_A4_Pin LED_A5_Pin LED_A6_Pin */
  GPIO_InitStruct.Pin = LED_A4_Pin|LED_A5_Pin|LED_A6_Pin;
 8000f04:	2370      	movs	r3, #112	; 0x70
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <MX_GPIO_Init+0x198>)
 8000f1c:	f001 fd0a 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boton_S1_IT_Pin */
  GPIO_InitStruct.Pin = Boton_S1_IT_Pin;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boton_S1_IT_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <MX_GPIO_Init+0x19c>)
 8000f38:	f001 fcfc 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : Boton_S2_Pin Boton_S3_Pin */
  GPIO_InitStruct.Pin = Boton_S2_Pin|Boton_S3_Pin;
 8000f3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <MX_GPIO_Init+0x19c>)
 8000f52:	f001 fcef 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000f56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0x19c>)
 8000f70:	f001 fce0 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_GPIO_Init+0x1a0>)
 8000f8e:	f001 fcd1 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = C_Pin|D_Pin|E_Pin|F_Pin
 8000f92:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000f96:	617b      	str	r3, [r7, #20]
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <MX_GPIO_Init+0x1a0>)
 8000fac:	f001 fcc2 	bl	8002934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2028      	movs	r0, #40	; 0x28
 8000fb6:	f001 fbf4 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fba:	2028      	movs	r0, #40	; 0x28
 8000fbc:	f001 fc0d 	bl	80027da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40020c00 	.word	0x40020c00

08000fd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Transmit (&huart1, InterrupcionUsart, sizeof(InterrupcionUsart), HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2215      	movs	r2, #21
 8000fe6:	4906      	ldr	r1, [pc, #24]	; (8001000 <HAL_UART_RxCpltCallback+0x28>)
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <HAL_UART_RxCpltCallback+0x2c>)
 8000fea:	f003 fcac 	bl	8004946 <HAL_UART_Transmit>
	//HAL_UART_Receive_IT(&huart1, InterrupcionUsart, sizeof(InterrupcionUsart));
	HAL_UART_Receive_IT(&huart1, UsartRxData, sizeof(UsartRxData));
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4905      	ldr	r1, [pc, #20]	; (8001008 <HAL_UART_RxCpltCallback+0x30>)
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <HAL_UART_RxCpltCallback+0x2c>)
 8000ff4:	f003 fd32 	bl	8004a5c <HAL_UART_Receive_IT>
	//UsartRxData

}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	2000025c 	.word	0x2000025c
 8001008:	200002a4 	.word	0x200002a4

0800100c <HAL_GPIO_EXTI_Callback>:
volatile uint8_t FlagBotonPresionado = 0;
uint32_t lastInterruptTime = 0;
int contador_IT = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 8001016:	f000 fc2d 	bl	8001874 <HAL_GetTick>
 800101a:	60f8      	str	r0, [r7, #12]

	//GPIOA->ODR=0B000000;

	// Verifica si tiempo transcurrido es mayor que tiempo de debounce
	if ((currentTime - lastInterruptTime) > DEBOUNCE_TIME) {
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_GPIO_EXTI_Callback+0xf8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b32      	cmp	r3, #50	; 0x32
 8001026:	d966      	bls.n	80010f6 <HAL_GPIO_EXTI_Callback+0xea>


		if (GPIO_Pin == Boton_S1_IT_Pin)  // Asegurar que es el pin correcto
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102e:	d162      	bne.n	80010f6 <HAL_GPIO_EXTI_Callback+0xea>
		{
			FlagBotonPresionado = 1;
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(LED_A5_GPIO_Port, LED_A5_Pin);  // Ejemplo: Cambiar el estado de un LED
			if (contador_IT == 1)
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d104      	bne.n	8001048 <HAL_GPIO_EXTI_Callback+0x3c>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	4833      	ldr	r0, [pc, #204]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 8001044:	f001 fe2a 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT == 2)
 8001048:	4b30      	ldr	r3, [pc, #192]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d104      	bne.n	800105a <HAL_GPIO_EXTI_Callback+0x4e>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	482e      	ldr	r0, [pc, #184]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 8001056:	f001 fe21 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT == 3)
 800105a:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d109      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x6a>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2120      	movs	r1, #32
 8001066:	482a      	ldr	r0, [pc, #168]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 8001068:	f001 fe18 	bl	8002c9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	4827      	ldr	r0, [pc, #156]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 8001072:	f001 fe13 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT == 4)
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d109      	bne.n	8001092 <HAL_GPIO_EXTI_Callback+0x86>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2110      	movs	r1, #16
 8001082:	4823      	ldr	r0, [pc, #140]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 8001084:	f001 fe0a 	bl	8002c9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2120      	movs	r1, #32
 800108c:	4820      	ldr	r0, [pc, #128]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 800108e:	f001 fe05 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT == 5)
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d104      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x98>
			{
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010a0:	f001 fdfc 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT == 6)
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d109      	bne.n	80010c0 <HAL_GPIO_EXTI_Callback+0xb4>
			{
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	4817      	ldr	r0, [pc, #92]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010b2:	f001 fdf3 	bl	8002c9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010bc:	f001 fdee 	bl	8002c9c <HAL_GPIO_WritePin>
			}
			if (contador_IT >= 7)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	dd11      	ble.n	80010ec <HAL_GPIO_EXTI_Callback+0xe0>
			{
				HAL_GPIO_WritePin(LED_A4_GPIO_Port, LED_A4_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2110      	movs	r1, #16
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010ce:	f001 fde5 	bl	8002c9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A5_GPIO_Port, LED_A5_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2120      	movs	r1, #32
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010d8:	f001 fde0 	bl	8002c9c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_A6_GPIO_Port, LED_A6_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <HAL_GPIO_EXTI_Callback+0x104>)
 80010e2:	f001 fddb 	bl	8002c9c <HAL_GPIO_WritePin>
				contador_IT = 0;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
			}
			contador_IT++;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x100>)
 80010f4:	6013      	str	r3, [r2, #0]
		}
	}
	lastInterruptTime = currentTime;
 80010f6:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_GPIO_EXTI_Callback+0xf8>)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000334 	.word	0x20000334
 8001108:	20000330 	.word	0x20000330
 800110c:	20000338 	.word	0x20000338
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_TIM_PeriodElapsedCallback>:
float banderatim = 0;
uint8_t contador_display_tim = 9;
uint8_t display[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM14) // aqui le indicamos que usamos el timmer 1 para no revolver timers
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d119      	bne.n	800115a <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		//HAL_GPIO_TogglePin(LedRojo_GPIO_Port, LedRojo_Pin);
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800112c:	f001 fdcf 	bl	8002cce <HAL_GPIO_TogglePin>

		/*HAL_GPIO_TogglePin(A_GPIO_Port, A_Pin);
		HAL_GPIO_TogglePin(B_GPIO_Port, B_Pin);*/

		DisplayPort(display[contador_display_tim]);
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001138:	5c9b      	ldrb	r3, [r3, r2]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f81a 	bl	8001174 <DisplayPort>

		if (contador_display_tim == 0){
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0x3a>
			  contador_display_tim = 10;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800114a:	220a      	movs	r2, #10
 800114c:	701a      	strb	r2, [r3, #0]
		}
		contador_display_tim --;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001158:	701a      	strb	r2, [r3, #0]
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_E, (patron & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_F, (patron & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    HAL_GPIO_WritePin(DISPLAY_PORT, SEGMENT_G, (patron & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
		    */
	}
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40002000 	.word	0x40002000
 8001168:	40021000 	.word	0x40021000
 800116c:	20000047 	.word	0x20000047
 8001170:	20000048 	.word	0x20000048

08001174 <DisplayPort>:

void DisplayPort(uint8_t patron){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

	    HAL_GPIO_WritePin(GPIOD, A_Pin, (((patron & 0x01) >> 0) & 0x01));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <DisplayPort+0xb8>)
 800118e:	f001 fd85 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, B_Pin, (((patron & 0x02) >> 1) & 0x01));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	105b      	asrs	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4821      	ldr	r0, [pc, #132]	; (800122c <DisplayPort+0xb8>)
 80011a6:	f001 fd79 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, C_Pin, (((patron & 0x04) >> 2) & 0x01));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	109b      	asrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011bc:	481b      	ldr	r0, [pc, #108]	; (800122c <DisplayPort+0xb8>)
 80011be:	f001 fd6d 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, D_Pin, (((patron & 0x08) >> 3) & 0x01));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	10db      	asrs	r3, r3, #3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d4:	4815      	ldr	r0, [pc, #84]	; (800122c <DisplayPort+0xb8>)
 80011d6:	f001 fd61 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, E_Pin, (((patron & 0x10) >> 4) & 0x01));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	111b      	asrs	r3, r3, #4
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <DisplayPort+0xb8>)
 80011ee:	f001 fd55 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, F_Pin, (((patron & 0x20) >> 5) & 0x01));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	115b      	asrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <DisplayPort+0xb8>)
 8001206:	f001 fd49 	bl	8002c9c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, G_Pin, (((patron & 0x40) >> 6) & 0x01));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	119b      	asrs	r3, r3, #6
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <DisplayPort+0xb8>)
 800121e:	f001 fd3d 	bl	8002c9c <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020c00 	.word	0x40020c00

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a24      	ldr	r2, [pc, #144]	; (800133c <HAL_CAN_MspInit+0xb0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d141      	bne.n	8001332 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_CAN_MspInit+0xb4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001302:	2360      	movs	r3, #96	; 0x60
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001312:	2309      	movs	r3, #9
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_CAN_MspInit+0xb8>)
 800131e:	f001 fb09 	bl	8002934 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2040      	movs	r0, #64	; 0x40
 8001328:	f001 fa3b 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800132c:	2040      	movs	r0, #64	; 0x40
 800132e:	f001 fa54 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40006800 	.word	0x40006800
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <HAL_TIM_Base_MspInit+0xf8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10e      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001376:	e05e      	b.n	8001436 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_TIM_Base_MspInit+0x100>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
}
 800139e:	e04a      	b.n	8001436 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_TIM_Base_MspInit+0x104>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10e      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
}
 80013c6:	e036      	b.n	8001436 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_TIM_Base_MspInit+0x108>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d116      	bne.n	8001400 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	202c      	movs	r0, #44	; 0x2c
 80013f4:	f001 f9d5 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80013f8:	202c      	movs	r0, #44	; 0x2c
 80013fa:	f001 f9ee 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80013fe:	e01a      	b.n	8001436 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM14)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_TIM_Base_MspInit+0x10c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d115      	bne.n	8001436 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_TIM_Base_MspInit+0xfc>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	202d      	movs	r0, #45	; 0x2d
 800142c:	f001 f9b9 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001430:	202d      	movs	r0, #45	; 0x2d
 8001432:	f001 f9d2 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	40023800 	.word	0x40023800
 8001448:	40000400 	.word	0x40000400
 800144c:	40000800 	.word	0x40000800
 8001450:	40001c00 	.word	0x40001c00
 8001454:	40002000 	.word	0x40002000

08001458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a37      	ldr	r2, [pc, #220]	; (8001554 <HAL_TIM_MspPostInit+0xfc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11f      	bne.n	80014ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_E8_Pin;
 8001496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM1_CH1N_E8_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <HAL_TIM_MspPostInit+0x104>)
 80014b4:	f001 fa3e 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014b8:	e047      	b.n	800154a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <HAL_TIM_MspPostInit+0x108>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d11e      	bne.n	8001502 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_C6_Pin|TIM3_CH2_C7_Pin;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014f0:	2302      	movs	r3, #2
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	481a      	ldr	r0, [pc, #104]	; (8001564 <HAL_TIM_MspPostInit+0x10c>)
 80014fc:	f001 fa1a 	bl	8002934 <HAL_GPIO_Init>
}
 8001500:	e023      	b.n	800154a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_TIM_MspPostInit+0x110>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d11e      	bne.n	800154a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_TIM_MspPostInit+0x100>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM4_CH4_D15_Pin;
 8001528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800153a:	2302      	movs	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM4_CH4_D15_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <HAL_TIM_MspPostInit+0x114>)
 8001546:	f001 f9f5 	bl	8002934 <HAL_GPIO_Init>
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800
 800155c:	40021000 	.word	0x40021000
 8001560:	40000400 	.word	0x40000400
 8001564:	40020800 	.word	0x40020800
 8001568:	40000800 	.word	0x40000800
 800156c:	40020c00 	.word	0x40020c00

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0x94>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d134      	bne.n	80015fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_UART_MspInit+0x98>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <HAL_UART_MspInit+0x98>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_UART_MspInit+0x98>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_UART_MspInit+0x9c>)
 80015e8:	f001 f9a4 	bl	8002934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2025      	movs	r0, #37	; 0x25
 80015f2:	f001 f8d6 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f6:	2025      	movs	r0, #37	; 0x25
 80015f8:	f001 f8ef 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	; 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40011000 	.word	0x40011000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8f6 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART1_IRQHandler+0x10>)
 800166a:	f003 fa1d 	bl	8004aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000025c 	.word	0x2000025c

08001678 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Boton_S1_IT_Pin);
 800167c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001680:	f001 fb40 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800168e:	f002 f98b 	bl	80039a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200001cc 	.word	0x200001cc

0800169c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016a2:	f002 f981 	bl	80039a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000214 	.word	0x20000214

080016b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <CAN2_RX0_IRQHandler+0x10>)
 80016b6:	f000 fd69 	bl	800218c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000cc 	.word	0x200000cc

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f004 f956 	bl	80059a4 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400
 8001728:	2000033c 	.word	0x2000033c
 800172c:	20000490 	.word	0x20000490

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001758:	f7ff ffea 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f004 f915 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7fe ff0b 	bl	80005a0 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001798:	08006368 	.word	0x08006368
  ldr r2, =_sbss
 800179c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80017a0:	2000048c 	.word	0x2000048c

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 ffdb 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fd2e 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fff3 	bl	80027f6 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 ffbb 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000054 	.word	0x20000054
 8001844:	2000005c 	.word	0x2000005c
 8001848:	20000058 	.word	0x20000058

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000005c 	.word	0x2000005c
 8001870:	20000340 	.word	0x20000340

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000340 	.word	0x20000340

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000005c 	.word	0x2000005c

080018d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0ed      	b.n	8001ac2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fcca 	bl	800128c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001908:	f7ff ffb4 	bl	8001874 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190e:	e012      	b.n	8001936 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001910:	f7ff ffb0 	bl	8001874 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b0a      	cmp	r3, #10
 800191c:	d90b      	bls.n	8001936 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2205      	movs	r2, #5
 800192e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0c5      	b.n	8001ac2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0e5      	beq.n	8001910 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0202 	bic.w	r2, r2, #2
 8001952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff ff8e 	bl	8001874 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195a:	e012      	b.n	8001982 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195c:	f7ff ff8a 	bl	8001874 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b0a      	cmp	r3, #10
 8001968:	d90b      	bls.n	8001982 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e09f      	b.n	8001ac2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e5      	bne.n	800195c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7e5b      	ldrb	r3, [r3, #25]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e9b      	ldrb	r3, [r3, #26]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0220 	orr.w	r2, r2, #32
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0220 	bic.w	r2, r2, #32
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7edb      	ldrb	r3, [r3, #27]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0210 	bic.w	r2, r2, #16
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0210 	orr.w	r2, r2, #16
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7f1b      	ldrb	r3, [r3, #28]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0208 	orr.w	r2, r2, #8
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0208 	bic.w	r2, r2, #8
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7f5b      	ldrb	r3, [r3, #29]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0204 	orr.w	r2, r2, #4
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0204 	bic.w	r2, r2, #4
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	ea42 0103 	orr.w	r1, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae4:	7cfb      	ldrb	r3, [r7, #19]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d003      	beq.n	8001af2 <HAL_CAN_ConfigFilter+0x26>
 8001aea:	7cfb      	ldrb	r3, [r7, #19]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	f040 80be 	bne.w	8001c6e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_CAN_ConfigFilter+0x1bc>)
 8001af4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	431a      	orrs	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2201      	movs	r2, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	401a      	ands	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d123      	bne.n	8001b9c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3248      	adds	r2, #72	; 0x48
 8001b7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b92:	6979      	ldr	r1, [r7, #20]
 8001b94:	3348      	adds	r3, #72	; 0x48
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d122      	bne.n	8001bea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3248      	adds	r2, #72	; 0x48
 8001bca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be0:	6979      	ldr	r1, [r7, #20]
 8001be2:	3348      	adds	r3, #72	; 0x48
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c04:	e007      	b.n	8001c16 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c60:	f023 0201 	bic.w	r2, r3, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e006      	b.n	8001c7c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40006400 	.word	0x40006400

08001c8c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d12e      	bne.n	8001cfe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff fddc 	bl	8001874 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cbe:	e012      	b.n	8001ce6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc0:	f7ff fdd8 	bl	8001874 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	d90b      	bls.n	8001ce6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e012      	b.n	8001d0c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e5      	bne.n	8001cc0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e006      	b.n	8001d0c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d28:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d003      	beq.n	8001d40 <HAL_CAN_AddTxMessage+0x2c>
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80ad 	bne.w	8001e9a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8095 	beq.w	8001e8a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	0e1b      	lsrs	r3, r3, #24
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10d      	bne.n	8001d98 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	6809      	ldr	r1, [r1, #0]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	440b      	add	r3, r1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00f      	b.n	8001db8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3318      	adds	r3, #24
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	7d1b      	ldrb	r3, [r3, #20]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d111      	bne.n	8001df8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3318      	adds	r3, #24
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	6811      	ldr	r1, [r2, #0]
 8001de8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3318      	adds	r3, #24
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	3304      	adds	r3, #4
 8001df6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3307      	adds	r3, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	061a      	lsls	r2, r3, #24
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3306      	adds	r3, #6
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3305      	adds	r3, #5
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	4313      	orrs	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	3204      	adds	r2, #4
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6811      	ldr	r1, [r2, #0]
 8001e20:	ea43 0200 	orr.w	r2, r3, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3303      	adds	r3, #3
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	061a      	lsls	r2, r3, #24
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3301      	adds	r3, #1
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	4610      	mov	r0, r2
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6811      	ldr	r1, [r2, #0]
 8001e56:	ea43 0200 	orr.w	r2, r3, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	4413      	add	r3, r2
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	6811      	ldr	r1, [r2, #0]
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3318      	adds	r3, #24
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	440b      	add	r3, r1
 8001e84:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e00e      	b.n	8001ea8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e006      	b.n	8001ea8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eca:	7afb      	ldrb	r3, [r7, #11]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d002      	beq.n	8001ed6 <HAL_CAN_IsTxMessagePending+0x22>
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d10b      	bne.n	8001eee <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	069b      	lsls	r3, r3, #26
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001eea:	2301      	movs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_GetRxMessage+0x24>
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 8103 	bne.w	8002126 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d116      	bne.n	8001f62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0f7      	b.n	8002134 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0e8      	b.n	8002134 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0204 	and.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	331b      	adds	r3, #27
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0d5b      	lsrs	r3, r3, #21
 8001f90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e00b      	b.n	8001fb2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	331b      	adds	r3, #27
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4413      	add	r3, r2
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	331b      	adds	r3, #27
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0202 	and.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	331b      	adds	r3, #27
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	e00b      	b.n	8002000 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	331b      	adds	r3, #27
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	331b      	adds	r3, #27
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b2da      	uxtb	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	331b      	adds	r3, #27
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	b29a      	uxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0a1a      	lsrs	r2, r3, #8
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4413      	add	r3, r2
 800206a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0c1a      	lsrs	r2, r3, #16
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3302      	adds	r3, #2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0e1a      	lsrs	r2, r3, #24
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	3303      	adds	r3, #3
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	3304      	adds	r3, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0a1a      	lsrs	r2, r3, #8
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3305      	adds	r3, #5
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0c1a      	lsrs	r2, r3, #16
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	3306      	adds	r3, #6
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e1a      	lsrs	r2, r3, #24
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	3307      	adds	r3, #7
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d108      	bne.n	8002112 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0220 	orr.w	r2, r2, #32
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	e007      	b.n	8002122 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e006      	b.n	8002134 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002150:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d002      	beq.n	800215e <HAL_CAN_ActivateNotification+0x1e>
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d109      	bne.n	8002172 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e006      	b.n	8002180 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d07c      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f983 	bl	80024fa <HAL_CAN_TxMailbox0CompleteCallback>
 80021f4:	e016      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	e00c      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	e002      	b.n	8002224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f989 	bl	8002536 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d024      	beq.n	8002278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f963 	bl	800250e <HAL_CAN_TxMailbox1CompleteCallback>
 8002248:	e016      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e00c      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e002      	b.n	8002278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f969 	bl	800254a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800228a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f943 	bl	8002522 <HAL_CAN_TxMailbox2CompleteCallback>
 800229c:	e016      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e00c      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	e002      	b.n	80022cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f949 	bl	800255e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f930 	bl	8002572 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe f91e 	bl	800056c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2208      	movs	r2, #8
 800236e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f912 	bl	800259a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8f9 	bl	8002586 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8fc 	bl	80025ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00b      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8f5 	bl	80025c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07b      	beq.n	80024da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d072      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	2b00      	cmp	r3, #0
 8002448:	d043      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03e      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800245a:	2b60      	cmp	r3, #96	; 0x60
 800245c:	d02b      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x32a>
 800245e:	2b60      	cmp	r3, #96	; 0x60
 8002460:	d82e      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 8002462:	2b50      	cmp	r3, #80	; 0x50
 8002464:	d022      	beq.n	80024ac <HAL_CAN_IRQHandler+0x320>
 8002466:	2b50      	cmp	r3, #80	; 0x50
 8002468:	d82a      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d019      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x316>
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d826      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 8002472:	2b30      	cmp	r3, #48	; 0x30
 8002474:	d010      	beq.n	8002498 <HAL_CAN_IRQHandler+0x30c>
 8002476:	2b30      	cmp	r3, #48	; 0x30
 8002478:	d822      	bhi.n	80024c0 <HAL_CAN_IRQHandler+0x334>
 800247a:	2b10      	cmp	r3, #16
 800247c:	d002      	beq.n	8002484 <HAL_CAN_IRQHandler+0x2f8>
 800247e:	2b20      	cmp	r3, #32
 8002480:	d005      	beq.n	800248e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002482:	e01d      	b.n	80024c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f043 0308 	orr.w	r3, r3, #8
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800248c:	e019      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002496:	e014      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024a0:	e00f      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024aa:	e00a      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024b4:	e005      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024be:	e000      	b.n	80024c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80024c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f872 	bl	80025d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff f82a 	bl	8001874 <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e052      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0216 	bic.w	r2, r2, #22
 800284e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_DMA_Abort+0x62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e013      	b.n	80028ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7fe ffef 	bl	8001874 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d90c      	bls.n	80028ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e015      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e4      	bne.n	8002892 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	223f      	movs	r2, #63	; 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00c      	b.n	8002926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e16b      	b.n	8002c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 815a 	bne.w	8002c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80b4 	beq.w	8002c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <HAL_GPIO_Init+0x30c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a5f      	ldr	r2, [pc, #380]	; (8002c40 <HAL_GPIO_Init+0x30c>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_GPIO_Init+0x30c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	; (8002c44 <HAL_GPIO_Init+0x310>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_GPIO_Init+0x314>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02b      	beq.n	8002b5a <HAL_GPIO_Init+0x226>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a51      	ldr	r2, [pc, #324]	; (8002c4c <HAL_GPIO_Init+0x318>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x222>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a50      	ldr	r2, [pc, #320]	; (8002c50 <HAL_GPIO_Init+0x31c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x21e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x320>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x21a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x216>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x212>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x32c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x20e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_GPIO_Init+0x330>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x20a>
 8002b3a:	2307      	movs	r3, #7
 8002b3c:	e00e      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	e00c      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e00a      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x228>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x310>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f67f ae90 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40021400 	.word	0x40021400
 8002c60:	40021800 	.word	0x40021800
 8002c64:	40021c00 	.word	0x40021c00
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e001      	b.n	8002c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb8:	e003      	b.n	8002cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	041a      	lsls	r2, r3, #16
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	400b      	ands	r3, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f972 	bl	800100c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e267      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d075      	beq.n	8002e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d52:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d00c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d112      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d76:	d10b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b7e      	ldr	r3, [pc, #504]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05b      	beq.n	8002e3c <HAL_RCC_OscConfig+0x108>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d157      	bne.n	8002e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e242      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x74>
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e01d      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x98>
 8002db2:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6f      	ldr	r2, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6c      	ldr	r2, [pc, #432]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a68      	ldr	r2, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a65      	ldr	r2, [pc, #404]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fd42 	bl	8001874 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fd3e 	bl	8001874 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e207      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0xc0>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fd2e 	bl	8001874 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fd2a 	bl	8001874 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1f3      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	4b51      	ldr	r3, [pc, #324]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0xe8>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d063      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d11c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e1c7      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4937      	ldr	r1, [pc, #220]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	e03a      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fce3 	bl	8001874 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fcdf 	bl	8001874 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1a8      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4925      	ldr	r1, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fcc2 	bl	8001874 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fcbe 	bl	8001874 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e187      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d036      	beq.n	8002f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fca2 	bl	8001874 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe fc9e 	bl	8001874 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e167      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x200>
 8002f52:	e01b      	b.n	8002f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fc8b 	bl	8001874 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	e00e      	b.n	8002f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fc87 	bl	8001874 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d907      	bls.n	8002f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e150      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	42470000 	.word	0x42470000
 8002f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ea      	bne.n	8002f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8097 	beq.w	80030c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b7d      	ldr	r3, [pc, #500]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b77      	ldr	r3, [pc, #476]	; (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b74      	ldr	r3, [pc, #464]	; (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a73      	ldr	r2, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fc47 	bl	8001874 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe fc43 	bl	8001874 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e10c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	; (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x2ea>
 8003010:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a63      	ldr	r2, [pc, #396]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	e01c      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x30c>
 8003026:	4b5f      	ldr	r3, [pc, #380]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a5e      	ldr	r2, [pc, #376]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 8003040:	4b58      	ldr	r3, [pc, #352]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe fc08 	bl	8001874 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fc04 	bl	8001874 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0cb      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ee      	beq.n	8003068 <HAL_RCC_OscConfig+0x334>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fbf2 	bl	8001874 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fbee 	bl	8001874 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0b5      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ee      	bne.n	8003094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4a38      	ldr	r2, [pc, #224]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a1 	beq.w	8003214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d2:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d05c      	beq.n	8003198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d141      	bne.n	800316a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x478>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fbc2 	bl	8001874 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fbbe 	bl	8001874 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e087      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x478>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fb97 	bl	8001874 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fe fb93 	bl	8001874 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e05c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x416>
 8003168:	e054      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fb80 	bl	8001874 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fb7c 	bl	8001874 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e045      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x444>
 8003196:	e03d      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e038      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x4ec>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d028      	beq.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d121      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d111      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	3b01      	subs	r3, #1
 80031fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cc      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b68      	ldr	r3, [pc, #416]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d90c      	bls.n	8003260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e067      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4934      	ldr	r1, [pc, #208]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe faae 	bl	8001874 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe faaa 	bl	8001874 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20c      	bcs.n	800336c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fa0e 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	0800630c 	.word	0x0800630c
 80033e8:	20000054 	.word	0x20000054
 80033ec:	20000058 	.word	0x20000058

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b090      	sub	sp, #64	; 0x40
 80033f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
 80033fc:	2300      	movs	r3, #0
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003400:	2300      	movs	r3, #0
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 8003414:	2b08      	cmp	r3, #8
 8003416:	f200 80a1 	bhi.w	800355c <HAL_RCC_GetSysClockFreq+0x16c>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x3a>
 8003422:	e09b      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_GetSysClockFreq+0x184>)
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003428:	e09b      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342a:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800342e:	e098      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003430:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343a:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	627a      	str	r2, [r7, #36]	; 0x24
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003458:	2100      	movs	r1, #0
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800345c:	fb03 f201 	mul.w	r2, r3, r1
 8003460:	2300      	movs	r3, #0
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	4413      	add	r3, r2
 8003468:	4a43      	ldr	r2, [pc, #268]	; (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800346a:	fba0 1202 	umull	r1, r2, r0, r2
 800346e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003470:	460a      	mov	r2, r1
 8003472:	62ba      	str	r2, [r7, #40]	; 0x28
 8003474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003476:	4413      	add	r3, r2
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	2200      	movs	r2, #0
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	61fa      	str	r2, [r7, #28]
 8003482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800348a:	f7fc fef1 	bl	8000270 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4613      	mov	r3, r2
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003496:	e053      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	2200      	movs	r2, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	617a      	str	r2, [r7, #20]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034aa:	f04f 0b00 	mov.w	fp, #0
 80034ae:	4652      	mov	r2, sl
 80034b0:	465b      	mov	r3, fp
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c0:	0150      	lsls	r0, r2, #5
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ebb2 080a 	subs.w	r8, r2, sl
 80034ca:	eb63 090b 	sbc.w	r9, r3, fp
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e2:	ebb2 0408 	subs.w	r4, r2, r8
 80034e6:	eb63 0509 	sbc.w	r5, r3, r9
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	00eb      	lsls	r3, r5, #3
 80034f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f8:	00e2      	lsls	r2, r4, #3
 80034fa:	4614      	mov	r4, r2
 80034fc:	461d      	mov	r5, r3
 80034fe:	eb14 030a 	adds.w	r3, r4, sl
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	eb45 030b 	adc.w	r3, r5, fp
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003520:	4621      	mov	r1, r4
 8003522:	028a      	lsls	r2, r1, #10
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	2200      	movs	r2, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003534:	f7fc fe9c 	bl	8000270 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCC_GetSysClockFreq+0x184>)
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003564:	4618      	mov	r0, r3
 8003566:	3740      	adds	r7, #64	; 0x40
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400
 8003578:	017d7840 	.word	0x017d7840

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000054 	.word	0x20000054

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	0800631c 	.word	0x0800631c

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffdc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800631c 	.word	0x0800631c

080035e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fe9c 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fc62 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d001      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e04e      	b.n	800373a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_TIM_Base_Start_IT+0xc4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d01d      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_Base_Start_IT+0xc8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_TIM_Base_Start_IT+0xcc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_TIM_Base_Start_IT+0xd0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_TIM_Base_Start_IT+0xd4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start_IT+0xd8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x80>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIM_Base_Start_IT+0xdc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e041      	b.n	80037fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f839 	bl	8003802 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f000 fba2 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_TIM_PWM_Start+0x24>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e022      	b.n	8003882 <HAL_TIM_PWM_Start+0x6a>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b04      	cmp	r3, #4
 8003840:	d109      	bne.n	8003856 <HAL_TIM_PWM_Start+0x3e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e015      	b.n	8003882 <HAL_TIM_PWM_Start+0x6a>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x58>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e008      	b.n	8003882 <HAL_TIM_PWM_Start+0x6a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07c      	b.n	8003984 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Start+0x82>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003898:	e013      	b.n	80038c2 <HAL_TIM_PWM_Start+0xaa>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Start+0x92>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a8:	e00b      	b.n	80038c2 <HAL_TIM_PWM_Start+0xaa>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Start+0xa2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	e003      	b.n	80038c2 <HAL_TIM_PWM_Start+0xaa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fe04 	bl	80044d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2d      	ldr	r2, [pc, #180]	; (800398c <HAL_TIM_PWM_Start+0x174>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_PWM_Start+0xcc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <HAL_TIM_PWM_Start+0x178>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_TIM_PWM_Start+0xd0>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_TIM_PWM_Start+0xd2>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a22      	ldr	r2, [pc, #136]	; (800398c <HAL_TIM_PWM_Start+0x174>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d01d      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <HAL_TIM_PWM_Start+0x17c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <HAL_TIM_PWM_Start+0x180>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_TIM_PWM_Start+0x184>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <HAL_TIM_PWM_Start+0x178>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <HAL_TIM_PWM_Start+0x188>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_TIM_PWM_Start+0x136>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <HAL_TIM_PWM_Start+0x18c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d010      	beq.n	8003982 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	e007      	b.n	8003982 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40010000 	.word	0x40010000
 8003990:	40010400 	.word	0x40010400
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	40000c00 	.word	0x40000c00
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40001800 	.word	0x40001800

080039a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d020      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0202 	mvn.w	r2, #2
 80039dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fa5b 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fa4d 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa5e 	bl	8003ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01b      	beq.n	8003a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0204 	mvn.w	r2, #4
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa35 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa27 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa38 	bl	8003ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0208 	mvn.w	r2, #8
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa0f 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa01 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa12 	bl	8003ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d020      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01b      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0210 	mvn.w	r2, #16
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9e9 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9db 	bl	8003e9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9ec 	bl	8003ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0201 	mvn.w	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fb00 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fe88 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9bd 	bl	8003ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0220 	mvn.w	r2, #32
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fe5a 	bl	8004834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0ae      	b.n	8003d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	f200 809f 	bhi.w	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bf1 	.word	0x08003bf1
 8003bc0:	08003cf5 	.word	0x08003cf5
 8003bc4:	08003cf5 	.word	0x08003cf5
 8003bc8:	08003cf5 	.word	0x08003cf5
 8003bcc:	08003c31 	.word	0x08003c31
 8003bd0:	08003cf5 	.word	0x08003cf5
 8003bd4:	08003cf5 	.word	0x08003cf5
 8003bd8:	08003cf5 	.word	0x08003cf5
 8003bdc:	08003c73 	.word	0x08003c73
 8003be0:	08003cf5 	.word	0x08003cf5
 8003be4:	08003cf5 	.word	0x08003cf5
 8003be8:	08003cf5 	.word	0x08003cf5
 8003bec:	08003cb3 	.word	0x08003cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fa24 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6999      	ldr	r1, [r3, #24]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	619a      	str	r2, [r3, #24]
      break;
 8003c2e:	e064      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa74 	bl	8004124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	619a      	str	r2, [r3, #24]
      break;
 8003c70:	e043      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fac9 	bl	8004210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0204 	bic.w	r2, r2, #4
 8003c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69d9      	ldr	r1, [r3, #28]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	61da      	str	r2, [r3, #28]
      break;
 8003cb0:	e023      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fb1d 	bl	80042f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	61da      	str	r2, [r3, #28]
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_ConfigClockSource+0x1c>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e0b4      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x186>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d60:	d03e      	beq.n	8003de0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	f200 8087 	bhi.w	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	f000 8086 	beq.w	8003e7e <HAL_TIM_ConfigClockSource+0x172>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d87f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b70      	cmp	r3, #112	; 0x70
 8003d7a:	d01a      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d7c:	2b70      	cmp	r3, #112	; 0x70
 8003d7e:	d87b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b60      	cmp	r3, #96	; 0x60
 8003d82:	d050      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x11a>
 8003d84:	2b60      	cmp	r3, #96	; 0x60
 8003d86:	d877      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d03c      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xfa>
 8003d8c:	2b50      	cmp	r3, #80	; 0x50
 8003d8e:	d873      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b40      	cmp	r3, #64	; 0x40
 8003d92:	d058      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x13a>
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d86f      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b30      	cmp	r3, #48	; 0x30
 8003d9a:	d064      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b30      	cmp	r3, #48	; 0x30
 8003d9e:	d86b      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d060      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d867      	bhi.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05c      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d05a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	e062      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc2:	f000 fb69 	bl	8004498 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	609a      	str	r2, [r3, #8]
      break;
 8003dde:	e04f      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df0:	f000 fb52 	bl	8004498 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e03c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 fac6 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2150      	movs	r1, #80	; 0x50
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb1f 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e02c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 fae5 	bl	8004402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2160      	movs	r1, #96	; 0x60
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fb0f 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e01c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 faa6 	bl	80043a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 faff 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e00c      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 faf6 	bl	8004462 <TIM_ITRx_SetConfig>
      break;
 8003e76:	e003      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a46      	ldr	r2, [pc, #280]	; (8004018 <TIM_Base_SetConfig+0x12c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d00f      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a43      	ldr	r2, [pc, #268]	; (800401c <TIM_Base_SetConfig+0x130>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a42      	ldr	r2, [pc, #264]	; (8004020 <TIM_Base_SetConfig+0x134>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	; (8004024 <TIM_Base_SetConfig+0x138>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a40      	ldr	r2, [pc, #256]	; (8004028 <TIM_Base_SetConfig+0x13c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d108      	bne.n	8003f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a35      	ldr	r2, [pc, #212]	; (8004018 <TIM_Base_SetConfig+0x12c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d027      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a32      	ldr	r2, [pc, #200]	; (800401c <TIM_Base_SetConfig+0x130>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d023      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a31      	ldr	r2, [pc, #196]	; (8004020 <TIM_Base_SetConfig+0x134>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01f      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a30      	ldr	r2, [pc, #192]	; (8004024 <TIM_Base_SetConfig+0x138>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <TIM_Base_SetConfig+0x13c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d017      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2e      	ldr	r2, [pc, #184]	; (800402c <TIM_Base_SetConfig+0x140>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <TIM_Base_SetConfig+0x144>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <TIM_Base_SetConfig+0x148>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a2b      	ldr	r2, [pc, #172]	; (8004038 <TIM_Base_SetConfig+0x14c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2a      	ldr	r2, [pc, #168]	; (800403c <TIM_Base_SetConfig+0x150>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a29      	ldr	r2, [pc, #164]	; (8004040 <TIM_Base_SetConfig+0x154>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a10      	ldr	r2, [pc, #64]	; (8004018 <TIM_Base_SetConfig+0x12c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0xf8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <TIM_Base_SetConfig+0x13c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d103      	bne.n	8003fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]
  }
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40010400 	.word	0x40010400
 800402c:	40014000 	.word	0x40014000
 8004030:	40014400 	.word	0x40014400
 8004034:	40014800 	.word	0x40014800
 8004038:	40001800 	.word	0x40001800
 800403c:	40001c00 	.word	0x40001c00
 8004040:	40002000 	.word	0x40002000

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 0201 	bic.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC1_SetConfig+0x64>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10c      	bne.n	80040c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0308 	bic.w	r3, r3, #8
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a15      	ldr	r2, [pc, #84]	; (800411c <TIM_OC1_SetConfig+0xd8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_OC1_SetConfig+0x8e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <TIM_OC1_SetConfig+0xdc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0210 	bic.w	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0x68>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d10d      	bne.n	80041a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <TIM_OC2_SetConfig+0xe4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC2_SetConfig+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <TIM_OC2_SetConfig+0xe8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d113      	bne.n	80041e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x66>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10d      	bne.n	8004292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <TIM_OC3_SetConfig+0xe0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_OC3_SetConfig+0x92>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC3_SetConfig+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d113      	bne.n	80042ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400

080042f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_OC4_SetConfig+0xa4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC4_SetConfig+0x68>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <TIM_OC4_SetConfig+0xa8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40010400 	.word	0x40010400

080043a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 030a 	bic.w	r3, r3, #10
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f023 0210 	bic.w	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800442c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	031b      	lsls	r3, r3, #12
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004462:	b480      	push	{r7}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	f043 0307 	orr.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	609a      	str	r2, [r3, #8]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_TIMEx_PWMN_Start+0x24>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e022      	b.n	800458e <HAL_TIMEx_PWMN_Start+0x6a>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d109      	bne.n	8004562 <HAL_TIMEx_PWMN_Start+0x3e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e015      	b.n	800458e <HAL_TIMEx_PWMN_Start+0x6a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d109      	bne.n	800457c <HAL_TIMEx_PWMN_Start+0x58>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e008      	b.n	800458e <HAL_TIMEx_PWMN_Start+0x6a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e06d      	b.n	8004672 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_TIMEx_PWMN_Start+0x82>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	e013      	b.n	80045ce <HAL_TIMEx_PWMN_Start+0xaa>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d104      	bne.n	80045b6 <HAL_TIMEx_PWMN_Start+0x92>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b4:	e00b      	b.n	80045ce <HAL_TIMEx_PWMN_Start+0xaa>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d104      	bne.n	80045c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	e003      	b.n	80045ce <HAL_TIMEx_PWMN_Start+0xaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2204      	movs	r2, #4
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f940 	bl	800485c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_TIMEx_PWMN_Start+0x158>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d022      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d01d      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_TIMEx_PWMN_Start+0x160>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_TIMEx_PWMN_Start+0x164>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_TIMEx_PWMN_Start+0x168>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIMEx_PWMN_Start+0x16c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIMEx_PWMN_Start+0x118>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <HAL_TIMEx_PWMN_Start+0x170>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b06      	cmp	r3, #6
 800464c:	d010      	beq.n	8004670 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	e007      	b.n	8004670 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e05a      	b.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a21      	ldr	r2, [pc, #132]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d01d      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1a      	ldr	r2, [pc, #104]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10c      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40001800 	.word	0x40001800

08004790 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e03d      	b.n	8004828 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	2204      	movs	r2, #4
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	43db      	mvns	r3, r3
 800487e:	401a      	ands	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1a      	ldr	r2, [r3, #32]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e042      	b.n	800493e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fc fe4f 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2224      	movs	r2, #36	; 0x24
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fdbe 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800490e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800491e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b08a      	sub	sp, #40	; 0x28
 800494a:	af02      	add	r7, sp, #8
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b20      	cmp	r3, #32
 8004964:	d175      	bne.n	8004a52 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_UART_Transmit+0x2c>
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06e      	b.n	8004a54 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2221      	movs	r2, #33	; 0x21
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004984:	f7fc ff76 	bl	8001874 <HAL_GetTick>
 8004988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	d108      	bne.n	80049b2 <HAL_UART_Transmit+0x6c>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e003      	b.n	80049ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049ba:	e02e      	b.n	8004a1a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fb20 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e03a      	b.n	8004a54 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	3302      	adds	r3, #2
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e007      	b.n	8004a0c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1cb      	bne.n	80049bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 faec 	bl	800500c <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d112      	bne.n	8004a9c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_UART_Receive_IT+0x26>
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e00b      	b.n	8004a9e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb13 	bl	80050be <UART_Start_Receive_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b0ba      	sub	sp, #232	; 0xe8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_UART_IRQHandler+0x66>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fbf2 	bl	80052f0 <UART_Receive_IT>
      return;
 8004b0c:	e25b      	b.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80de 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x22c>
 8004b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80d1 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_UART_IRQHandler+0xae>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f043 0201 	orr.w	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_UART_IRQHandler+0xd2>
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f043 0202 	orr.w	r2, r3, #2
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_UART_IRQHandler+0xf6>
 8004b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d011      	beq.n	8004bce <HAL_UART_IRQHandler+0x126>
 8004baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d105      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f043 0208 	orr.w	r2, r3, #8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 81f2 	beq.w	8004fbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x14e>
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb7d 	bl	80052f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_UART_IRQHandler+0x17a>
 8004c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d04f      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa85 	bl	8005132 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d141      	bne.n	8004cba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1d9      	bne.n	8004c36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	4a7e      	ldr	r2, [pc, #504]	; (8004e88 <HAL_UART_IRQHandler+0x3e0>)
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd fe29 	bl	80028ee <HAL_DMA_Abort_IT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cac:	4610      	mov	r0, r2
 8004cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00e      	b.n	8004cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f994 	bl	8004fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e00a      	b.n	8004cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f990 	bl	8004fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e006      	b.n	8004cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f98c 	bl	8004fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cce:	e175      	b.n	8004fbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	bf00      	nop
    return;
 8004cd2:	e173      	b.n	8004fbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 814f 	bne.w	8004f7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8148 	beq.w	8004f7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8141 	beq.w	8004f7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	f040 80b6 	bne.w	8004e8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8145 	beq.w	8004fc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f080 813e 	bcs.w	8004fc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	f000 8088 	beq.w	8004e6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1d9      	bne.n	8004d5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e1      	bne.n	8004da6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e3      	bne.n	8004e28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd fcd2 	bl	800280e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8b7 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e86:	e09b      	b.n	8004fc0 <HAL_UART_IRQHandler+0x518>
 8004e88:	080051f9 	.word	0x080051f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 808e 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8089 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e3      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3314      	adds	r3, #20
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f0e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e3      	bne.n	8004eea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0310 	bic.w	r3, r3, #16
 8004f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	69b9      	ldr	r1, [r7, #24]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	617b      	str	r3, [r7, #20]
   return(result);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e3      	bne.n	8004f30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f83d 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f7a:	e023      	b.n	8004fc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <HAL_UART_IRQHandler+0x4f4>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f943 	bl	8005220 <UART_Transmit_IT>
    return;
 8004f9a:	e014      	b.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
 8004fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f983 	bl	80052c0 <UART_EndTransmit_IT>
    return;
 8004fba:	e004      	b.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004fc4:	bf00      	nop
  }
}
 8004fc6:	37e8      	adds	r7, #232	; 0xe8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501c:	e03b      	b.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d037      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fc fc25 	bl	8001874 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <UART_WaitOnFlagUntilTimeout+0x30>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e03a      	b.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d023      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d020      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d01d      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d116      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f857 	bl	8005132 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2208      	movs	r2, #8
 8005088:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e00f      	b.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d0b4      	beq.n	800501e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2222      	movs	r2, #34	; 0x22
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005102:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0220 	orr.w	r2, r2, #32
 8005122:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005132:	b480      	push	{r7}
 8005134:	b095      	sub	sp, #84	; 0x54
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800515a:	643a      	str	r2, [r7, #64]	; 0x40
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e5      	bne.n	800513a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	61fb      	str	r3, [r7, #28]
   return(result);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3314      	adds	r3, #20
 800518c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800518e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d119      	bne.n	80051de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f023 0310 	bic.w	r3, r3, #16
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051ca:	61ba      	str	r2, [r7, #24]
 80051cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6979      	ldr	r1, [r7, #20]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	613b      	str	r3, [r7, #16]
   return(result);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ec:	bf00      	nop
 80051ee:	3754      	adds	r7, #84	; 0x54
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff fee4 	bl	8004fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b21      	cmp	r3, #33	; 0x21
 8005232:	d13e      	bne.n	80052b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d114      	bne.n	8005268 <UART_Transmit_IT+0x48>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d110      	bne.n	8005268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]
 8005266:	e008      	b.n	800527a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6211      	str	r1, [r2, #32]
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fe73 	bl	8004fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b22      	cmp	r3, #34	; 0x22
 8005302:	f040 80ae 	bne.w	8005462 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	d117      	bne.n	8005340 <UART_Receive_IT+0x50>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d113      	bne.n	8005340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	b29a      	uxth	r2, r3
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
 800533e:	e026      	b.n	800538e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d007      	beq.n	8005364 <UART_Receive_IT+0x74>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <UART_Receive_IT+0x82>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e008      	b.n	8005384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	b2da      	uxtb	r2, r3
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4619      	mov	r1, r3
 800539c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d15d      	bne.n	800545e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0220 	bic.w	r2, r2, #32
 80053b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d135      	bne.n	8005454 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	613b      	str	r3, [r7, #16]
   return(result);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	623a      	str	r2, [r7, #32]
 8005410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	61bb      	str	r3, [r7, #24]
   return(result);
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e5      	bne.n	80053ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b10      	cmp	r3, #16
 800542e:	d10a      	bne.n	8005446 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fdd1 	bl	8004ff4 <HAL_UARTEx_RxEventCallback>
 8005452:	e002      	b.n	800545a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fb fdbf 	bl	8000fd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e002      	b.n	8005464 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005462:	2302      	movs	r3, #2
  }
}
 8005464:	4618      	mov	r0, r3
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b0c0      	sub	sp, #256	; 0x100
 8005472:	af00      	add	r7, sp, #0
 8005474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	ea40 0301 	orr.w	r3, r0, r1
 8005494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054c4:	f021 010c 	bic.w	r1, r1, #12
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d2:	430b      	orrs	r3, r1
 80054d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	6999      	ldr	r1, [r3, #24]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	ea40 0301 	orr.w	r3, r0, r1
 80054f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8f      	ldr	r3, [pc, #572]	; (8005738 <UART_SetConfig+0x2cc>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d005      	beq.n	800550c <UART_SetConfig+0xa0>
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b8d      	ldr	r3, [pc, #564]	; (800573c <UART_SetConfig+0x2d0>)
 8005508:	429a      	cmp	r2, r3
 800550a:	d104      	bne.n	8005516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7fe f856 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8005510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005514:	e003      	b.n	800551e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005516:	f7fe f83d 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 800551a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	f040 810c 	bne.w	8005744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800553a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	1891      	adds	r1, r2, r2
 8005544:	65b9      	str	r1, [r7, #88]	; 0x58
 8005546:	415b      	adcs	r3, r3
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800554e:	4621      	mov	r1, r4
 8005550:	eb12 0801 	adds.w	r8, r2, r1
 8005554:	4629      	mov	r1, r5
 8005556:	eb43 0901 	adc.w	r9, r3, r1
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800556e:	4690      	mov	r8, r2
 8005570:	4699      	mov	r9, r3
 8005572:	4623      	mov	r3, r4
 8005574:	eb18 0303 	adds.w	r3, r8, r3
 8005578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800557c:	462b      	mov	r3, r5
 800557e:	eb49 0303 	adc.w	r3, r9, r3
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800559a:	460b      	mov	r3, r1
 800559c:	18db      	adds	r3, r3, r3
 800559e:	653b      	str	r3, [r7, #80]	; 0x50
 80055a0:	4613      	mov	r3, r2
 80055a2:	eb42 0303 	adc.w	r3, r2, r3
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
 80055a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055b0:	f7fa fe5e 	bl	8000270 <__aeabi_uldivmod>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4b61      	ldr	r3, [pc, #388]	; (8005740 <UART_SetConfig+0x2d4>)
 80055ba:	fba3 2302 	umull	r2, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	011c      	lsls	r4, r3, #4
 80055c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055d4:	4642      	mov	r2, r8
 80055d6:	464b      	mov	r3, r9
 80055d8:	1891      	adds	r1, r2, r2
 80055da:	64b9      	str	r1, [r7, #72]	; 0x48
 80055dc:	415b      	adcs	r3, r3
 80055de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055e4:	4641      	mov	r1, r8
 80055e6:	eb12 0a01 	adds.w	sl, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb43 0b01 	adc.w	fp, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005604:	4692      	mov	sl, r2
 8005606:	469b      	mov	fp, r3
 8005608:	4643      	mov	r3, r8
 800560a:	eb1a 0303 	adds.w	r3, sl, r3
 800560e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005612:	464b      	mov	r3, r9
 8005614:	eb4b 0303 	adc.w	r3, fp, r3
 8005618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800562c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005630:	460b      	mov	r3, r1
 8005632:	18db      	adds	r3, r3, r3
 8005634:	643b      	str	r3, [r7, #64]	; 0x40
 8005636:	4613      	mov	r3, r2
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	647b      	str	r3, [r7, #68]	; 0x44
 800563e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005646:	f7fa fe13 	bl	8000270 <__aeabi_uldivmod>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4611      	mov	r1, r2
 8005650:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <UART_SetConfig+0x2d4>)
 8005652:	fba3 2301 	umull	r2, r3, r3, r1
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2264      	movs	r2, #100	; 0x64
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	1acb      	subs	r3, r1, r3
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <UART_SetConfig+0x2d4>)
 8005668:	fba3 2302 	umull	r2, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005674:	441c      	add	r4, r3
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005690:	415b      	adcs	r3, r3
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005698:	4641      	mov	r1, r8
 800569a:	1851      	adds	r1, r2, r1
 800569c:	6339      	str	r1, [r7, #48]	; 0x30
 800569e:	4649      	mov	r1, r9
 80056a0:	414b      	adcs	r3, r1
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056b0:	4659      	mov	r1, fp
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4651      	mov	r1, sl
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4642      	mov	r2, r8
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056cc:	464b      	mov	r3, r9
 80056ce:	460a      	mov	r2, r1
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056ec:	460b      	mov	r3, r1
 80056ee:	18db      	adds	r3, r3, r3
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f2:	4613      	mov	r3, r2
 80056f4:	eb42 0303 	adc.w	r3, r2, r3
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005702:	f7fa fdb5 	bl	8000270 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <UART_SetConfig+0x2d4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a08      	ldr	r2, [pc, #32]	; (8005740 <UART_SetConfig+0x2d4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 0207 	and.w	r2, r3, #7
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4422      	add	r2, r4
 8005732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005734:	e106      	b.n	8005944 <UART_SetConfig+0x4d8>
 8005736:	bf00      	nop
 8005738:	40011000 	.word	0x40011000
 800573c:	40011400 	.word	0x40011400
 8005740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800574e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	6239      	str	r1, [r7, #32]
 800575e:	415b      	adcs	r3, r3
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005766:	4641      	mov	r1, r8
 8005768:	1854      	adds	r4, r2, r1
 800576a:	4649      	mov	r1, r9
 800576c:	eb43 0501 	adc.w	r5, r3, r1
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	00eb      	lsls	r3, r5, #3
 800577a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800577e:	00e2      	lsls	r2, r4, #3
 8005780:	4614      	mov	r4, r2
 8005782:	461d      	mov	r5, r3
 8005784:	4643      	mov	r3, r8
 8005786:	18e3      	adds	r3, r4, r3
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800578c:	464b      	mov	r3, r9
 800578e:	eb45 0303 	adc.w	r3, r5, r3
 8005792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057b2:	4629      	mov	r1, r5
 80057b4:	008b      	lsls	r3, r1, #2
 80057b6:	4621      	mov	r1, r4
 80057b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057bc:	4621      	mov	r1, r4
 80057be:	008a      	lsls	r2, r1, #2
 80057c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057c4:	f7fa fd54 	bl	8000270 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4b60      	ldr	r3, [pc, #384]	; (8005950 <UART_SetConfig+0x4e4>)
 80057ce:	fba3 2302 	umull	r2, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	011c      	lsls	r4, r3, #4
 80057d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	1891      	adds	r1, r2, r2
 80057ee:	61b9      	str	r1, [r7, #24]
 80057f0:	415b      	adcs	r3, r3
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f8:	4641      	mov	r1, r8
 80057fa:	1851      	adds	r1, r2, r1
 80057fc:	6139      	str	r1, [r7, #16]
 80057fe:	4649      	mov	r1, r9
 8005800:	414b      	adcs	r3, r1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005810:	4659      	mov	r1, fp
 8005812:	00cb      	lsls	r3, r1, #3
 8005814:	4651      	mov	r1, sl
 8005816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800581a:	4651      	mov	r1, sl
 800581c:	00ca      	lsls	r2, r1, #3
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	4603      	mov	r3, r0
 8005824:	4642      	mov	r2, r8
 8005826:	189b      	adds	r3, r3, r2
 8005828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800582c:	464b      	mov	r3, r9
 800582e:	460a      	mov	r2, r1
 8005830:	eb42 0303 	adc.w	r3, r2, r3
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	67bb      	str	r3, [r7, #120]	; 0x78
 8005842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005850:	4649      	mov	r1, r9
 8005852:	008b      	lsls	r3, r1, #2
 8005854:	4641      	mov	r1, r8
 8005856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585a:	4641      	mov	r1, r8
 800585c:	008a      	lsls	r2, r1, #2
 800585e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005862:	f7fa fd05 	bl	8000270 <__aeabi_uldivmod>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4611      	mov	r1, r2
 800586c:	4b38      	ldr	r3, [pc, #224]	; (8005950 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2301 	umull	r2, r3, r3, r1
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2264      	movs	r2, #100	; 0x64
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	1acb      	subs	r3, r1, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	3332      	adds	r3, #50	; 0x32
 8005880:	4a33      	ldr	r2, [pc, #204]	; (8005950 <UART_SetConfig+0x4e4>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588c:	441c      	add	r4, r3
 800588e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005892:	2200      	movs	r2, #0
 8005894:	673b      	str	r3, [r7, #112]	; 0x70
 8005896:	677a      	str	r2, [r7, #116]	; 0x74
 8005898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	415b      	adcs	r3, r3
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ac:	4641      	mov	r1, r8
 80058ae:	1851      	adds	r1, r2, r1
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	4649      	mov	r1, r9
 80058b4:	414b      	adcs	r3, r1
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058c4:	4659      	mov	r1, fp
 80058c6:	00cb      	lsls	r3, r1, #3
 80058c8:	4651      	mov	r1, sl
 80058ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ce:	4651      	mov	r1, sl
 80058d0:	00ca      	lsls	r2, r1, #3
 80058d2:	4610      	mov	r0, r2
 80058d4:	4619      	mov	r1, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	4642      	mov	r2, r8
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058de:	464b      	mov	r3, r9
 80058e0:	460a      	mov	r2, r1
 80058e2:	eb42 0303 	adc.w	r3, r2, r3
 80058e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	663b      	str	r3, [r7, #96]	; 0x60
 80058f2:	667a      	str	r2, [r7, #100]	; 0x64
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005900:	4649      	mov	r1, r9
 8005902:	008b      	lsls	r3, r1, #2
 8005904:	4641      	mov	r1, r8
 8005906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800590a:	4641      	mov	r1, r8
 800590c:	008a      	lsls	r2, r1, #2
 800590e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005912:	f7fa fcad 	bl	8000270 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <UART_SetConfig+0x4e4>)
 800591c:	fba3 1302 	umull	r1, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	2164      	movs	r1, #100	; 0x64
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	3332      	adds	r3, #50	; 0x32
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <UART_SetConfig+0x4e4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4422      	add	r2, r4
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800594a:	46bd      	mov	sp, r7
 800594c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005950:	51eb851f 	.word	0x51eb851f

08005954 <siprintf>:
 8005954:	b40e      	push	{r1, r2, r3}
 8005956:	b500      	push	{lr}
 8005958:	b09c      	sub	sp, #112	; 0x70
 800595a:	ab1d      	add	r3, sp, #116	; 0x74
 800595c:	9002      	str	r0, [sp, #8]
 800595e:	9006      	str	r0, [sp, #24]
 8005960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005964:	4809      	ldr	r0, [pc, #36]	; (800598c <siprintf+0x38>)
 8005966:	9107      	str	r1, [sp, #28]
 8005968:	9104      	str	r1, [sp, #16]
 800596a:	4909      	ldr	r1, [pc, #36]	; (8005990 <siprintf+0x3c>)
 800596c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005970:	9105      	str	r1, [sp, #20]
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	a902      	add	r1, sp, #8
 8005978:	f000 f992 	bl	8005ca0 <_svfiprintf_r>
 800597c:	9b02      	ldr	r3, [sp, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	b01c      	add	sp, #112	; 0x70
 8005984:	f85d eb04 	ldr.w	lr, [sp], #4
 8005988:	b003      	add	sp, #12
 800598a:	4770      	bx	lr
 800598c:	200000ac 	.word	0x200000ac
 8005990:	ffff0208 	.word	0xffff0208

08005994 <memset>:
 8005994:	4402      	add	r2, r0
 8005996:	4603      	mov	r3, r0
 8005998:	4293      	cmp	r3, r2
 800599a:	d100      	bne.n	800599e <memset+0xa>
 800599c:	4770      	bx	lr
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
 80059a2:	e7f9      	b.n	8005998 <memset+0x4>

080059a4 <__errno>:
 80059a4:	4b01      	ldr	r3, [pc, #4]	; (80059ac <__errno+0x8>)
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	200000ac 	.word	0x200000ac

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4d0d      	ldr	r5, [pc, #52]	; (80059e8 <__libc_init_array+0x38>)
 80059b4:	4c0d      	ldr	r4, [pc, #52]	; (80059ec <__libc_init_array+0x3c>)
 80059b6:	1b64      	subs	r4, r4, r5
 80059b8:	10a4      	asrs	r4, r4, #2
 80059ba:	2600      	movs	r6, #0
 80059bc:	42a6      	cmp	r6, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	4d0b      	ldr	r5, [pc, #44]	; (80059f0 <__libc_init_array+0x40>)
 80059c2:	4c0c      	ldr	r4, [pc, #48]	; (80059f4 <__libc_init_array+0x44>)
 80059c4:	f000 fc6a 	bl	800629c <_init>
 80059c8:	1b64      	subs	r4, r4, r5
 80059ca:	10a4      	asrs	r4, r4, #2
 80059cc:	2600      	movs	r6, #0
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d8:	4798      	blx	r3
 80059da:	3601      	adds	r6, #1
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e2:	4798      	blx	r3
 80059e4:	3601      	adds	r6, #1
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08006360 	.word	0x08006360
 80059ec:	08006360 	.word	0x08006360
 80059f0:	08006360 	.word	0x08006360
 80059f4:	08006364 	.word	0x08006364

080059f8 <__retarget_lock_acquire_recursive>:
 80059f8:	4770      	bx	lr

080059fa <__retarget_lock_release_recursive>:
 80059fa:	4770      	bx	lr

080059fc <_free_r>:
 80059fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059fe:	2900      	cmp	r1, #0
 8005a00:	d044      	beq.n	8005a8c <_free_r+0x90>
 8005a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a06:	9001      	str	r0, [sp, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a0e:	bfb8      	it	lt
 8005a10:	18e4      	addlt	r4, r4, r3
 8005a12:	f000 f8df 	bl	8005bd4 <__malloc_lock>
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <_free_r+0x94>)
 8005a18:	9801      	ldr	r0, [sp, #4]
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	b933      	cbnz	r3, 8005a2c <_free_r+0x30>
 8005a1e:	6063      	str	r3, [r4, #4]
 8005a20:	6014      	str	r4, [r2, #0]
 8005a22:	b003      	add	sp, #12
 8005a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a28:	f000 b8da 	b.w	8005be0 <__malloc_unlock>
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d908      	bls.n	8005a42 <_free_r+0x46>
 8005a30:	6825      	ldr	r5, [r4, #0]
 8005a32:	1961      	adds	r1, r4, r5
 8005a34:	428b      	cmp	r3, r1
 8005a36:	bf01      	itttt	eq
 8005a38:	6819      	ldreq	r1, [r3, #0]
 8005a3a:	685b      	ldreq	r3, [r3, #4]
 8005a3c:	1949      	addeq	r1, r1, r5
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	e7ed      	b.n	8005a1e <_free_r+0x22>
 8005a42:	461a      	mov	r2, r3
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b10b      	cbz	r3, 8005a4c <_free_r+0x50>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d9fa      	bls.n	8005a42 <_free_r+0x46>
 8005a4c:	6811      	ldr	r1, [r2, #0]
 8005a4e:	1855      	adds	r5, r2, r1
 8005a50:	42a5      	cmp	r5, r4
 8005a52:	d10b      	bne.n	8005a6c <_free_r+0x70>
 8005a54:	6824      	ldr	r4, [r4, #0]
 8005a56:	4421      	add	r1, r4
 8005a58:	1854      	adds	r4, r2, r1
 8005a5a:	42a3      	cmp	r3, r4
 8005a5c:	6011      	str	r1, [r2, #0]
 8005a5e:	d1e0      	bne.n	8005a22 <_free_r+0x26>
 8005a60:	681c      	ldr	r4, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	6053      	str	r3, [r2, #4]
 8005a66:	440c      	add	r4, r1
 8005a68:	6014      	str	r4, [r2, #0]
 8005a6a:	e7da      	b.n	8005a22 <_free_r+0x26>
 8005a6c:	d902      	bls.n	8005a74 <_free_r+0x78>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	6003      	str	r3, [r0, #0]
 8005a72:	e7d6      	b.n	8005a22 <_free_r+0x26>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	1961      	adds	r1, r4, r5
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	bf04      	itt	eq
 8005a7c:	6819      	ldreq	r1, [r3, #0]
 8005a7e:	685b      	ldreq	r3, [r3, #4]
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	bf04      	itt	eq
 8005a84:	1949      	addeq	r1, r1, r5
 8005a86:	6021      	streq	r1, [r4, #0]
 8005a88:	6054      	str	r4, [r2, #4]
 8005a8a:	e7ca      	b.n	8005a22 <_free_r+0x26>
 8005a8c:	b003      	add	sp, #12
 8005a8e:	bd30      	pop	{r4, r5, pc}
 8005a90:	20000484 	.word	0x20000484

08005a94 <sbrk_aligned>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4e0e      	ldr	r6, [pc, #56]	; (8005ad0 <sbrk_aligned+0x3c>)
 8005a98:	460c      	mov	r4, r1
 8005a9a:	6831      	ldr	r1, [r6, #0]
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	b911      	cbnz	r1, 8005aa6 <sbrk_aligned+0x12>
 8005aa0:	f000 fba6 	bl	80061f0 <_sbrk_r>
 8005aa4:	6030      	str	r0, [r6, #0]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f000 fba1 	bl	80061f0 <_sbrk_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	d00a      	beq.n	8005ac8 <sbrk_aligned+0x34>
 8005ab2:	1cc4      	adds	r4, r0, #3
 8005ab4:	f024 0403 	bic.w	r4, r4, #3
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d007      	beq.n	8005acc <sbrk_aligned+0x38>
 8005abc:	1a21      	subs	r1, r4, r0
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 fb96 	bl	80061f0 <_sbrk_r>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d101      	bne.n	8005acc <sbrk_aligned+0x38>
 8005ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8005acc:	4620      	mov	r0, r4
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	20000488 	.word	0x20000488

08005ad4 <_malloc_r>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	1ccd      	adds	r5, r1, #3
 8005ada:	f025 0503 	bic.w	r5, r5, #3
 8005ade:	3508      	adds	r5, #8
 8005ae0:	2d0c      	cmp	r5, #12
 8005ae2:	bf38      	it	cc
 8005ae4:	250c      	movcc	r5, #12
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	4607      	mov	r7, r0
 8005aea:	db01      	blt.n	8005af0 <_malloc_r+0x1c>
 8005aec:	42a9      	cmp	r1, r5
 8005aee:	d905      	bls.n	8005afc <_malloc_r+0x28>
 8005af0:	230c      	movs	r3, #12
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	2600      	movs	r6, #0
 8005af6:	4630      	mov	r0, r6
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bd0 <_malloc_r+0xfc>
 8005b00:	f000 f868 	bl	8005bd4 <__malloc_lock>
 8005b04:	f8d8 3000 	ldr.w	r3, [r8]
 8005b08:	461c      	mov	r4, r3
 8005b0a:	bb5c      	cbnz	r4, 8005b64 <_malloc_r+0x90>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f7ff ffc0 	bl	8005a94 <sbrk_aligned>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	4604      	mov	r4, r0
 8005b18:	d155      	bne.n	8005bc6 <_malloc_r+0xf2>
 8005b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8005b1e:	4626      	mov	r6, r4
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	d145      	bne.n	8005bb0 <_malloc_r+0xdc>
 8005b24:	2c00      	cmp	r4, #0
 8005b26:	d048      	beq.n	8005bba <_malloc_r+0xe6>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	eb04 0903 	add.w	r9, r4, r3
 8005b32:	f000 fb5d 	bl	80061f0 <_sbrk_r>
 8005b36:	4581      	cmp	r9, r0
 8005b38:	d13f      	bne.n	8005bba <_malloc_r+0xe6>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1a6d      	subs	r5, r5, r1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4638      	mov	r0, r7
 8005b42:	f7ff ffa7 	bl	8005a94 <sbrk_aligned>
 8005b46:	3001      	adds	r0, #1
 8005b48:	d037      	beq.n	8005bba <_malloc_r+0xe6>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	442b      	add	r3, r5
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	f8d8 3000 	ldr.w	r3, [r8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d038      	beq.n	8005bca <_malloc_r+0xf6>
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	42a2      	cmp	r2, r4
 8005b5c:	d12b      	bne.n	8005bb6 <_malloc_r+0xe2>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	e00f      	b.n	8005b84 <_malloc_r+0xb0>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1b52      	subs	r2, r2, r5
 8005b68:	d41f      	bmi.n	8005baa <_malloc_r+0xd6>
 8005b6a:	2a0b      	cmp	r2, #11
 8005b6c:	d917      	bls.n	8005b9e <_malloc_r+0xca>
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	6059      	strne	r1, [r3, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	bf08      	it	eq
 8005b7c:	f8c8 1000 	streq.w	r1, [r8]
 8005b80:	5162      	str	r2, [r4, r5]
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	4638      	mov	r0, r7
 8005b86:	f104 060b 	add.w	r6, r4, #11
 8005b8a:	f000 f829 	bl	8005be0 <__malloc_unlock>
 8005b8e:	f026 0607 	bic.w	r6, r6, #7
 8005b92:	1d23      	adds	r3, r4, #4
 8005b94:	1af2      	subs	r2, r6, r3
 8005b96:	d0ae      	beq.n	8005af6 <_malloc_r+0x22>
 8005b98:	1b9b      	subs	r3, r3, r6
 8005b9a:	50a3      	str	r3, [r4, r2]
 8005b9c:	e7ab      	b.n	8005af6 <_malloc_r+0x22>
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6862      	ldr	r2, [r4, #4]
 8005ba2:	d1dd      	bne.n	8005b60 <_malloc_r+0x8c>
 8005ba4:	f8c8 2000 	str.w	r2, [r8]
 8005ba8:	e7ec      	b.n	8005b84 <_malloc_r+0xb0>
 8005baa:	4623      	mov	r3, r4
 8005bac:	6864      	ldr	r4, [r4, #4]
 8005bae:	e7ac      	b.n	8005b0a <_malloc_r+0x36>
 8005bb0:	4634      	mov	r4, r6
 8005bb2:	6876      	ldr	r6, [r6, #4]
 8005bb4:	e7b4      	b.n	8005b20 <_malloc_r+0x4c>
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	e7cc      	b.n	8005b54 <_malloc_r+0x80>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	f000 f80e 	bl	8005be0 <__malloc_unlock>
 8005bc4:	e797      	b.n	8005af6 <_malloc_r+0x22>
 8005bc6:	6025      	str	r5, [r4, #0]
 8005bc8:	e7dc      	b.n	8005b84 <_malloc_r+0xb0>
 8005bca:	605b      	str	r3, [r3, #4]
 8005bcc:	deff      	udf	#255	; 0xff
 8005bce:	bf00      	nop
 8005bd0:	20000484 	.word	0x20000484

08005bd4 <__malloc_lock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_lock+0x8>)
 8005bd6:	f7ff bf0f 	b.w	80059f8 <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20000480 	.word	0x20000480

08005be0 <__malloc_unlock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_unlock+0x8>)
 8005be2:	f7ff bf0a 	b.w	80059fa <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	20000480 	.word	0x20000480

08005bec <__ssputs_r>:
 8005bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	688e      	ldr	r6, [r1, #8]
 8005bf2:	461f      	mov	r7, r3
 8005bf4:	42be      	cmp	r6, r7
 8005bf6:	680b      	ldr	r3, [r1, #0]
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4690      	mov	r8, r2
 8005bfe:	d82c      	bhi.n	8005c5a <__ssputs_r+0x6e>
 8005c00:	898a      	ldrh	r2, [r1, #12]
 8005c02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c06:	d026      	beq.n	8005c56 <__ssputs_r+0x6a>
 8005c08:	6965      	ldr	r5, [r4, #20]
 8005c0a:	6909      	ldr	r1, [r1, #16]
 8005c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c10:	eba3 0901 	sub.w	r9, r3, r1
 8005c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c18:	1c7b      	adds	r3, r7, #1
 8005c1a:	444b      	add	r3, r9
 8005c1c:	106d      	asrs	r5, r5, #1
 8005c1e:	429d      	cmp	r5, r3
 8005c20:	bf38      	it	cc
 8005c22:	461d      	movcc	r5, r3
 8005c24:	0553      	lsls	r3, r2, #21
 8005c26:	d527      	bpl.n	8005c78 <__ssputs_r+0x8c>
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7ff ff53 	bl	8005ad4 <_malloc_r>
 8005c2e:	4606      	mov	r6, r0
 8005c30:	b360      	cbz	r0, 8005c8c <__ssputs_r+0xa0>
 8005c32:	6921      	ldr	r1, [r4, #16]
 8005c34:	464a      	mov	r2, r9
 8005c36:	f000 faeb 	bl	8006210 <memcpy>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c44:	81a3      	strh	r3, [r4, #12]
 8005c46:	6126      	str	r6, [r4, #16]
 8005c48:	6165      	str	r5, [r4, #20]
 8005c4a:	444e      	add	r6, r9
 8005c4c:	eba5 0509 	sub.w	r5, r5, r9
 8005c50:	6026      	str	r6, [r4, #0]
 8005c52:	60a5      	str	r5, [r4, #8]
 8005c54:	463e      	mov	r6, r7
 8005c56:	42be      	cmp	r6, r7
 8005c58:	d900      	bls.n	8005c5c <__ssputs_r+0x70>
 8005c5a:	463e      	mov	r6, r7
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	4632      	mov	r2, r6
 8005c60:	4641      	mov	r1, r8
 8005c62:	f000 faab 	bl	80061bc <memmove>
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	1b9b      	subs	r3, r3, r6
 8005c6a:	60a3      	str	r3, [r4, #8]
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	4433      	add	r3, r6
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2000      	movs	r0, #0
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	462a      	mov	r2, r5
 8005c7a:	f000 fad7 	bl	800622c <_realloc_r>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d1e0      	bne.n	8005c46 <__ssputs_r+0x5a>
 8005c84:	6921      	ldr	r1, [r4, #16]
 8005c86:	4650      	mov	r0, sl
 8005c88:	f7ff feb8 	bl	80059fc <_free_r>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	f8ca 3000 	str.w	r3, [sl]
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c98:	81a3      	strh	r3, [r4, #12]
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	e7e9      	b.n	8005c74 <__ssputs_r+0x88>

08005ca0 <_svfiprintf_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4698      	mov	r8, r3
 8005ca6:	898b      	ldrh	r3, [r1, #12]
 8005ca8:	061b      	lsls	r3, r3, #24
 8005caa:	b09d      	sub	sp, #116	; 0x74
 8005cac:	4607      	mov	r7, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	d50e      	bpl.n	8005cd2 <_svfiprintf_r+0x32>
 8005cb4:	690b      	ldr	r3, [r1, #16]
 8005cb6:	b963      	cbnz	r3, 8005cd2 <_svfiprintf_r+0x32>
 8005cb8:	2140      	movs	r1, #64	; 0x40
 8005cba:	f7ff ff0b 	bl	8005ad4 <_malloc_r>
 8005cbe:	6028      	str	r0, [r5, #0]
 8005cc0:	6128      	str	r0, [r5, #16]
 8005cc2:	b920      	cbnz	r0, 8005cce <_svfiprintf_r+0x2e>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	e0d0      	b.n	8005e70 <_svfiprintf_r+0x1d0>
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	616b      	str	r3, [r5, #20]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce0:	2330      	movs	r3, #48	; 0x30
 8005ce2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e88 <_svfiprintf_r+0x1e8>
 8005ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cea:	f04f 0901 	mov.w	r9, #1
 8005cee:	4623      	mov	r3, r4
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf6:	b10a      	cbz	r2, 8005cfc <_svfiprintf_r+0x5c>
 8005cf8:	2a25      	cmp	r2, #37	; 0x25
 8005cfa:	d1f9      	bne.n	8005cf0 <_svfiprintf_r+0x50>
 8005cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005d00:	d00b      	beq.n	8005d1a <_svfiprintf_r+0x7a>
 8005d02:	465b      	mov	r3, fp
 8005d04:	4622      	mov	r2, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff ff6f 	bl	8005bec <__ssputs_r>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f000 80a9 	beq.w	8005e66 <_svfiprintf_r+0x1c6>
 8005d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d16:	445a      	add	r2, fp
 8005d18:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80a1 	beq.w	8005e66 <_svfiprintf_r+0x1c6>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2e:	f10a 0a01 	add.w	sl, sl, #1
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	9307      	str	r3, [sp, #28]
 8005d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3c:	4654      	mov	r4, sl
 8005d3e:	2205      	movs	r2, #5
 8005d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d44:	4850      	ldr	r0, [pc, #320]	; (8005e88 <_svfiprintf_r+0x1e8>)
 8005d46:	f7fa fa43 	bl	80001d0 <memchr>
 8005d4a:	9a04      	ldr	r2, [sp, #16]
 8005d4c:	b9d8      	cbnz	r0, 8005d86 <_svfiprintf_r+0xe6>
 8005d4e:	06d0      	lsls	r0, r2, #27
 8005d50:	bf44      	itt	mi
 8005d52:	2320      	movmi	r3, #32
 8005d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d58:	0711      	lsls	r1, r2, #28
 8005d5a:	bf44      	itt	mi
 8005d5c:	232b      	movmi	r3, #43	; 0x2b
 8005d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d62:	f89a 3000 	ldrb.w	r3, [sl]
 8005d66:	2b2a      	cmp	r3, #42	; 0x2a
 8005d68:	d015      	beq.n	8005d96 <_svfiprintf_r+0xf6>
 8005d6a:	9a07      	ldr	r2, [sp, #28]
 8005d6c:	4654      	mov	r4, sl
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f04f 0c0a 	mov.w	ip, #10
 8005d74:	4621      	mov	r1, r4
 8005d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d7a:	3b30      	subs	r3, #48	; 0x30
 8005d7c:	2b09      	cmp	r3, #9
 8005d7e:	d94d      	bls.n	8005e1c <_svfiprintf_r+0x17c>
 8005d80:	b1b0      	cbz	r0, 8005db0 <_svfiprintf_r+0x110>
 8005d82:	9207      	str	r2, [sp, #28]
 8005d84:	e014      	b.n	8005db0 <_svfiprintf_r+0x110>
 8005d86:	eba0 0308 	sub.w	r3, r0, r8
 8005d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	46a2      	mov	sl, r4
 8005d94:	e7d2      	b.n	8005d3c <_svfiprintf_r+0x9c>
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	9103      	str	r1, [sp, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfbb      	ittet	lt
 8005da2:	425b      	neglt	r3, r3
 8005da4:	f042 0202 	orrlt.w	r2, r2, #2
 8005da8:	9307      	strge	r3, [sp, #28]
 8005daa:	9307      	strlt	r3, [sp, #28]
 8005dac:	bfb8      	it	lt
 8005dae:	9204      	strlt	r2, [sp, #16]
 8005db0:	7823      	ldrb	r3, [r4, #0]
 8005db2:	2b2e      	cmp	r3, #46	; 0x2e
 8005db4:	d10c      	bne.n	8005dd0 <_svfiprintf_r+0x130>
 8005db6:	7863      	ldrb	r3, [r4, #1]
 8005db8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dba:	d134      	bne.n	8005e26 <_svfiprintf_r+0x186>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	9203      	str	r2, [sp, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bfb8      	it	lt
 8005dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dcc:	3402      	adds	r4, #2
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005e98 <_svfiprintf_r+0x1f8>
 8005dd4:	7821      	ldrb	r1, [r4, #0]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	4650      	mov	r0, sl
 8005dda:	f7fa f9f9 	bl	80001d0 <memchr>
 8005dde:	b138      	cbz	r0, 8005df0 <_svfiprintf_r+0x150>
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	eba0 000a 	sub.w	r0, r0, sl
 8005de6:	2240      	movs	r2, #64	; 0x40
 8005de8:	4082      	lsls	r2, r0
 8005dea:	4313      	orrs	r3, r2
 8005dec:	3401      	adds	r4, #1
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df4:	4825      	ldr	r0, [pc, #148]	; (8005e8c <_svfiprintf_r+0x1ec>)
 8005df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dfa:	2206      	movs	r2, #6
 8005dfc:	f7fa f9e8 	bl	80001d0 <memchr>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d038      	beq.n	8005e76 <_svfiprintf_r+0x1d6>
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <_svfiprintf_r+0x1f0>)
 8005e06:	bb1b      	cbnz	r3, 8005e50 <_svfiprintf_r+0x1b0>
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	3307      	adds	r3, #7
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	3308      	adds	r3, #8
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e16:	4433      	add	r3, r6
 8005e18:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1a:	e768      	b.n	8005cee <_svfiprintf_r+0x4e>
 8005e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e20:	460c      	mov	r4, r1
 8005e22:	2001      	movs	r0, #1
 8005e24:	e7a6      	b.n	8005d74 <_svfiprintf_r+0xd4>
 8005e26:	2300      	movs	r3, #0
 8005e28:	3401      	adds	r4, #1
 8005e2a:	9305      	str	r3, [sp, #20]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f04f 0c0a 	mov.w	ip, #10
 8005e32:	4620      	mov	r0, r4
 8005e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e38:	3a30      	subs	r2, #48	; 0x30
 8005e3a:	2a09      	cmp	r2, #9
 8005e3c:	d903      	bls.n	8005e46 <_svfiprintf_r+0x1a6>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0c6      	beq.n	8005dd0 <_svfiprintf_r+0x130>
 8005e42:	9105      	str	r1, [sp, #20]
 8005e44:	e7c4      	b.n	8005dd0 <_svfiprintf_r+0x130>
 8005e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e7f0      	b.n	8005e32 <_svfiprintf_r+0x192>
 8005e50:	ab03      	add	r3, sp, #12
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	462a      	mov	r2, r5
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <_svfiprintf_r+0x1f4>)
 8005e58:	a904      	add	r1, sp, #16
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	f3af 8000 	nop.w
 8005e60:	1c42      	adds	r2, r0, #1
 8005e62:	4606      	mov	r6, r0
 8005e64:	d1d6      	bne.n	8005e14 <_svfiprintf_r+0x174>
 8005e66:	89ab      	ldrh	r3, [r5, #12]
 8005e68:	065b      	lsls	r3, r3, #25
 8005e6a:	f53f af2d 	bmi.w	8005cc8 <_svfiprintf_r+0x28>
 8005e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e70:	b01d      	add	sp, #116	; 0x74
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <_svfiprintf_r+0x1f4>)
 8005e7e:	a904      	add	r1, sp, #16
 8005e80:	4638      	mov	r0, r7
 8005e82:	f000 f879 	bl	8005f78 <_printf_i>
 8005e86:	e7eb      	b.n	8005e60 <_svfiprintf_r+0x1c0>
 8005e88:	08006324 	.word	0x08006324
 8005e8c:	0800632e 	.word	0x0800632e
 8005e90:	00000000 	.word	0x00000000
 8005e94:	08005bed 	.word	0x08005bed
 8005e98:	0800632a 	.word	0x0800632a

08005e9c <_printf_common>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	688a      	ldr	r2, [r1, #8]
 8005ea6:	690b      	ldr	r3, [r1, #16]
 8005ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bfb8      	it	lt
 8005eb0:	4613      	movlt	r3, r2
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb8:	4607      	mov	r7, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	b10a      	cbz	r2, 8005ec2 <_printf_common+0x26>
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	0699      	lsls	r1, r3, #26
 8005ec6:	bf42      	ittt	mi
 8005ec8:	6833      	ldrmi	r3, [r6, #0]
 8005eca:	3302      	addmi	r3, #2
 8005ecc:	6033      	strmi	r3, [r6, #0]
 8005ece:	6825      	ldr	r5, [r4, #0]
 8005ed0:	f015 0506 	ands.w	r5, r5, #6
 8005ed4:	d106      	bne.n	8005ee4 <_printf_common+0x48>
 8005ed6:	f104 0a19 	add.w	sl, r4, #25
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	6832      	ldr	r2, [r6, #0]
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dc26      	bgt.n	8005f32 <_printf_common+0x96>
 8005ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee8:	1e13      	subs	r3, r2, #0
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	bf18      	it	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	0692      	lsls	r2, r2, #26
 8005ef2:	d42b      	bmi.n	8005f4c <_printf_common+0xb0>
 8005ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c0      	blx	r8
 8005efe:	3001      	adds	r0, #1
 8005f00:	d01e      	beq.n	8005f40 <_printf_common+0xa4>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	f003 0306 	and.w	r3, r3, #6
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf02      	ittt	eq
 8005f0e:	68e5      	ldreq	r5, [r4, #12]
 8005f10:	6833      	ldreq	r3, [r6, #0]
 8005f12:	1aed      	subeq	r5, r5, r3
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	bf0c      	ite	eq
 8005f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f1c:	2500      	movne	r5, #0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bfc4      	itt	gt
 8005f22:	1a9b      	subgt	r3, r3, r2
 8005f24:	18ed      	addgt	r5, r5, r3
 8005f26:	2600      	movs	r6, #0
 8005f28:	341a      	adds	r4, #26
 8005f2a:	42b5      	cmp	r5, r6
 8005f2c:	d11a      	bne.n	8005f64 <_printf_common+0xc8>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e008      	b.n	8005f44 <_printf_common+0xa8>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4652      	mov	r2, sl
 8005f36:	4649      	mov	r1, r9
 8005f38:	4638      	mov	r0, r7
 8005f3a:	47c0      	blx	r8
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d103      	bne.n	8005f48 <_printf_common+0xac>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	3501      	adds	r5, #1
 8005f4a:	e7c6      	b.n	8005eda <_printf_common+0x3e>
 8005f4c:	18e1      	adds	r1, r4, r3
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	2030      	movs	r0, #48	; 0x30
 8005f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f56:	4422      	add	r2, r4
 8005f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f60:	3302      	adds	r3, #2
 8005f62:	e7c7      	b.n	8005ef4 <_printf_common+0x58>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4622      	mov	r2, r4
 8005f68:	4649      	mov	r1, r9
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c0      	blx	r8
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0e6      	beq.n	8005f40 <_printf_common+0xa4>
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7d9      	b.n	8005f2a <_printf_common+0x8e>
	...

08005f78 <_printf_i>:
 8005f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	7e0f      	ldrb	r7, [r1, #24]
 8005f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f80:	2f78      	cmp	r7, #120	; 0x78
 8005f82:	4691      	mov	r9, r2
 8005f84:	4680      	mov	r8, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8e:	d807      	bhi.n	8005fa0 <_printf_i+0x28>
 8005f90:	2f62      	cmp	r7, #98	; 0x62
 8005f92:	d80a      	bhi.n	8005faa <_printf_i+0x32>
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	f000 80d4 	beq.w	8006142 <_printf_i+0x1ca>
 8005f9a:	2f58      	cmp	r7, #88	; 0x58
 8005f9c:	f000 80c0 	beq.w	8006120 <_printf_i+0x1a8>
 8005fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa8:	e03a      	b.n	8006020 <_printf_i+0xa8>
 8005faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fae:	2b15      	cmp	r3, #21
 8005fb0:	d8f6      	bhi.n	8005fa0 <_printf_i+0x28>
 8005fb2:	a101      	add	r1, pc, #4	; (adr r1, 8005fb8 <_printf_i+0x40>)
 8005fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb8:	08006011 	.word	0x08006011
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005fa1 	.word	0x08005fa1
 8005fc4:	08005fa1 	.word	0x08005fa1
 8005fc8:	08005fa1 	.word	0x08005fa1
 8005fcc:	08005fa1 	.word	0x08005fa1
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005fa1 	.word	0x08005fa1
 8005fd8:	08005fa1 	.word	0x08005fa1
 8005fdc:	08005fa1 	.word	0x08005fa1
 8005fe0:	08005fa1 	.word	0x08005fa1
 8005fe4:	08006129 	.word	0x08006129
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	080060e3 	.word	0x080060e3
 8005ff0:	08005fa1 	.word	0x08005fa1
 8005ff4:	08005fa1 	.word	0x08005fa1
 8005ff8:	0800614b 	.word	0x0800614b
 8005ffc:	08005fa1 	.word	0x08005fa1
 8006000:	08006051 	.word	0x08006051
 8006004:	08005fa1 	.word	0x08005fa1
 8006008:	08005fa1 	.word	0x08005fa1
 800600c:	080060eb 	.word	0x080060eb
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006020:	2301      	movs	r3, #1
 8006022:	e09f      	b.n	8006164 <_printf_i+0x1ec>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	0607      	lsls	r7, r0, #24
 800602a:	f103 0104 	add.w	r1, r3, #4
 800602e:	6029      	str	r1, [r5, #0]
 8006030:	d501      	bpl.n	8006036 <_printf_i+0xbe>
 8006032:	681e      	ldr	r6, [r3, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0xc6>
 8006036:	0646      	lsls	r6, r0, #25
 8006038:	d5fb      	bpl.n	8006032 <_printf_i+0xba>
 800603a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603e:	2e00      	cmp	r6, #0
 8006040:	da03      	bge.n	800604a <_printf_i+0xd2>
 8006042:	232d      	movs	r3, #45	; 0x2d
 8006044:	4276      	negs	r6, r6
 8006046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604a:	485a      	ldr	r0, [pc, #360]	; (80061b4 <_printf_i+0x23c>)
 800604c:	230a      	movs	r3, #10
 800604e:	e012      	b.n	8006076 <_printf_i+0xfe>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	6029      	str	r1, [r5, #0]
 8006058:	0605      	lsls	r5, r0, #24
 800605a:	d501      	bpl.n	8006060 <_printf_i+0xe8>
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	e002      	b.n	8006066 <_printf_i+0xee>
 8006060:	0641      	lsls	r1, r0, #25
 8006062:	d5fb      	bpl.n	800605c <_printf_i+0xe4>
 8006064:	881e      	ldrh	r6, [r3, #0]
 8006066:	4853      	ldr	r0, [pc, #332]	; (80061b4 <_printf_i+0x23c>)
 8006068:	2f6f      	cmp	r7, #111	; 0x6f
 800606a:	bf0c      	ite	eq
 800606c:	2308      	moveq	r3, #8
 800606e:	230a      	movne	r3, #10
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006076:	6865      	ldr	r5, [r4, #4]
 8006078:	60a5      	str	r5, [r4, #8]
 800607a:	2d00      	cmp	r5, #0
 800607c:	bfa2      	ittt	ge
 800607e:	6821      	ldrge	r1, [r4, #0]
 8006080:	f021 0104 	bicge.w	r1, r1, #4
 8006084:	6021      	strge	r1, [r4, #0]
 8006086:	b90e      	cbnz	r6, 800608c <_printf_i+0x114>
 8006088:	2d00      	cmp	r5, #0
 800608a:	d04b      	beq.n	8006124 <_printf_i+0x1ac>
 800608c:	4615      	mov	r5, r2
 800608e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006092:	fb03 6711 	mls	r7, r3, r1, r6
 8006096:	5dc7      	ldrb	r7, [r0, r7]
 8006098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800609c:	4637      	mov	r7, r6
 800609e:	42bb      	cmp	r3, r7
 80060a0:	460e      	mov	r6, r1
 80060a2:	d9f4      	bls.n	800608e <_printf_i+0x116>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d10b      	bne.n	80060c0 <_printf_i+0x148>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07de      	lsls	r6, r3, #31
 80060ac:	d508      	bpl.n	80060c0 <_printf_i+0x148>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	6861      	ldr	r1, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	bfde      	ittt	le
 80060b6:	2330      	movle	r3, #48	; 0x30
 80060b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060c0:	1b52      	subs	r2, r2, r5
 80060c2:	6122      	str	r2, [r4, #16]
 80060c4:	f8cd a000 	str.w	sl, [sp]
 80060c8:	464b      	mov	r3, r9
 80060ca:	aa03      	add	r2, sp, #12
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff fee4 	bl	8005e9c <_printf_common>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d14a      	bne.n	800616e <_printf_i+0x1f6>
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	b004      	add	sp, #16
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f043 0320 	orr.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	4833      	ldr	r0, [pc, #204]	; (80061b8 <_printf_i+0x240>)
 80060ec:	2778      	movs	r7, #120	; 0x78
 80060ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	6829      	ldr	r1, [r5, #0]
 80060f6:	061f      	lsls	r7, r3, #24
 80060f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80060fc:	d402      	bmi.n	8006104 <_printf_i+0x18c>
 80060fe:	065f      	lsls	r7, r3, #25
 8006100:	bf48      	it	mi
 8006102:	b2b6      	uxthmi	r6, r6
 8006104:	07df      	lsls	r7, r3, #31
 8006106:	bf48      	it	mi
 8006108:	f043 0320 	orrmi.w	r3, r3, #32
 800610c:	6029      	str	r1, [r5, #0]
 800610e:	bf48      	it	mi
 8006110:	6023      	strmi	r3, [r4, #0]
 8006112:	b91e      	cbnz	r6, 800611c <_printf_i+0x1a4>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f023 0320 	bic.w	r3, r3, #32
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	2310      	movs	r3, #16
 800611e:	e7a7      	b.n	8006070 <_printf_i+0xf8>
 8006120:	4824      	ldr	r0, [pc, #144]	; (80061b4 <_printf_i+0x23c>)
 8006122:	e7e4      	b.n	80060ee <_printf_i+0x176>
 8006124:	4615      	mov	r5, r2
 8006126:	e7bd      	b.n	80060a4 <_printf_i+0x12c>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	6826      	ldr	r6, [r4, #0]
 800612c:	6961      	ldr	r1, [r4, #20]
 800612e:	1d18      	adds	r0, r3, #4
 8006130:	6028      	str	r0, [r5, #0]
 8006132:	0635      	lsls	r5, r6, #24
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	d501      	bpl.n	800613c <_printf_i+0x1c4>
 8006138:	6019      	str	r1, [r3, #0]
 800613a:	e002      	b.n	8006142 <_printf_i+0x1ca>
 800613c:	0670      	lsls	r0, r6, #25
 800613e:	d5fb      	bpl.n	8006138 <_printf_i+0x1c0>
 8006140:	8019      	strh	r1, [r3, #0]
 8006142:	2300      	movs	r3, #0
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	4615      	mov	r5, r2
 8006148:	e7bc      	b.n	80060c4 <_printf_i+0x14c>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	602a      	str	r2, [r5, #0]
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	2100      	movs	r1, #0
 8006156:	4628      	mov	r0, r5
 8006158:	f7fa f83a 	bl	80001d0 <memchr>
 800615c:	b108      	cbz	r0, 8006162 <_printf_i+0x1ea>
 800615e:	1b40      	subs	r0, r0, r5
 8006160:	6060      	str	r0, [r4, #4]
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	2300      	movs	r3, #0
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616c:	e7aa      	b.n	80060c4 <_printf_i+0x14c>
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	462a      	mov	r2, r5
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	47d0      	blx	sl
 8006178:	3001      	adds	r0, #1
 800617a:	d0ad      	beq.n	80060d8 <_printf_i+0x160>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	079b      	lsls	r3, r3, #30
 8006180:	d413      	bmi.n	80061aa <_printf_i+0x232>
 8006182:	68e0      	ldr	r0, [r4, #12]
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	4298      	cmp	r0, r3
 8006188:	bfb8      	it	lt
 800618a:	4618      	movlt	r0, r3
 800618c:	e7a6      	b.n	80060dc <_printf_i+0x164>
 800618e:	2301      	movs	r3, #1
 8006190:	4632      	mov	r2, r6
 8006192:	4649      	mov	r1, r9
 8006194:	4640      	mov	r0, r8
 8006196:	47d0      	blx	sl
 8006198:	3001      	adds	r0, #1
 800619a:	d09d      	beq.n	80060d8 <_printf_i+0x160>
 800619c:	3501      	adds	r5, #1
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	9903      	ldr	r1, [sp, #12]
 80061a2:	1a5b      	subs	r3, r3, r1
 80061a4:	42ab      	cmp	r3, r5
 80061a6:	dcf2      	bgt.n	800618e <_printf_i+0x216>
 80061a8:	e7eb      	b.n	8006182 <_printf_i+0x20a>
 80061aa:	2500      	movs	r5, #0
 80061ac:	f104 0619 	add.w	r6, r4, #25
 80061b0:	e7f5      	b.n	800619e <_printf_i+0x226>
 80061b2:	bf00      	nop
 80061b4:	08006335 	.word	0x08006335
 80061b8:	08006346 	.word	0x08006346

080061bc <memmove>:
 80061bc:	4288      	cmp	r0, r1
 80061be:	b510      	push	{r4, lr}
 80061c0:	eb01 0402 	add.w	r4, r1, r2
 80061c4:	d902      	bls.n	80061cc <memmove+0x10>
 80061c6:	4284      	cmp	r4, r0
 80061c8:	4623      	mov	r3, r4
 80061ca:	d807      	bhi.n	80061dc <memmove+0x20>
 80061cc:	1e43      	subs	r3, r0, #1
 80061ce:	42a1      	cmp	r1, r4
 80061d0:	d008      	beq.n	80061e4 <memmove+0x28>
 80061d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061da:	e7f8      	b.n	80061ce <memmove+0x12>
 80061dc:	4402      	add	r2, r0
 80061de:	4601      	mov	r1, r0
 80061e0:	428a      	cmp	r2, r1
 80061e2:	d100      	bne.n	80061e6 <memmove+0x2a>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ee:	e7f7      	b.n	80061e0 <memmove+0x24>

080061f0 <_sbrk_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d06      	ldr	r5, [pc, #24]	; (800620c <_sbrk_r+0x1c>)
 80061f4:	2300      	movs	r3, #0
 80061f6:	4604      	mov	r4, r0
 80061f8:	4608      	mov	r0, r1
 80061fa:	602b      	str	r3, [r5, #0]
 80061fc:	f7fb fa62 	bl	80016c4 <_sbrk>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_sbrk_r+0x1a>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_sbrk_r+0x1a>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	2000047c 	.word	0x2000047c

08006210 <memcpy>:
 8006210:	440a      	add	r2, r1
 8006212:	4291      	cmp	r1, r2
 8006214:	f100 33ff 	add.w	r3, r0, #4294967295
 8006218:	d100      	bne.n	800621c <memcpy+0xc>
 800621a:	4770      	bx	lr
 800621c:	b510      	push	{r4, lr}
 800621e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006226:	4291      	cmp	r1, r2
 8006228:	d1f9      	bne.n	800621e <memcpy+0xe>
 800622a:	bd10      	pop	{r4, pc}

0800622c <_realloc_r>:
 800622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	4680      	mov	r8, r0
 8006232:	4614      	mov	r4, r2
 8006234:	460e      	mov	r6, r1
 8006236:	b921      	cbnz	r1, 8006242 <_realloc_r+0x16>
 8006238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	4611      	mov	r1, r2
 800623e:	f7ff bc49 	b.w	8005ad4 <_malloc_r>
 8006242:	b92a      	cbnz	r2, 8006250 <_realloc_r+0x24>
 8006244:	f7ff fbda 	bl	80059fc <_free_r>
 8006248:	4625      	mov	r5, r4
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006250:	f000 f81b 	bl	800628a <_malloc_usable_size_r>
 8006254:	4284      	cmp	r4, r0
 8006256:	4607      	mov	r7, r0
 8006258:	d802      	bhi.n	8006260 <_realloc_r+0x34>
 800625a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800625e:	d812      	bhi.n	8006286 <_realloc_r+0x5a>
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7ff fc36 	bl	8005ad4 <_malloc_r>
 8006268:	4605      	mov	r5, r0
 800626a:	2800      	cmp	r0, #0
 800626c:	d0ed      	beq.n	800624a <_realloc_r+0x1e>
 800626e:	42bc      	cmp	r4, r7
 8006270:	4622      	mov	r2, r4
 8006272:	4631      	mov	r1, r6
 8006274:	bf28      	it	cs
 8006276:	463a      	movcs	r2, r7
 8006278:	f7ff ffca 	bl	8006210 <memcpy>
 800627c:	4631      	mov	r1, r6
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fbbc 	bl	80059fc <_free_r>
 8006284:	e7e1      	b.n	800624a <_realloc_r+0x1e>
 8006286:	4635      	mov	r5, r6
 8006288:	e7df      	b.n	800624a <_realloc_r+0x1e>

0800628a <_malloc_usable_size_r>:
 800628a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628e:	1f18      	subs	r0, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfbc      	itt	lt
 8006294:	580b      	ldrlt	r3, [r1, r0]
 8006296:	18c0      	addlt	r0, r0, r3
 8006298:	4770      	bx	lr
	...

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
